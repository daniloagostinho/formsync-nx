package br.com.backend.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.Map;

@Service
@Slf4j
public class SessionControlService {
    
    private final SessionStorageService sessionStorage;
    
    public SessionControlService(SessionStorageService sessionStorage) {
        this.sessionStorage = sessionStorage;
        log.info("üîê SessionControlService inicializado com storage: {}", 
                sessionStorage.getClass().getSimpleName());
    }
    
    /**
     * Registra um novo token ativo para um usu√°rio
     * Se j√° existir um token ativo, o anterior √© automaticamente revogado
     */
    public String registerActiveToken(String email, String token) {
        log.info("üîê Registrando novo token para usu√°rio: {}", email);
        sessionStorage.registerActiveToken(email, token);
        return token;
    }
    
    /**
     * Verifica se um token est√° ativo (n√£o foi revogado)
     */
    public boolean isTokenActive(String token) {
        return sessionStorage.isTokenActive(token);
    }
    
    /**
     * Revoga um token espec√≠fico
     */
    public void revokeToken(String token) {
        sessionStorage.revokeToken(token);
    }
    
    /**
     * Revoga todos os tokens de um usu√°rio espec√≠fico
     */
    public void revokeAllUserTokens(String email) {
        sessionStorage.revokeAllUserTokens(email);
    }
    
    /**
     * Obt√©m o token ativo de um usu√°rio
     */
    public String getActiveToken(String email) {
        return sessionStorage.getActiveToken(email);
    }
    
    /**
     * Verifica se um usu√°rio tem uma sess√£o ativa
     */
    public boolean hasActiveSession(String email) {
        return sessionStorage.hasActiveSession(email);
    }
    
    /**
     * Limpa tokens revogados antigos
     */
    public void cleanupExpiredRevokedTokens() {
        sessionStorage.cleanupExpiredTokens();
    }
    
    /**
     * Obt√©m estat√≠sticas de sess√µes
     */
    public Map<String, Object> getSessionStats() {
        return sessionStorage.getSessionStats();
    }
    
    /**
     * For√ßa logout de todos os usu√°rios (emerg√™ncia)
     */
    public void forceLogoutAllUsers() {
        sessionStorage.forceLogoutAllUsers();
    }
    
    /**
     * Obt√©m informa√ß√µes detalhadas de uma sess√£o espec√≠fica
     */
    public Map<String, Object> getSessionDetails(String email) {
        Map<String, Object> details = new java.util.HashMap<>();
        String token = sessionStorage.getActiveToken(email);
        
        details.put("email", email);
        details.put("hasActiveSession", token != null);
        details.put("tokenExists", token != null);
        details.put("tokenPreview", token != null ? token.substring(0, Math.min(20, token.length())) + "..." : "N/A");
        details.put("sessionCreated", token != null ? "SIM" : "N√ÉO");
        details.put("storageType", sessionStorage.getClass().getSimpleName());
        
        return details;
    }
}
