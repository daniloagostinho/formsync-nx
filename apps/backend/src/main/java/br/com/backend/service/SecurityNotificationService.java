package br.com.backend.service;

import br.com.backend.dto.FileSecurityResult;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

@Service
@Slf4j
public class SecurityNotificationService {

    @Value("${app.security.file.notification.enabled:true}")
    private boolean notificationEnabled;

    @Value("${app.security.file.notification.notify-admin-on-quarantine:true}")
    private boolean notifyAdminOnQuarantine;

    @Value("${app.security.file.notification.notify-user-on-rejection:true}")
    private boolean notifyUserOnRejection;

    /**
     * Notifica sobre arquivo rejeitado por seguran√ßa
     */
    public void notifyFileRejected(FileSecurityResult result, String userEmail) {
        if (!notificationEnabled || !notifyUserOnRejection) {
            return;
        }

        log.warn("üö´ NOTIFICA√á√ÉO: Arquivo rejeitado por seguran√ßa - Usu√°rio: {}, Arquivo: {}, Motivo: {}", 
            userEmail, result.getFileName(), result.getMessage());

        // Em produ√ß√£o, implementar:
        // 1. Email para o usu√°rio
        // 2. SMS (se configurado)
        // 3. Notifica√ß√£o push
        // 4. Log em sistema de monitoramento
    }

    /**
     * Notifica sobre arquivo colocado em quarentena
     */
    public void notifyFileQuarantined(FileSecurityResult result, String userEmail) {
        if (!notificationEnabled || !notifyAdminOnQuarantine) {
            return;
        }

        log.warn("üö´ NOTIFICA√á√ÉO: Arquivo colocado em quarentena - Usu√°rio: {}, Arquivo: {}, Caminho: {}", 
            userEmail, result.getFileName(), result.getQuarantinePath());

        // Em produ√ß√£o, implementar:
        // 1. Email para administradores
        // 2. Alertas em sistema de monitoramento
        // 3. Dashboard de seguran√ßa
        // 4. Integra√ß√£o com SIEM
    }

    /**
     * Notifica sobre tentativa de upload malicioso
     */
    public void notifyMaliciousUploadAttempt(FileSecurityResult result, String userEmail, String userIp) {
        if (!notificationEnabled) {
            return;
        }

        log.error("üö® ALERTA DE SEGURAN√áA: Tentativa de upload malicioso - Usu√°rio: {}, IP: {}, Arquivo: {}, Problema: {}", 
            userEmail, userIp, result.getFileName(), result.getSecurityIssues());

        // Em produ√ß√£o, implementar:
        // 1. Alerta imediato para equipe de seguran√ßa
        // 2. Bloqueio tempor√°rio do usu√°rio/IP
        // 3. An√°lise forense
        // 4. Relat√≥rio para compliance
    }

    /**
     * Notifica sobre scan de malware conclu√≠do
     */
    public void notifyMalwareScanCompleted(FileSecurityResult result, String userEmail, long scanDuration) {
        if (!notificationEnabled) {
            return;
        }

        if (result.isSecure()) {
            log.info("‚úÖ NOTIFICA√á√ÉO: Scan de malware conclu√≠do - Usu√°rio: {}, Arquivo: {}, Dura√ß√£o: {}ms", 
                userEmail, result.getFileName(), scanDuration);
        } else {
            log.warn("‚ö†Ô∏è NOTIFICA√á√ÉO: Scan de malware detectou problema - Usu√°rio: {}, Arquivo: {}, Problema: {}", 
                userEmail, result.getFileName(), result.getMessage());
        }
    }

    /**
     * Gera relat√≥rio de seguran√ßa
     */
    public String generateSecurityReport(FileSecurityResult result) {
        StringBuilder report = new StringBuilder();
        report.append("=== RELAT√ìRIO DE SEGURAN√áA DE ARQUIVO ===\n");
        report.append("Data/Hora: ").append(LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"))).append("\n");
        report.append("Arquivo: ").append(result.getFileName()).append("\n");
        report.append("Tamanho: ").append(result.getFileSize()).append(" bytes\n");
        report.append("Status: ").append(result.isSecure() ? "SEGURO" : "REJEITADO").append("\n");
        report.append("Mensagem: ").append(result.getMessage()).append("\n");
        
        if (result.getSecurityIssues() != null) {
            report.append("Problemas de Seguran√ßa: ").append(result.getSecurityIssues()).append("\n");
        }
        
        if (result.isQuarantined()) {
            report.append("Quarentenado: SIM\n");
            report.append("Caminho da Quarentena: ").append(result.getQuarantinePath()).append("\n");
        }
        
        if (result.getError() != null) {
            report.append("Erro: ").append(result.getError()).append("\n");
        }
        
        report.append("==========================================\n");
        
        return report.toString();
    }

    /**
     * Notifica sobre atualiza√ß√£o de defini√ß√µes de v√≠rus
     */
    public void notifyVirusDefinitionsUpdated(String version, LocalDateTime updateTime) {
        if (!notificationEnabled) {
            return;
        }

        log.info("üîÑ NOTIFICA√á√ÉO: Defini√ß√µes de v√≠rus atualizadas - Vers√£o: {}, Data: {}", 
            version, updateTime.format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")));

        // Em produ√ß√£o, implementar:
        // 1. Notifica√ß√£o para administradores
        // 2. Log de auditoria
        // 3. M√©tricas de atualiza√ß√£o
    }

    /**
     * Notifica sobre falha no sistema de seguran√ßa
     */
    public void notifySecuritySystemFailure(String error, String component) {
        if (!notificationEnabled) {
            return;
        }

        log.error("üí• ALERTA CR√çTICO: Falha no sistema de seguran√ßa - Componente: {}, Erro: {}", 
            component, error);

        // Em produ√ß√£o, implementar:
        // 1. Alerta cr√≠tico para equipe de seguran√ßa
        // 2. Escala√ß√£o autom√°tica
        // 3. Fallback para modo de seguran√ßa
        // 4. Notifica√ß√£o para stakeholders
    }
}
