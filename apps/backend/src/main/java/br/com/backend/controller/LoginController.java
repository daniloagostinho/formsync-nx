package br.com.backend.controller;

import br.com.backend.service.EmailService;
import br.com.backend.service.LogService;
import br.com.backend.service.SessionControlService;
import br.com.backend.dto.*;
import br.com.backend.entity.CodigoLogin;
import br.com.backend.entity.Usuario;
import br.com.backend.repository.CodigoLoginRepository;
import br.com.backend.repository.UsuarioRepository;
import br.com.backend.security.JwtTokenUtil;
import jakarta.transaction.Transactional;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.CrossOrigin;

import java.time.LocalDateTime;
import java.util.*;
import jakarta.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestController
@RequestMapping("/api/v1/login")
@CrossOrigin(origins = {"http://localhost:4200", "http://localhost:*", "http://127.0.0.1:*", "https://formsync.com.br", "https://www.formsync.com.br", "https://d2e8aebnrgifge.cloudfront.net"}, allowCredentials = "true")
public class LoginController {

    private static final Logger log = LoggerFactory.getLogger(LoginController.class);

    private final UsuarioRepository usuarioRepository;
    private final CodigoLoginRepository codigoLoginRepo;
    private final EmailService emailService;
    private final JwtTokenUtil jwtTokenUtil;
    private final LogService logService;
    private final SessionControlService sessionControlService;

    public LoginController(UsuarioRepository usuarioRepository,
                           CodigoLoginRepository codigoLoginRepo,
                           EmailService emailService,
                           JwtTokenUtil jwtTokenUtil,
                           LogService logService,
                           SessionControlService sessionControlService
                           ) {
        this.usuarioRepository = usuarioRepository;
        this.codigoLoginRepo = codigoLoginRepo;
        this.emailService = emailService;
        this.jwtTokenUtil = jwtTokenUtil;
        this.logService = logService;
        this.sessionControlService = sessionControlService;
    }
    
    @PostMapping
    @Transactional
    public ResponseEntity<MensagemResponseDTO> enviarCodigo(@Valid @RequestBody LoginDTO login) {
        String codigo = null;
        try {
            log.info("üîê [LOGIN_CONTROLLER] === IN√çCIO DO PROCESSO DE LOGIN ===");
            log.info("üîê [LOGIN_CONTROLLER] Email recebido: {}", login.getEmail());
            log.info("üîê [LOGIN_CONTROLLER] Tentativa de login para email: {}", login.getEmail());
            
            // Log 1: Verificar se o usu√°rio existe
            log.info("üîê [LOGIN_CONTROLLER] Buscando usu√°rio no banco...");
            Optional<Usuario> usuario = usuarioRepository.findByEmail(login.getEmail());
            if (usuario.isEmpty()) {
                log.warn("‚ö†Ô∏è [LOGIN_CONTROLLER] Usu√°rio n√£o encontrado para email: {}", login.getEmail());
                logService.logLoginAttempt(login.getEmail(), false, "Usu√°rio n√£o encontrado");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new MensagemResponseDTO("Usu√°rio n√£o encontrado"));
            }
            log.info("‚úÖ [LOGIN_CONTROLLER] Usu√°rio encontrado: ID={}, Nome={}", usuario.get().getId(), usuario.get().getNome());

            // Log 2: Gerar c√≥digo
            log.info("üîê [LOGIN_CONTROLLER] Gerando c√≥digo de verifica√ß√£o...");
            codigo = String.format("%06d", new Random().nextInt(1000000));
            LocalDateTime expiracao = LocalDateTime.now().plusMinutes(5);
            log.info("‚úÖ [LOGIN_CONTROLLER] C√≥digo gerado: {} - Expira em: {}", codigo, expiracao);

            // Log 3: Limpar c√≥digo anterior
            log.info("üîê [LOGIN_CONTROLLER] Limpando c√≥digo anterior...");
            try {
                // Buscar c√≥digos existentes primeiro
                List<CodigoLogin> codigosExistentes = codigoLoginRepo.findAllByEmail(login.getEmail());
                if (!codigosExistentes.isEmpty()) {
                    log.info("üîê [LOGIN_CONTROLLER] Encontrados {} c√≥digos anteriores para {}", codigosExistentes.size(), login.getEmail());
                    codigoLoginRepo.deleteByEmail(login.getEmail());
                    log.info("‚úÖ [LOGIN_CONTROLLER] C√≥digo anterior removido para: {}", login.getEmail());
                } else {
                    log.info("üîê [LOGIN_CONTROLLER] Nenhum c√≥digo anterior encontrado para: {}", login.getEmail());
                }
            } catch (Exception deleteError) {
                log.warn("‚ö†Ô∏è [LOGIN_CONTROLLER] Erro ao remover c√≥digo anterior para {}: {}", login.getEmail(), deleteError.getMessage());
                log.warn("‚ö†Ô∏è [LOGIN_CONTROLLER] Stack trace do erro de remo√ß√£o:", deleteError);
                // Continua mesmo se falhar ao remover c√≥digo anterior
            }
            
            // Log 4: Salvar novo c√≥digo
            log.info("üîê [LOGIN_CONTROLLER] Salvando novo c√≥digo no banco...");
            try {
                CodigoLogin codigoLogin = new CodigoLogin(null, login.getEmail(), codigo, false, expiracao, LocalDateTime.now());
                
                codigoLoginRepo.save(codigoLogin);
                log.info("‚úÖ [LOGIN_CONTROLLER] C√≥digo salvo no banco para: {} - C√≥digo: {}", login.getEmail(), codigo);
            } catch (Exception saveError) {
                log.error("‚ùå [LOGIN_CONTROLLER] Erro ao salvar c√≥digo no banco para {}: {}", login.getEmail(), saveError.getMessage());
                log.error("‚ùå [LOGIN_CONTROLLER] Stack trace completo do erro de salvamento:", saveError);
                throw new RuntimeException("Falha ao salvar c√≥digo de verifica√ß√£o", saveError);
            }
            
        } catch (Exception e) {
            log.error("‚ùå [LOGIN_CONTROLLER] === ERRO CR√çTICO NO PROCESSO DE LOGIN ===");
            log.error("‚ùå [LOGIN_CONTROLLER] Email: {}", login.getEmail());
            log.error("‚ùå [LOGIN_CONTROLLER] Tipo do erro: {}", e.getClass().getSimpleName());
            log.error("‚ùå [LOGIN_CONTROLLER] Mensagem do erro: {}", e.getMessage());
            log.error("‚ùå [LOGIN_CONTROLLER] Stack trace completo:", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new MensagemResponseDTO("Erro interno do servidor. Tente novamente."));
        }
        
        // Log 5: Enviar email
        log.info("üîê [LOGIN_CONTROLLER] Enviando c√≥digo por email...");
        try {
            log.info("üîê [LOGIN_CONTROLLER] Chamando emailService.enviarCodigo...");
            emailService.enviarCodigo(login.getEmail(), codigo);
            log.info("‚úÖ [LOGIN_CONTROLLER] Email enviado com sucesso!");
            
            log.info("üîê [LOGIN_CONTROLLER] Chamando logService.logCodeSent...");
            logService.logCodeSent(login.getEmail(), codigo);
            log.info("‚úÖ [LOGIN_CONTROLLER] Log de c√≥digo enviado registrado!");
            
            log.info("üîê [LOGIN_CONTROLLER] Chamando logService.logLoginAttempt...");
            logService.logLoginAttempt(login.getEmail(), true, null);
            log.info("‚úÖ [LOGIN_CONTROLLER] Log de tentativa de login registrado!");
            
            log.info("‚úÖ [LOGIN_CONTROLLER] === PROCESSO DE LOGIN CONCLU√çDO COM SUCESSO ===");
            log.info("‚úÖ [LOGIN_CONTROLLER] C√≥digo enviado com sucesso para: {}", login.getEmail());
            return ResponseEntity.ok(new MensagemResponseDTO("C√≥digo enviado para o e-mail."));
            
        } catch (Exception emailError) {
            log.error("‚ùå [LOGIN_CONTROLLER] === ERRO AO ENVIAR EMAIL ===");
            log.error("‚ùå [LOGIN_CONTROLLER] Email: {}", login.getEmail());
            log.error("‚ùå [LOGIN_CONTROLLER] Tipo do erro: {}", emailError.getClass().getSimpleName());
            log.error("‚ùå [LOGIN_CONTROLLER] Mensagem do erro: {}", emailError.getMessage());
            log.error("‚ùå [LOGIN_CONTROLLER] Stack trace completo do erro de email:", emailError);
            
            // Tenta remover o c√≥digo salvo se o email falhou (em uma nova transa√ß√£o)
            log.info("üîê [LOGIN_CONTROLLER] Tentando limpar c√≥digo ap√≥s falha no email...");
            try {
                limparCodigoFalha(login.getEmail());
                log.info("‚úÖ [LOGIN_CONTROLLER] C√≥digo limpo com sucesso ap√≥s falha no email");
            } catch (Exception cleanupError) {
                log.error("‚ùå [LOGIN_CONTROLLER] Erro ao limpar c√≥digo ap√≥s falha no email para {}: {}", login.getEmail(), cleanupError.getMessage());
                log.error("‚ùå [LOGIN_CONTROLLER] Stack trace do erro de limpeza:", cleanupError);
                // N√£o falha a opera√ß√£o se n√£o conseguir limpar
            }
            
            // Retorna erro espec√≠fico para problemas de email
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new MensagemResponseDTO("Erro ao enviar c√≥digo por email. Tente novamente ou entre em contato com o suporte."));
        }
    }

    /**
     * Remove c√≥digo de login em uma transa√ß√£o separada
     * Usado para limpeza ap√≥s falhas no envio de email
     */
    @Transactional
    public void limparCodigoFalha(String email) {
        try {
            log.info("üîê [LOGIN_CONTROLLER] === INICIANDO LIMPEZA DE C√ìDIGO ===");
            log.info("üîê [LOGIN_CONTROLLER] Email: {}", email);
            log.info("üîê [LOGIN_CONTROLLER] Chamando codigoLoginRepo.deleteByEmail...");
            
            codigoLoginRepo.deleteByEmail(email);
            log.info("‚úÖ [LOGIN_CONTROLLER] C√≥digo removido do banco para: {}", email);
            log.info("‚úÖ [LOGIN_CONTROLLER] === LIMPEZA DE C√ìDIGO CONCLU√çDA COM SUCESSO ===");
        } catch (Exception e) {
            log.error("‚ùå [LOGIN_CONTROLLER] === ERRO NA LIMPEZA DE C√ìDIGO ===");
            log.error("‚ùå [LOGIN_CONTROLLER] Email: {}", email);
            log.error("‚ùå [LOGIN_CONTROLLER] Tipo do erro: {}", e.getClass().getSimpleName());
            log.error("‚ùå [LOGIN_CONTROLLER] Mensagem do erro: {}", e.getMessage());
            log.error("‚ùå [LOGIN_CONTROLLER] Stack trace completo do erro de limpeza:", e);
            // Re-throw para que a transa√ß√£o seja revertida
            throw e;
        }
    }
    
    @Transactional
    @PostMapping("/verificar")
    public ResponseEntity<?> verificarCodigo(@Valid @RequestBody CodigoDTO dto, 
                                           HttpServletRequest request) {
        logService.logCodeVerified(dto.getEmail(), false, "Iniciando verifica√ß√£o do c√≥digo: " + dto.getCodigo());
        
        // üöÄ FEATURE FLAG: Verificar se √© c√≥digo de bypass para pular verifica√ß√£o de email
        if ("123456".equals(dto.getCodigo())) {
            log.info("üöÄ [FEATURE_FLAG] C√≥digo de bypass detectado - pulando verifica√ß√£o de email para: {}", dto.getEmail());
            logService.logCodeVerified(dto.getEmail(), false, "C√≥digo de bypass usado - pulando verifica√ß√£o de email");
            
            // Busca o usu√°rio no banco de dados
            Optional<Usuario> usuarioOpt = usuarioRepository.findByEmail(dto.getEmail());
            if (usuarioOpt.isEmpty()) {
                logService.logCodeVerified(dto.getEmail(), false, "Usu√°rio n√£o encontrado (bypass)");
                ErrorResponseDTO errorResponse = new ErrorResponseDTO("Usu√°rio n√£o encontrado.", "USER_NOT_FOUND");
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
            }
            Usuario usuario = usuarioOpt.get();

            // Capturar informa√ß√µes de seguran√ßa do dispositivo
            String userAgent = request.getHeader("User-Agent");
            String ipAddress = getClientIpAddress(request);
            
            log.info("üîê [FEATURE_FLAG] Login direto realizado para usu√°rio: {} - IP: {} - User-Agent: {}", 
                    dto.getEmail(), ipAddress, userAgent != null ? userAgent.substring(0, Math.min(50, userAgent.length())) + "..." : "N/A");

            // Gera o token JWT com informa√ß√µes de dispositivo
            String token = jwtTokenUtil.generateToken(dto.getEmail(), userAgent, ipAddress);

            // Registra o novo token e revoga tokens anteriores (sess√£o √∫nica)
            sessionControlService.registerActiveToken(dto.getEmail(), token);
            
            log.info("‚úÖ [FEATURE_FLAG] Login direto realizado para usu√°rio: {} - Sess√£o anterior revogada", dto.getEmail());

            // Retorna token + informa√ß√µes do usu√°rio
            LoginResponseDTO resposta = new LoginResponseDTO(token, usuario.getNome(), usuario.getEmail(), usuario.getPlano());

            logService.logCodeVerified(dto.getEmail(), true, "Login direto via feature flag");
            logService.logLoginAttempt(dto.getEmail(), true, "Login direto via feature flag");

            return ResponseEntity.ok(resposta);
        }
        
        // Fluxo normal de verifica√ß√£o de c√≥digo
        // Buscar apenas o c√≥digo mais recente e v√°lido
        List<CodigoLogin> codigos = codigoLoginRepo.findAllValidCodesByEmail(dto.getEmail(), LocalDateTime.now());
        if (codigos.isEmpty()) {
            logService.logCodeVerified(dto.getEmail(), false, "C√≥digo n√£o encontrado ou expirado");
            ErrorResponseDTO errorResponse = new ErrorResponseDTO("C√≥digo inv√°lido ou expirado.", "INVALID_CODE");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
        }
        
        // Pegar o c√≥digo mais recente (primeiro da lista ordenada)
        CodigoLogin registro = codigos.get(0);
        logService.logCodeVerified(dto.getEmail(), false, "C√≥digo v√°lido encontrado - ID: " + registro.getId() + ", Expira√ß√£o: " + registro.getExpiracao());

        if (registro.getExpiracao().isBefore(LocalDateTime.now())) {
            logService.logCodeVerified(dto.getEmail(), false, "C√≥digo expirado");
            ErrorResponseDTO errorResponse = new ErrorResponseDTO("C√≥digo expirado.", "CODE_EXPIRED");
            return ResponseEntity.status(HttpStatus.GONE).body(errorResponse);
        }

        if (!registro.getCodigo().equals(dto.getCodigo())) {
            logService.logCodeVerified(dto.getEmail(), false, "C√≥digo incorreto");
            ErrorResponseDTO errorResponse = new ErrorResponseDTO("C√≥digo incorreto.", "INCORRECT_CODE");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
        }

        // Busca o usu√°rio no banco de dados
        Optional<Usuario> usuarioOpt = usuarioRepository.findByEmail(dto.getEmail());
        if (usuarioOpt.isEmpty()) {
            logService.logCodeVerified(dto.getEmail(), false, "Usu√°rio n√£o encontrado");
            ErrorResponseDTO errorResponse = new ErrorResponseDTO("Usu√°rio n√£o encontrado.", "USER_NOT_FOUND");
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
        }
        Usuario usuario = usuarioOpt.get();

        // Capturar informa√ß√µes de seguran√ßa do dispositivo
        String userAgent = request.getHeader("User-Agent");
        String ipAddress = getClientIpAddress(request);
        
        log.info("üîê Login realizado para usu√°rio: {} - IP: {} - User-Agent: {}", 
                dto.getEmail(), ipAddress, userAgent != null ? userAgent.substring(0, Math.min(50, userAgent.length())) + "..." : "N/A");

        // Gera o token JWT com informa√ß√µes de dispositivo
        String token = jwtTokenUtil.generateToken(dto.getEmail(), userAgent, ipAddress);

        // Registra o novo token e revoga tokens anteriores (sess√£o √∫nica)
        sessionControlService.registerActiveToken(dto.getEmail(), token);
        
        log.info("‚úÖ Login realizado para usu√°rio: {} - Sess√£o anterior revogada", dto.getEmail());

        // Marca o c√≥digo como expirado em vez de deletar (mais seguro)
        try {
            logService.logCodeVerified(dto.getEmail(), false, "Marcando c√≥digo como expirado ap√≥s verifica√ß√£o bem-sucedida");
            registro.setExpiracao(LocalDateTime.now().minusMinutes(1)); // Marca como expirado
            codigoLoginRepo.save(registro);
            logService.logCodeVerified(dto.getEmail(), false, "C√≥digo marcado como expirado com sucesso");
        } catch (Exception e) {
            logService.logCodeVerified(dto.getEmail(), false, "Erro ao marcar c√≥digo como expirado: " + e.getMessage());
            // N√£o falha a opera√ß√£o se n√£o conseguir marcar o c√≥digo
        }

        // Retorna token + informa√ß√µes do usu√°rio
        LoginResponseDTO resposta = new LoginResponseDTO(token, usuario.getNome(), usuario.getEmail(), usuario.getPlano());

        logService.logCodeVerified(dto.getEmail(), true, null);
        logService.logLoginAttempt(dto.getEmail(), true, null);

        return ResponseEntity.ok(resposta);
    }
    
    /**
     * Obt√©m o IP real do cliente (considerando proxies)
     */
    private String getClientIpAddress(HttpServletRequest request) {
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty() && !"unknown".equalsIgnoreCase(xForwardedFor)) {
            return xForwardedFor.split(",")[0].trim();
        }
        
        String xRealIp = request.getHeader("X-Real-IP");
        if (xRealIp != null && !xRealIp.isEmpty() && !"unknown".equalsIgnoreCase(xRealIp)) {
            return xRealIp;
        }
        
        return request.getRemoteAddr();
    }
}
