package br.com.backend.controller;

import br.com.backend.entity.HistoricoPreenchimento;
import br.com.backend.entity.Usuario;
import br.com.backend.repository.HistoricoPreenchimentoRepository;
import br.com.backend.repository.UsuarioRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import jakarta.validation.Valid;
import jakarta.validation.constraints.Positive;
import java.util.List;

@RestController
@CrossOrigin(origins = {"http://localhost:4200", "http://localhost:*", "http://127.0.0.1:*", "https://formsync.com.br", "https://www.formsync.com.br", "https://d2e8aebnrgifge.cloudfront.net"}, allowCredentials = "true")
@RequestMapping("/api/v1/historico")
@RequiredArgsConstructor
@Slf4j
public class HistoricoController {

    private final HistoricoPreenchimentoRepository historicoRepository;
    private final UsuarioRepository usuarioRepository;

    @GetMapping
    public ResponseEntity<List<HistoricoPreenchimento>> listarHistorico() {
        log.debug("üìã [HISTORICO] Listagem de hist√≥rico solicitada");
        
        try {
            // ‚úÖ VALIDA√á√ÉO: Verificar se usu√°rio est√° autenticado
            Usuario usuario = getUsuarioAutenticado();
            
            // Buscar hist√≥rico do usu√°rio logado
            List<HistoricoPreenchimento> historico = historicoRepository.findByUsuarioId(usuario.getId());
            
            log.debug("‚úÖ [HISTORICO] {} registros de hist√≥rico listados para usu√°rio: {}", historico.size(), usuario.getId());
            return ResponseEntity.ok(historico);
            
        } catch (Exception e) {
            log.error("‚ùå [HISTORICO] Erro ao listar hist√≥rico: {}", e.getMessage());
            throw e;
        }
    }

    @PostMapping
    public ResponseEntity<HistoricoPreenchimento> salvarHistorico(@Valid @RequestBody HistoricoPreenchimento historico) {
        log.info("üíæ [HISTORICO] Salvamento de hist√≥rico solicitado");
        
        try {
            // ‚úÖ VALIDA√á√ÉO: Verificar se usu√°rio est√° autenticado
            Usuario usuario = getUsuarioAutenticado();
            
            // Associar o hist√≥rico ao usu√°rio logado
            historico.setUsuario(usuario);
            
            HistoricoPreenchimento salvo = historicoRepository.save(historico);
            
            log.info("‚úÖ [HISTORICO] Hist√≥rico salvo com sucesso - ID: {}, Usu√°rio: {}", salvo.getId(), usuario.getId());
            return ResponseEntity.status(HttpStatus.CREATED).body(salvo);
            
        } catch (Exception e) {
            log.error("‚ùå [HISTORICO] Erro ao salvar hist√≥rico: {}", e.getMessage());
            throw e;
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletarHistorico(@PathVariable @Positive Long id) {
        log.info("üóëÔ∏è [HISTORICO] Dele√ß√£o de hist√≥rico solicitada - ID: {}", id);
        
        try {
            // ‚úÖ VALIDA√á√ÉO: Verificar se usu√°rio est√° autenticado
            Usuario usuario = getUsuarioAutenticado();
            
            // Verificar se o hist√≥rico pertence ao usu√°rio logado
            HistoricoPreenchimento historico = historicoRepository.findById(id)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Hist√≥rico n√£o encontrado"));
            
            if (!historico.getUsuario().getId().equals(usuario.getId())) {
                log.warn("üö´ [HISTORICO] Tentativa de dele√ß√£o de hist√≥rico n√£o autorizada - ID: {}, Usu√°rio: {}, Propriet√°rio: {}", 
                        id, usuario.getId(), historico.getUsuario().getId());
                throw new ResponseStatusException(HttpStatus.FORBIDDEN, 
                    "Voc√™ s√≥ pode deletar seu pr√≥prio hist√≥rico");
            }
            
            historicoRepository.deleteById(id);
            
            log.info("‚úÖ [HISTORICO] Hist√≥rico {} deletado com sucesso pelo usu√°rio {}", id, usuario.getId());
            return ResponseEntity.noContent().build();
            
        } catch (ResponseStatusException e) {
            throw e; // Re-throw para manter o status HTTP espec√≠fico
        } catch (Exception e) {
            log.error("‚ùå [HISTORICO] Erro ao deletar hist√≥rico {}: {}", id, e.getMessage());
            throw e;
        }
    }

    @DeleteMapping
    public ResponseEntity<Void> limparHistorico() {
        log.warn("üóëÔ∏è [HISTORICO] Limpeza completa de hist√≥rico solicitada");
        
        try {
            // ‚úÖ VALIDA√á√ÉO: Verificar se usu√°rio est√° autenticado
            Usuario usuario = getUsuarioAutenticado();
            
            // Buscar todos os registros do usu√°rio e deletar
            List<HistoricoPreenchimento> historico = historicoRepository.findByUsuarioId(usuario.getId());
            historicoRepository.deleteAll(historico);
            
            log.warn("‚úÖ [HISTORICO] {} registros de hist√≥rico limpos para usu√°rio: {}", historico.size(), usuario.getId());
            return ResponseEntity.noContent().build();
            
        } catch (Exception e) {
            log.error("‚ùå [HISTORICO] Erro ao limpar hist√≥rico: {}", e.getMessage());
            throw e;
        }
    }
    
    /**
     * Obt√©m o usu√°rio autenticado do contexto de seguran√ßa
     */
    private Usuario getUsuarioAutenticado() {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            String email = authentication.getName();
            
            log.debug("üîê [HISTORICO] Verificando autentica√ß√£o para usu√°rio: {}", email);
            
            return usuarioRepository.findByEmail(email)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.UNAUTHORIZED, 
                        "Usu√°rio n√£o encontrado: " + email));
                        
        } catch (Exception e) {
            log.error("‚ùå [HISTORICO] Erro ao obter usu√°rio autenticado: {}", e.getMessage());
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Usu√°rio n√£o autenticado");
        }
    }
} 