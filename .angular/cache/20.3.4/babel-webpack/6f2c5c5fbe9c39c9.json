{"ast":null,"code":"import { TileCoordinator } from './public-api.mjs';\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\";\nexport { ɵTileCoordinator } from './public-api.mjs';\nimport { setLines, MatLine, MatLineModule } from './line.mjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCommonModule } from './common-module.mjs';\nimport 'rxjs/operators';\nimport '@angular/cdk/a11y';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\nclass MatGridTile {\n  _element = inject(ElementRef);\n  _gridList = inject(MAT_GRID_LIST, {\n    optional: true\n  });\n  _rowspan = 1;\n  _colspan = 1;\n  constructor() {}\n  /** Amount of rows that the grid tile takes up. */\n  get rowspan() {\n    return this._rowspan;\n  }\n  set rowspan(value) {\n    this._rowspan = Math.round(coerceNumberProperty(value));\n  }\n  /** Amount of columns that the grid tile takes up. */\n  get colspan() {\n    return this._colspan;\n  }\n  set colspan(value) {\n    this._colspan = Math.round(coerceNumberProperty(value));\n  }\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property, value) {\n    this._element.nativeElement.style[property] = value;\n  }\n  static ɵfac = function MatGridTile_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridTile)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatGridTile,\n    selectors: [[\"mat-grid-tile\"]],\n    hostAttrs: [1, \"mat-grid-tile\"],\n    hostVars: 2,\n    hostBindings: function MatGridTile_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n      }\n    },\n    inputs: {\n      rowspan: \"rowspan\",\n      colspan: \"colspan\"\n    },\n    exportAs: [\"matGridTile\"],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"mat-grid-tile-content\"]],\n    template: function MatGridTile_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵdomElementStart(0, \"div\", 0);\n        i0.ɵɵprojection(1);\n        i0.ɵɵdomElementEnd();\n      }\n    },\n    styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTile, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile',\n      exportAs: 'matGridTile',\n      host: {\n        'class': 'mat-grid-tile',\n        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n        // the DOM. This is needed for the grid-tile harness.\n        '[attr.rowspan]': 'rowspan',\n        '[attr.colspan]': 'colspan'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"]\n    }]\n  }], () => [], {\n    rowspan: [{\n      type: Input\n    }],\n    colspan: [{\n      type: Input\n    }]\n  });\n})();\nclass MatGridTileText {\n  _element = inject(ElementRef);\n  _lines;\n  constructor() {}\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n  static ɵfac = function MatGridTileText_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridTileText)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatGridTileText,\n    selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n    contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatLine, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._lines = _t);\n      }\n    },\n    ngContentSelectors: _c2,\n    decls: 4,\n    vars: 0,\n    consts: [[1, \"mat-grid-list-text\"]],\n    template: function MatGridTileText_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c1);\n        i0.ɵɵprojection(0);\n        i0.ɵɵdomElementStart(1, \"div\", 0);\n        i0.ɵɵprojection(2, 1);\n        i0.ɵɵdomElementEnd();\n        i0.ɵɵprojection(3, 2);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileText, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\"\n    }]\n  }], () => [], {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n  static ɵfac = function MatGridAvatarCssMatStyler_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridAvatarCssMatStyler)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatGridAvatarCssMatStyler,\n    selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n    hostAttrs: [1, \"mat-grid-avatar\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-grid-avatar], [matGridAvatar]',\n      host: {\n        'class': 'mat-grid-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n  static ɵfac = function MatGridTileHeaderCssMatStyler_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridTileHeaderCssMatStyler)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatGridTileHeaderCssMatStyler,\n    selectors: [[\"mat-grid-tile-header\"]],\n    hostAttrs: [1, \"mat-grid-tile-header\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-header',\n      host: {\n        'class': 'mat-grid-tile-header'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n  static ɵfac = function MatGridTileFooterCssMatStyler_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridTileFooterCssMatStyler)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatGridTileFooterCssMatStyler,\n    selectors: [[\"mat-grid-tile-footer\"]],\n    hostAttrs: [1, \"mat-grid-tile-footer\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-footer',\n      host: {\n        'class': 'mat-grid-tile-footer'\n      }\n    }]\n  }], null, null);\n})();\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n  _gutterSize;\n  _rows = 0;\n  _rowspan = 0;\n  _cols;\n  _direction;\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize, tracker, cols, direction) {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent, gutterFraction) {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize, offset) {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize, span) {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile, rowIndex, colIndex) {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan() {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight) {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight() {\n    return null;\n  }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n  fixedRowHeight;\n  constructor(fixedRowHeight) {\n    super();\n    this.fixedRowHeight = fixedRowHeight;\n  }\n  init(gutterSize, tracker, cols, direction) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n  setRowStyles(tile, rowIndex) {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n  getComputedHeight() {\n    return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n  }\n  reset(list) {\n    list._setListStyle(['height', null]);\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio;\n  baseTileHeight;\n  constructor(value) {\n    super();\n    this._parseRatio(value);\n  }\n  setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n  getComputedHeight() {\n    return ['paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)];\n  }\n  reset(list) {\n    list._setListStyle(['paddingBottom', null]);\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n  _parseRatio(value) {\n    const ratioParts = value.split(':');\n    if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n  setRowStyles(tile, rowIndex) {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n  reset(list) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n  return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n  _element = inject(ElementRef);\n  _dir = inject(Directionality, {\n    optional: true\n  });\n  /** Number of columns being rendered. */\n  _cols;\n  /** Used for determining the position of each tile in the grid. */\n  _tileCoordinator;\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  _rowHeight;\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  _gutter = '1px';\n  /** Sets position and size styles for a tile */\n  _tileStyler;\n  /** Query list of tiles that are being rendered. */\n  _tiles;\n  constructor() {}\n  /** Amount of columns in the grid list. */\n  get cols() {\n    return this._cols;\n  }\n  set cols(value) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n  /** Size of the grid list's gutter in pixels. */\n  get gutterSize() {\n    return this._gutter;\n  }\n  set gutterSize(value) {\n    this._gutter = `${value == null ? '' : value}`;\n  }\n  /** Set internal representation of row height from the user-provided value. */\n  get rowHeight() {\n    return this._rowHeight;\n  }\n  set rowHeight(value) {\n    const newValue = `${value == null ? '' : value}`;\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n  /** Throw a friendly error if cols property is missing */\n  _checkCols() {\n    if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n  /** Default to equal width:height if rowHeight property is missing */\n  _checkRowHeight() {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  _setTileStyler(rowHeight) {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n  /** Computes and applies the size and position for all children grid tiles. */\n  _layoutTiles() {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style) {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n  static ɵfac = function MatGridList_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridList)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatGridList,\n    selectors: [[\"mat-grid-list\"]],\n    contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tiles = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-grid-list\"],\n    hostVars: 1,\n    hostBindings: function MatGridList_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"cols\", ctx.cols);\n      }\n    },\n    inputs: {\n      cols: \"cols\",\n      gutterSize: \"gutterSize\",\n      rowHeight: \"rowHeight\"\n    },\n    exportAs: [\"matGridList\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_GRID_LIST,\n      useExisting: MatGridList\n    }])],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    template: function MatGridList_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵdomElementStart(0, \"div\");\n        i0.ɵɵprojection(1);\n        i0.ɵɵdomElementEnd();\n      }\n    },\n    styles: [_c3],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-list',\n      exportAs: 'matGridList',\n      host: {\n        'class': 'mat-grid-list',\n        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n        // needed for the grid-list harness.\n        '[attr.cols]': 'cols'\n      },\n      providers: [{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"]\n    }]\n  }], () => [], {\n    _tiles: [{\n      type: ContentChildren,\n      args: [MatGridTile, {\n        descendants: true\n      }]\n    }],\n    cols: [{\n      type: Input\n    }],\n    gutterSize: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }]\n  });\n})();\nclass MatGridListModule {\n  static ɵfac = function MatGridListModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatGridListModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatGridListModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatLineModule, MatCommonModule, MatLineModule, MatCommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatCommonModule, MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    }]\n  }], null, null);\n})();\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, MatLine };","map":{"version":3,"names":["TileCoordinator","_c0","_c1","_c2","_c3","ɵTileCoordinator","setLines","MatLine","MatLineModule","i0","InjectionToken","inject","ElementRef","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","ContentChildren","Directive","NgModule","coerceNumberProperty","Directionality","MatCommonModule","MAT_GRID_LIST","MatGridTile","_element","_gridList","optional","_rowspan","_colspan","constructor","rowspan","value","Math","round","colspan","_setStyle","property","nativeElement","style","ɵfac","MatGridTile_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatGridTile_HostBindings","rf","ctx","ɵɵattribute","inputs","exportAs","ngContentSelectors","decls","vars","consts","template","MatGridTile_Template","ɵɵprojectionDef","ɵɵdomElementStart","ɵɵprojection","ɵɵdomElementEnd","styles","encapsulation","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","host","None","OnPush","MatGridTileText","_lines","ngAfterContentInit","MatGridTileText_Factory","contentQueries","MatGridTileText_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","MatGridTileText_Template","descendants","MatGridAvatarCssMatStyler","MatGridAvatarCssMatStyler_Factory","ɵdir","ɵɵdefineDirective","MatGridTileHeaderCssMatStyler","MatGridTileHeaderCssMatStyler_Factory","MatGridTileFooterCssMatStyler","MatGridTileFooterCssMatStyler_Factory","cssCalcAllowedValue","TileStyler","_gutterSize","_rows","_cols","_direction","init","gutterSize","tracker","cols","direction","normalizeUnits","rowCount","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","calc","getTileSize","span","setStyle","tile","rowIndex","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","Error","reset","list","_setListStyle","_tiles","forEach","RatioTileStyler","rowHeightRatio","baseTileHeight","_parseRatio","percentHeightPerTile","ratioParts","split","length","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_tileCoordinator","_rowHeight","_gutter","_tileStyler","max","rowHeight","newValue","_setTileStyler","ngOnInit","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","indexOf","tiles","filter","update","index","pos","positions","row","col","MatGridList_Factory","MatGridList_ContentQueries","MatGridList_HostBindings","features","ɵɵProvidersFeature","provide","useExisting","MatGridList_Template","providers","MatGridListModule","MatGridListModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/node_modules/@angular/material/fesm2022/grid-list.mjs"],"sourcesContent":["import { TileCoordinator } from './public-api.mjs';\nexport { ɵTileCoordinator } from './public-api.mjs';\nimport { setLines, MatLine, MatLineModule } from './line.mjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCommonModule } from './common-module.mjs';\nimport 'rxjs/operators';\nimport '@angular/cdk/a11y';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\nclass MatGridTile {\n    _element = inject(ElementRef);\n    _gridList = inject(MAT_GRID_LIST, { optional: true });\n    _rowspan = 1;\n    _colspan = 1;\n    constructor() { }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() {\n        return this._rowspan;\n    }\n    set rowspan(value) {\n        this._rowspan = Math.round(coerceNumberProperty(value));\n    }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() {\n        return this._colspan;\n    }\n    set colspan(value) {\n        this._colspan = Math.round(coerceNumberProperty(value));\n    }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridTile, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatGridTile, isStandalone: true, selector: \"mat-grid-tile\", inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, host: { properties: { \"attr.rowspan\": \"rowspan\", \"attr.colspan\": \"colspan\" }, classAttribute: \"mat-grid-tile\" }, exportAs: [\"matGridTile\"], ngImport: i0, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridTile, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-tile', exportAs: 'matGridTile', host: {\n                        'class': 'mat-grid-tile',\n                        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                        // the DOM. This is needed for the grid-tile harness.\n                        '[attr.rowspan]': 'rowspan',\n                        '[attr.colspan]': 'colspan',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { rowspan: [{\n                type: Input\n            }], colspan: [{\n                type: Input\n            }] } });\nclass MatGridTileText {\n    _element = inject(ElementRef);\n    _lines;\n    constructor() { }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridTileText, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatGridTileText, isStandalone: true, selector: \"mat-grid-tile-header, mat-grid-tile-footer\", queries: [{ propertyName: \"_lines\", predicate: MatLine, descendants: true }], ngImport: i0, template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\", changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridTileText, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-tile-header, mat-grid-tile-footer', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { _lines: [{\n                type: ContentChildren,\n                args: [MatLine, { descendants: true }]\n            }] } });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridAvatarCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatGridAvatarCssMatStyler, isStandalone: true, selector: \"[mat-grid-avatar], [matGridAvatar]\", host: { classAttribute: \"mat-grid-avatar\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridAvatarCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-grid-avatar], [matGridAvatar]',\n                    host: { 'class': 'mat-grid-avatar' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridTileHeaderCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatGridTileHeaderCssMatStyler, isStandalone: true, selector: \"mat-grid-tile-header\", host: { classAttribute: \"mat-grid-tile-header\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridTileHeaderCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-grid-tile-header',\n                    host: { 'class': 'mat-grid-tile-header' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridTileFooterCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatGridTileFooterCssMatStyler, isStandalone: true, selector: \"mat-grid-tile-footer\", host: { classAttribute: \"mat-grid-tile-footer\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridTileFooterCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-grid-tile-footer',\n                    host: { 'class': 'mat-grid-tile-footer' },\n                }]\n        }] });\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    _gutterSize;\n    _rows = 0;\n    _rowspan = 0;\n    _cols;\n    _direction;\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() {\n        return null;\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    fixedRowHeight;\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    /** Ratio width:height given by user to determine row height. */\n    rowHeightRatio;\n    baseTileHeight;\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom',\n            calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`),\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    _element = inject(ElementRef);\n    _dir = inject(Directionality, { optional: true });\n    /** Number of columns being rendered. */\n    _cols;\n    /** Used for determining the position of each tile in the grid. */\n    _tileCoordinator;\n    /**\n     * Row height value passed in by user. This can be one of three types:\n     * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n     * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n     * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n     */\n    _rowHeight;\n    /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n    _gutter = '1px';\n    /** Sets position and size styles for a tile */\n    _tileStyler;\n    /** Query list of tiles that are being rendered. */\n    _tiles;\n    constructor() { }\n    /** Amount of columns in the grid list. */\n    get cols() {\n        return this._cols;\n    }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() {\n        return this._gutter;\n    }\n    set gutterSize(value) {\n        this._gutter = `${value == null ? '' : value}`;\n    }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() {\n        return this._rowHeight;\n    }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridList, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatGridList, isStandalone: true, selector: \"mat-grid-list\", inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, host: { properties: { \"attr.cols\": \"cols\" }, classAttribute: \"mat-grid-list\" }, providers: [\n            {\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList,\n            },\n        ], queries: [{ propertyName: \"_tiles\", predicate: MatGridTile, descendants: true }], exportAs: [\"matGridList\"], ngImport: i0, template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-list', exportAs: 'matGridList', host: {\n                        'class': 'mat-grid-list',\n                        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                        // needed for the grid-list harness.\n                        '[attr.cols]': 'cols',\n                    }, providers: [\n                        {\n                            provide: MAT_GRID_LIST,\n                            useExisting: MatGridList,\n                        },\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-sys-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-sys-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { _tiles: [{\n                type: ContentChildren,\n                args: [MatGridTile, { descendants: true }]\n            }], cols: [{\n                type: Input\n            }], gutterSize: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }] } });\n\nclass MatGridListModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridListModule, imports: [MatLineModule,\n            MatCommonModule,\n            MatGridList,\n            MatGridTile,\n            MatGridTileText,\n            MatGridTileHeaderCssMatStyler,\n            MatGridTileFooterCssMatStyler,\n            MatGridAvatarCssMatStyler], exports: [MatGridList,\n            MatGridTile,\n            MatGridTileText,\n            MatLineModule,\n            MatCommonModule,\n            MatGridTileHeaderCssMatStyler,\n            MatGridTileFooterCssMatStyler,\n            MatGridAvatarCssMatStyler] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridListModule, imports: [MatLineModule,\n            MatCommonModule, MatLineModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatGridListModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatLineModule,\n                        MatCommonModule,\n                        MatGridList,\n                        MatGridTile,\n                        MatGridTileText,\n                        MatGridTileHeaderCssMatStyler,\n                        MatGridTileFooterCssMatStyler,\n                        MatGridAvatarCssMatStyler,\n                    ],\n                    exports: [\n                        MatGridList,\n                        MatGridTile,\n                        MatGridTileText,\n                        MatLineModule,\n                        MatCommonModule,\n                        MatGridTileHeaderCssMatStyler,\n                        MatGridTileFooterCssMatStyler,\n                        MatGridAvatarCssMatStyler,\n                    ],\n                }]\n        }] });\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, MatLine };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}