{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ExtensionSyncService {\n  http;\n  apiUrl = `${environment.apiUrl}/public/extension`;\n  constructor(http) {\n    this.http = http;\n  }\n  /**\n   * Notifica a extens√£o sobre novos templates criados\n   */\n  notificarNovoTemplate(templateId, templateName) {\n    const notification = {\n      action: 'template_created',\n      templateId,\n      templateName,\n      timestamp: new Date().toISOString()\n    };\n    // Enviar notifica√ß√£o para o backend (que pode encaminhar para a extens√£o)\n    return this.http.post(`${this.apiUrl}/notify`, notification, {\n      headers: this.getExtensionHeaders()\n    }).pipe(tap(() => {\n      console.log('üîî Extens√£o notificada sobre Novo Formul√°rio:', templateName);\n      this.notificarExtensaoLocal(notification);\n    }), catchError(error => {\n      console.error('‚ùå Erro ao notificar extens√£o:', error);\n      // Fallback: tentar notificar localmente mesmo se a API falhar\n      this.notificarExtensaoLocal(notification);\n      return of(false);\n    }));\n  }\n  /**\n  * Notifica a extens√£o localmente (fallback)\n  */\n  notificarExtensaoLocal(notification) {\n    try {\n      // Tentar enviar mensagem para a extens√£o se estiver dispon√≠vel\n      if (typeof window !== 'undefined' && window.chrome?.runtime?.sendMessage) {\n        window.chrome.runtime.sendMessage(notification, response => {\n          if (window.chrome?.runtime?.lastError) {\n            console.log('üì± Extens√£o n√£o est√° ativa ou n√£o respondeu');\n          } else {\n            console.log('‚úÖ Extens√£o notificada localmente:', response);\n          }\n        });\n      } else {\n        console.log('üåê Executando no navegador (n√£o √© extens√£o)');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è N√£o foi poss√≠vel notificar extens√£o localmente:', error);\n    }\n  }\n  /**\n   * Verifica se a extens√£o est√° ativa\n   */\n  verificarExtensaoAtiva() {\n    return this.http.get(`${this.apiUrl}/ping`, {\n      headers: this.getExtensionHeaders()\n    }).pipe(catchError(() => of(false)));\n  }\n  /**\n   * For√ßa sincroniza√ß√£o de templates com a extens√£o\n   */\n  forcarSincronizacao() {\n    return this.http.post(`${this.apiUrl}/sync`, {}, {\n      headers: this.getExtensionHeaders()\n    }).pipe(catchError(error => {\n      console.error('‚ùå Erro na sincroniza√ß√£o for√ßada:', error);\n      return of(false);\n    }));\n  }\n  /**\n   * Headers para comunica√ß√£o com a extens√£o\n   */\n  getExtensionHeaders() {\n    return new HttpHeaders().set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321').set('Content-Type', 'application/json');\n  }\n  static …µfac = function ExtensionSyncService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ExtensionSyncService)(i0.…µ…µinject(i1.HttpClient));\n  };\n  static …µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: ExtensionSyncService,\n    factory: ExtensionSyncService.…µfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","HttpHeaders","of","catchError","tap","environment","ExtensionSyncService","http","apiUrl","constructor","notificarNovoTemplate","templateId","templateName","notification","action","timestamp","Date","toISOString","post","headers","getExtensionHeaders","pipe","console","log","notificarExtensaoLocal","error","window","chrome","runtime","sendMessage","response","lastError","verificarExtensaoAtiva","get","forcarSincronizacao","set","i0","…µ…µinject","i1","factory","…µfac","providedIn"],"sources":["/home/danilo/√Årea de trabalho/formsync-nx/apps/front/src/app/services/extension-sync.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\n// Interface para a API do Chrome (extens√£o)\ndeclare global {\n    interface Window {\n        chrome?: {\n            runtime?: {\n                sendMessage?: (message: any, callback?: (response: any) => void) => void;\n                lastError?: any;\n            };\n        };\n    }\n}\n\nexport interface ExtensionNotification {\n    action: 'template_created' | 'template_updated' | 'template_deleted';\n    templateId: number;\n    templateName: string;\n    timestamp: string;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ExtensionSyncService {\n    private apiUrl = `${environment.apiUrl}/public/extension`;\n\n    constructor(private http: HttpClient) { }\n\n    /**\n     * Notifica a extens√£o sobre novos templates criados\n     */\n    notificarNovoTemplate(templateId: number, templateName: string): Observable<boolean> {\n        const notification: ExtensionNotification = {\n            action: 'template_created',\n            templateId,\n            templateName,\n            timestamp: new Date().toISOString()\n        };\n\n        // Enviar notifica√ß√£o para o backend (que pode encaminhar para a extens√£o)\n        return this.http.post<boolean>(`${this.apiUrl}/notify`, notification, {\n            headers: this.getExtensionHeaders()\n        }).pipe(\n            tap(() => {\n                console.log('üîî Extens√£o notificada sobre Novo Formul√°rio:', templateName);\n                this.notificarExtensaoLocal(notification);\n            }),\n            catchError(error => {\n                console.error('‚ùå Erro ao notificar extens√£o:', error);\n                // Fallback: tentar notificar localmente mesmo se a API falhar\n                this.notificarExtensaoLocal(notification);\n                return of(false);\n            })\n        );\n    }\n\n    /**\n * Notifica a extens√£o localmente (fallback)\n */\n    private notificarExtensaoLocal(notification: ExtensionNotification): void {\n        try {\n            // Tentar enviar mensagem para a extens√£o se estiver dispon√≠vel\n            if (typeof window !== 'undefined' && window.chrome?.runtime?.sendMessage) {\n                window.chrome.runtime.sendMessage(notification, (response) => {\n                    if (window.chrome?.runtime?.lastError) {\n                        console.log('üì± Extens√£o n√£o est√° ativa ou n√£o respondeu');\n                    } else {\n                        console.log('‚úÖ Extens√£o notificada localmente:', response);\n                    }\n                });\n            } else {\n                console.log('üåê Executando no navegador (n√£o √© extens√£o)');\n            }\n        } catch (error) {\n            console.log('‚ö†Ô∏è N√£o foi poss√≠vel notificar extens√£o localmente:', error);\n        }\n    }\n\n    /**\n     * Verifica se a extens√£o est√° ativa\n     */\n    verificarExtensaoAtiva(): Observable<boolean> {\n        return this.http.get<boolean>(`${this.apiUrl}/ping`, {\n            headers: this.getExtensionHeaders()\n        }).pipe(\n            catchError(() => of(false))\n        );\n    }\n\n    /**\n     * For√ßa sincroniza√ß√£o de templates com a extens√£o\n     */\n    forcarSincronizacao(): Observable<boolean> {\n        return this.http.post<boolean>(`${this.apiUrl}/sync`, {}, {\n            headers: this.getExtensionHeaders()\n        }).pipe(\n            catchError(error => {\n                console.error('‚ùå Erro na sincroniza√ß√£o for√ßada:', error);\n                return of(false);\n            })\n        );\n    }\n\n    /**\n     * Headers para comunica√ß√£o com a extens√£o\n     */\n    private getExtensionHeaders(): HttpHeaders {\n        return new HttpHeaders()\n            .set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321')\n            .set('Content-Type', 'application/json');\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}