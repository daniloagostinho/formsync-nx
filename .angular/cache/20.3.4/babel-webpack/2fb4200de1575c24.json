{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NotificacaoService {\n  http;\n  apiUrl = `${environment.apiUrl}/notificacoes`;\n  constructor(http) {\n    this.http = http;\n  }\n  /**\n   * Obtém a configuração de notificação do usuário\n   */\n  obterConfiguracao(usuarioId) {\n    const headers = this.getHeaders();\n    return this.http.get(`${this.apiUrl}/configuracao/${usuarioId}`, {\n      headers\n    }).pipe(catchError(error => {\n      console.log('Erro ao obter configuração, retornando configuração padrão...', error);\n      // Retorna configuração padrão quando houver erro\n      return of(this.criarConfiguracaoPadrao(usuarioId));\n    }));\n  }\n  /**\n   * Salva ou atualiza a configuração de notificação\n   */\n  salvarConfiguracao(configuracao) {\n    const headers = this.getHeaders();\n    if (configuracao.id) {\n      return this.http.put(`${this.apiUrl}/configuracao/${configuracao.id}`, configuracao, {\n        headers\n      }).pipe(catchError(error => {\n        console.log('Erro ao salvar configuração, simulando salvamento...', error);\n        // Simula salvamento quando houver erro\n        return of({\n          ...configuracao,\n          id: configuracao.id || 1\n        });\n      }));\n    } else {\n      return this.http.post(`${this.apiUrl}/configuracao`, configuracao, {\n        headers\n      }).pipe(catchError(error => {\n        console.log('Erro ao criar configuração, simulando salvamento...', error);\n        // Simula salvamento quando houver erro\n        return of({\n          ...configuracao,\n          id: 1\n        });\n      }));\n    }\n  }\n  /**\n   * Obtém as notificações de vencimento do usuário\n   */\n  obterNotificacoes(usuarioId) {\n    const headers = this.getHeaders();\n    return this.http.get(`${this.apiUrl}/usuario/${usuarioId}`, {\n      headers\n    }).pipe(catchError(error => {\n      console.log('Erro ao obter notificações, retornando lista vazia...', error);\n      // Retorna lista vazia quando houver erro\n      return of([]);\n    }));\n  }\n  /**\n   * Marca uma notificação como lida\n   */\n  marcarComoLida(notificacaoId) {\n    const headers = this.getHeaders();\n    return this.http.patch(`${this.apiUrl}/notificacao/${notificacaoId}/lida`, {}, {\n      headers\n    }).pipe(catchError(error => {\n      console.log('API não disponível, simulando marcação como lida...', error);\n      // Simula marcação como lida quando a API não está disponível\n      return of(void 0);\n    }));\n  }\n  /**\n   * Cria uma configuração padrão para um usuário\n   */\n  criarConfiguracaoPadrao(usuarioId) {\n    return {\n      usuarioId,\n      ativo: true,\n      diasAntesVencimento: 7,\n      emailAtivo: true,\n      pushAtivo: false,\n      smsAtivo: false,\n      horarioNotificacao: '09:00',\n      dataCriacao: new Date(),\n      dataAtualizacao: new Date()\n    };\n  }\n  /**\n   * Testa o envio de notificação\n   */\n  testarNotificacao(usuarioId, tipo) {\n    const headers = this.getHeaders();\n    return this.http.post(`${this.apiUrl}/teste/${usuarioId}`, {\n      tipo\n    }, {\n      headers\n    }).pipe(map(response => response.sucesso), catchError(error => {\n      console.log('Erro ao testar notificação, simulando teste bem-sucedido...', error);\n      // Simula teste bem-sucedido quando houver erro\n      return of(true);\n    }));\n  }\n  /**\n   * Obtém estatísticas de notificações\n   */\n  obterEstatisticas(usuarioId) {\n    const headers = this.getHeaders();\n    return this.http.get(`${this.apiUrl}/estatisticas/${usuarioId}`, {\n      headers\n    }).pipe(map(response => ({\n      ...response,\n      ultimaNotificacao: response.ultimaNotificacao || null\n    })), catchError(error => {\n      console.log('API não disponível, retornando estatísticas padrão...', error);\n      // Retorna estatísticas padrão quando a API não está disponível\n      return of({\n        totalEnviadas: 0,\n        totalLidas: 0,\n        totalPendentes: 0,\n        ultimaNotificacao: null\n      });\n    }));\n  }\n  getHeaders() {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  handleError(error) {\n    console.error('Erro no serviço de notificação:', error);\n    return throwError(() => new Error('Erro ao processar notificação'));\n  }\n  static ɵfac = function NotificacaoService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NotificacaoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificacaoService,\n    factory: NotificacaoService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","HttpHeaders","of","throwError","catchError","map","environment","NotificacaoService","http","apiUrl","constructor","obterConfiguracao","usuarioId","headers","getHeaders","get","pipe","error","console","log","criarConfiguracaoPadrao","salvarConfiguracao","configuracao","id","put","post","obterNotificacoes","marcarComoLida","notificacaoId","patch","ativo","diasAntesVencimento","emailAtivo","pushAtivo","smsAtivo","horarioNotificacao","dataCriacao","Date","dataAtualizacao","testarNotificacao","tipo","response","sucesso","obterEstatisticas","ultimaNotificacao","totalEnviadas","totalLidas","totalPendentes","token","localStorage","getItem","handleError","Error","i0","ɵɵinject","i1","factory","ɵfac","providedIn"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/src/app/services/notificacao.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConfiguracaoNotificacao, NotificacaoVencimento } from '../models/notificacao.model';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificacaoService {\n  private apiUrl = `${environment.apiUrl}/notificacoes`;\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Obtém a configuração de notificação do usuário\n   */\n  obterConfiguracao(usuarioId: number): Observable<ConfiguracaoNotificacao> {\n    const headers = this.getHeaders();\n    return this.http.get<ConfiguracaoNotificacao>(`${this.apiUrl}/configuracao/${usuarioId}`, { headers })\n      .pipe(\n        catchError((error) => {\n          console.log('Erro ao obter configuração, retornando configuração padrão...', error);\n          // Retorna configuração padrão quando houver erro\n          return of(this.criarConfiguracaoPadrao(usuarioId));\n        })\n      );\n  }\n\n  /**\n   * Salva ou atualiza a configuração de notificação\n   */\n  salvarConfiguracao(configuracao: ConfiguracaoNotificacao): Observable<ConfiguracaoNotificacao> {\n    const headers = this.getHeaders();\n\n    if (configuracao.id) {\n      return this.http.put<ConfiguracaoNotificacao>(`${this.apiUrl}/configuracao/${configuracao.id}`, configuracao, { headers })\n        .pipe(catchError((error) => {\n          console.log('Erro ao salvar configuração, simulando salvamento...', error);\n          // Simula salvamento quando houver erro\n          return of({ ...configuracao, id: configuracao.id || 1 });\n        }));\n    } else {\n      return this.http.post<ConfiguracaoNotificacao>(`${this.apiUrl}/configuracao`, configuracao, { headers })\n        .pipe(catchError((error) => {\n          console.log('Erro ao criar configuração, simulando salvamento...', error);\n          // Simula salvamento quando houver erro\n          return of({ ...configuracao, id: 1 });\n        }));\n    }\n  }\n\n  /**\n   * Obtém as notificações de vencimento do usuário\n   */\n  obterNotificacoes(usuarioId: number): Observable<NotificacaoVencimento[]> {\n    const headers = this.getHeaders();\n    return this.http.get<NotificacaoVencimento[]>(`${this.apiUrl}/usuario/${usuarioId}`, { headers })\n      .pipe(\n        catchError((error) => {\n          console.log('Erro ao obter notificações, retornando lista vazia...', error);\n          // Retorna lista vazia quando houver erro\n          return of([]);\n        })\n      );\n  }\n\n  /**\n   * Marca uma notificação como lida\n   */\n  marcarComoLida(notificacaoId: number): Observable<void> {\n    const headers = this.getHeaders();\n    return this.http.patch<void>(`${this.apiUrl}/notificacao/${notificacaoId}/lida`, {}, { headers })\n      .pipe(catchError((error) => {\n        console.log('API não disponível, simulando marcação como lida...', error);\n        // Simula marcação como lida quando a API não está disponível\n        return of(void 0);\n      }));\n  }\n\n  /**\n   * Cria uma configuração padrão para um usuário\n   */\n  criarConfiguracaoPadrao(usuarioId: number): ConfiguracaoNotificacao {\n    return {\n      usuarioId,\n      ativo: true,\n      diasAntesVencimento: 7,\n      emailAtivo: true,\n      pushAtivo: false,\n      smsAtivo: false,\n      horarioNotificacao: '09:00',\n      dataCriacao: new Date(),\n      dataAtualizacao: new Date()\n    };\n  }\n\n  /**\n   * Testa o envio de notificação\n   */\n  testarNotificacao(usuarioId: number, tipo: 'email' | 'push' | 'sms'): Observable<boolean> {\n    const headers = this.getHeaders();\n    return this.http.post<{ sucesso: boolean }>(`${this.apiUrl}/teste/${usuarioId}`, { tipo }, { headers })\n      .pipe(\n        map(response => response.sucesso),\n        catchError((error) => {\n          console.log('Erro ao testar notificação, simulando teste bem-sucedido...', error);\n          // Simula teste bem-sucedido quando houver erro\n          return of(true);\n        })\n      );\n  }\n\n  /**\n   * Obtém estatísticas de notificações\n   */\n  obterEstatisticas(usuarioId: number): Observable<{\n    totalEnviadas: number;\n    totalLidas: number;\n    totalPendentes: number;\n    ultimaNotificacao: Date | null;\n  }> {\n    const headers = this.getHeaders();\n    return this.http.get<{\n      totalEnviadas: number;\n      totalLidas: number;\n      totalPendentes: number;\n      ultimaNotificacao?: Date;\n    }>(`${this.apiUrl}/estatisticas/${usuarioId}`, { headers })\n      .pipe(\n        map(response => ({\n          ...response,\n          ultimaNotificacao: response.ultimaNotificacao || null\n        })),\n        catchError((error) => {\n          console.log('API não disponível, retornando estatísticas padrão...', error);\n          // Retorna estatísticas padrão quando a API não está disponível\n          return of({\n            totalEnviadas: 0,\n            totalLidas: 0,\n            totalPendentes: 0,\n            ultimaNotificacao: null\n          });\n        })\n      );\n  }\n\n  private getHeaders(): HttpHeaders {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n\n  private handleError(error: any): Observable<never> {\n    console.error('Erro no serviço de notificação:', error);\n    return throwError(() => new Error('Erro ao processar notificação'));\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}