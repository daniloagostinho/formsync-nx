{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, inject, booleanAttribute, Directive, Input, ChangeDetectorRef, EventEmitter, signal, Output, NgModule } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { _IdGenerator } from './id-generator.mjs';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher.mjs';\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_ACCORDION = new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n  /** Emits when the state of the accordion changes */\n  _stateChanges = new Subject();\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  _openCloseAllActions = new Subject();\n  /** A readonly id value to use for unique selection coordination. */\n  id = inject(_IdGenerator).getId('cdk-accordion-');\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  multi = false;\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll() {\n    if (this.multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n  /** Closes all enabled accordion items. */\n  closeAll() {\n    this._openCloseAllActions.next(false);\n  }\n  ngOnChanges(changes) {\n    this._stateChanges.next(changes);\n  }\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n  static ɵfac = function CdkAccordion_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkAccordion)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkAccordion,\n    selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]],\n    inputs: {\n      multi: [2, \"multi\", \"multi\", booleanAttribute]\n    },\n    exportAs: [\"cdkAccordion\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CDK_ACCORDION,\n      useExisting: CdkAccordion\n    }]), i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkAccordion, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-accordion, [cdkAccordion]',\n      exportAs: 'cdkAccordion',\n      providers: [{\n        provide: CDK_ACCORDION,\n        useExisting: CdkAccordion\n      }]\n    }]\n  }], null, {\n    multi: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\n\n/**\n * A basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n  accordion = inject(CDK_ACCORDION, {\n    optional: true,\n    skipSelf: true\n  });\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _expansionDispatcher = inject(UniqueSelectionDispatcher);\n  /** Subscription to openAll/closeAll events. */\n  _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  closed = new EventEmitter();\n  /** Event emitted every time the AccordionItem is opened. */\n  opened = new EventEmitter();\n  /** Event emitted when the AccordionItem is destroyed. */\n  destroyed = new EventEmitter();\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  expandedChange = new EventEmitter();\n  /** The unique AccordionItem id. */\n  id = inject(_IdGenerator).getId('cdk-accordion-child-');\n  /** Whether the AccordionItem is expanded. */\n  get expanded() {\n    return this._expanded;\n  }\n  set expanded(expanded) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  _expanded = false;\n  /** Whether the AccordionItem is disabled. */\n  get disabled() {\n    return this._disabled();\n  }\n  set disabled(value) {\n    this._disabled.set(value);\n  }\n  _disabled = signal(false, ...(ngDevMode ? [{\n    debugName: \"_disabled\"\n  }] : []));\n  /** Unregister function for _expansionDispatcher. */\n  _removeUniqueSelectionListener = () => {};\n  constructor() {}\n  ngOnInit() {\n    this._removeUniqueSelectionListener = this._expansionDispatcher.listen((id, accordionId) => {\n      if (this.accordion && !this.accordion.multi && this.accordion.id === accordionId && this.id !== id) {\n        this.expanded = false;\n      }\n    });\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n  /** Toggles the expanded state of the accordion item. */\n  toggle() {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n  /** Sets the expanded state of the accordion item to false. */\n  close() {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n  /** Sets the expanded state of the accordion item to true. */\n  open() {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n  _subscribeToOpenCloseAllActions() {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n  static ɵfac = function CdkAccordionItem_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkAccordionItem)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkAccordionItem,\n    selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]],\n    inputs: {\n      expanded: [2, \"expanded\", \"expanded\", booleanAttribute],\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute]\n    },\n    outputs: {\n      closed: \"closed\",\n      opened: \"opened\",\n      destroyed: \"destroyed\",\n      expandedChange: \"expandedChange\"\n    },\n    exportAs: [\"cdkAccordionItem\"],\n    features: [i0.ɵɵProvidersFeature([\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {\n      provide: CDK_ACCORDION,\n      useValue: undefined\n    }])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkAccordionItem, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-accordion-item, [cdkAccordionItem]',\n      exportAs: 'cdkAccordionItem',\n      providers: [\n      // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n      // registering to the same accordion.\n      {\n        provide: CDK_ACCORDION,\n        useValue: undefined\n      }]\n    }]\n  }], () => [], {\n    closed: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    expandedChange: [{\n      type: Output\n    }],\n    expanded: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\nclass CdkAccordionModule {\n  static ɵfac = function CdkAccordionModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkAccordionModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CdkAccordionModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkAccordionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkAccordion, CdkAccordionItem],\n      exports: [CdkAccordion, CdkAccordionItem]\n    }]\n  }], null, null);\n})();\nexport { CDK_ACCORDION, CdkAccordion, CdkAccordionItem, CdkAccordionModule };","map":{"version":3,"names":["i0","InjectionToken","inject","booleanAttribute","Directive","Input","ChangeDetectorRef","EventEmitter","signal","Output","NgModule","Subject","Subscription","_IdGenerator","UniqueSelectionDispatcher","CDK_ACCORDION","CdkAccordion","_stateChanges","_openCloseAllActions","id","getId","multi","openAll","next","closeAll","ngOnChanges","changes","ngOnDestroy","complete","ɵfac","CdkAccordion_Factory","__ngFactoryType__","ɵdir","ɵɵdefineDirective","type","selectors","inputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","ngDevMode","ɵsetClassMetadata","args","selector","providers","transform","CdkAccordionItem","accordion","optional","skipSelf","_changeDetectorRef","_expansionDispatcher","_openCloseAllSubscription","EMPTY","closed","opened","destroyed","expandedChange","expanded","_expanded","emit","accordionId","notify","markForCheck","disabled","_disabled","value","set","debugName","_removeUniqueSelectionListener","constructor","ngOnInit","listen","_subscribeToOpenCloseAllActions","unsubscribe","toggle","close","open","subscribe","CdkAccordionItem_Factory","outputs","useValue","undefined","CdkAccordionModule","CdkAccordionModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/node_modules/@angular/cdk/fesm2022/accordion.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, booleanAttribute, Directive, Input, ChangeDetectorRef, EventEmitter, signal, Output, NgModule } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { _IdGenerator } from './id-generator.mjs';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher.mjs';\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_ACCORDION = new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    /** Emits when the state of the accordion changes */\n    _stateChanges = new Subject();\n    /** Stream that emits true/false when openAll/closeAll is triggered. */\n    _openCloseAllActions = new Subject();\n    /** A readonly id value to use for unique selection coordination. */\n    id = inject(_IdGenerator).getId('cdk-accordion-');\n    /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n    multi = false;\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    openAll() {\n        if (this.multi) {\n            this._openCloseAllActions.next(true);\n        }\n    }\n    /** Closes all enabled accordion items. */\n    closeAll() {\n        this._openCloseAllActions.next(false);\n    }\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._openCloseAllActions.complete();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: CdkAccordion, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.2.0-rc.1\", type: CdkAccordion, isStandalone: true, selector: \"cdk-accordion, [cdkAccordion]\", inputs: { multi: [\"multi\", \"multi\", booleanAttribute] }, providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }], exportAs: [\"cdkAccordion\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: CdkAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion, [cdkAccordion]',\n                    exportAs: 'cdkAccordion',\n                    providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }],\n                }]\n        }], propDecorators: { multi: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * A basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    accordion = inject(CDK_ACCORDION, { optional: true, skipSelf: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _expansionDispatcher = inject(UniqueSelectionDispatcher);\n    /** Subscription to openAll/closeAll events. */\n    _openCloseAllSubscription = Subscription.EMPTY;\n    /** Event emitted every time the AccordionItem is closed. */\n    closed = new EventEmitter();\n    /** Event emitted every time the AccordionItem is opened. */\n    opened = new EventEmitter();\n    /** Event emitted when the AccordionItem is destroyed. */\n    destroyed = new EventEmitter();\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * @docs-private\n     */\n    expandedChange = new EventEmitter();\n    /** The unique AccordionItem id. */\n    id = inject(_IdGenerator).getId('cdk-accordion-child-');\n    /** Whether the AccordionItem is expanded. */\n    get expanded() {\n        return this._expanded;\n    }\n    set expanded(expanded) {\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    _expanded = false;\n    /** Whether the AccordionItem is disabled. */\n    get disabled() {\n        return this._disabled();\n    }\n    set disabled(value) {\n        this._disabled.set(value);\n    }\n    _disabled = signal(false, ...(ngDevMode ? [{ debugName: \"_disabled\" }] : []));\n    /** Unregister function for _expansionDispatcher. */\n    _removeUniqueSelectionListener = () => { };\n    constructor() { }\n    ngOnInit() {\n        this._removeUniqueSelectionListener = this._expansionDispatcher.listen((id, accordionId) => {\n            if (this.accordion &&\n                !this.accordion.multi &&\n                this.accordion.id === accordionId &&\n                this.id !== id) {\n                this.expanded = false;\n            }\n        });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /** Toggles the expanded state of the accordion item. */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /** Sets the expanded state of the accordion item to false. */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /** Sets the expanded state of the accordion item to true. */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: CdkAccordionItem, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.2.0-rc.1\", type: CdkAccordionItem, isStandalone: true, selector: \"cdk-accordion-item, [cdkAccordionItem]\", inputs: { expanded: [\"expanded\", \"expanded\", booleanAttribute], disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, providers: [\n            // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n            // registering to the same accordion.\n            { provide: CDK_ACCORDION, useValue: undefined },\n        ], exportAs: [\"cdkAccordionItem\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: CdkAccordionItem, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                    exportAs: 'cdkAccordionItem',\n                    providers: [\n                        // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n                        // registering to the same accordion.\n                        { provide: CDK_ACCORDION, useValue: undefined },\n                    ],\n                }]\n        }], ctorParameters: () => [], propDecorators: { closed: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], destroyed: [{\n                type: Output\n            }], expandedChange: [{\n                type: Output\n            }], expanded: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\nclass CdkAccordionModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: CdkAccordionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: CdkAccordionModule, imports: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: CdkAccordionModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: CdkAccordionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkAccordion, CdkAccordionItem],\n                    exports: [CdkAccordion, CdkAccordionItem],\n                }]\n        }] });\n\nexport { CDK_ACCORDION, CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}