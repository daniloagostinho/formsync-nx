{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SimpleTemplateService {\n  http;\n  apiUrl = `${environment.apiUrl}/public/templates`;\n  constructor(http) {\n    this.http = http;\n  }\n  /**\n   * Lista todos os templates\n   */\n  listarTemplates() {\n    // üîí SEGURAN√áA: Usar endpoint seguro que retorna apenas templates do usu√°rio logado\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('‚ùå Token n√£o encontrado para listar templates');\n      return of([]);\n    }\n    const headers = new HttpHeaders().set('Content-Type', 'application/json').set('Authorization', `Bearer ${token}`);\n    // Usar endpoint correto com usuarioId\n    const secureApiUrl = `${this.apiUrl}?usuarioId=1`;\n    return this.http.get(secureApiUrl, {\n      headers\n    }).pipe(catchError(error => {\n      console.error('Erro ao listar templates:', error);\n      return of([]);\n    }));\n  }\n  /**\n   * Cria um Novo Formul√°rio\n   */\n  criarTemplate(template) {\n    const headers = new HttpHeaders().set('Content-Type', 'application/json').set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n    return this.http.post(this.apiUrl, template, {\n      headers\n    }).pipe(catchError(error => {\n      console.error('Erro ao Criar Formul√°rio:', error);\n      return of(null);\n    }));\n  }\n  /**\n   * Atualiza um template existente\n   */\n  atualizarTemplate(id, template) {\n    const headers = new HttpHeaders().set('Content-Type', 'application/json').set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n    return this.http.put(`${this.apiUrl}/${id}`, template, {\n      headers\n    }).pipe(catchError(error => {\n      console.error('Erro ao atualizar template:', error);\n      return of(null);\n    }));\n  }\n  /**\n   * Remove um template\n   */\n  removerTemplate(id) {\n    const headers = new HttpHeaders().set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n    return this.http.delete(`${this.apiUrl}/${id}`, {\n      headers\n    }).pipe(map(() => true), catchError(error => {\n      console.error('Erro ao remover template:', error);\n      return of(false);\n    }));\n  }\n  /**\n   * Registra uso de um template\n   */\n  registrarUso(id, sucesso = true) {\n    const headers = new HttpHeaders().set('Content-Type', 'application/json').set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n    return this.http.post(`${this.apiUrl}/${id}/uso`, {\n      success: sucesso\n    }, {\n      headers\n    }).pipe(map(() => true), catchError(error => {\n      console.error('Erro ao registrar uso do template:', error);\n      return of(false);\n    }));\n  }\n  /**\n   * Testa conex√£o com o backend\n   */\n  testarConexao() {\n    const headers = new HttpHeaders().set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n    return this.http.get(`${environment.apiUrl}/public/health`, {\n      headers\n    }).pipe(map(() => true), catchError(error => {\n      console.error('Erro ao testar conex√£o:', error);\n      return of(false);\n    }));\n  }\n  static …µfac = function SimpleTemplateService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || SimpleTemplateService)(i0.…µ…µinject(i1.HttpClient));\n  };\n  static …µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: SimpleTemplateService,\n    factory: SimpleTemplateService.…µfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","HttpHeaders","of","catchError","map","environment","SimpleTemplateService","http","apiUrl","constructor","listarTemplates","token","localStorage","getItem","console","error","headers","set","secureApiUrl","get","pipe","criarTemplate","template","post","atualizarTemplate","id","put","removerTemplate","delete","registrarUso","sucesso","success","testarConexao","i0","…µ…µinject","i1","factory","…µfac","providedIn"],"sources":["/home/danilo/√Årea de trabalho/formsync-nx/apps/front/src/app/services/simple-template.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\nexport interface SimpleTemplate {\n    id?: number;\n    nome: string;\n    descricao?: string;\n    campos: SimpleCampo[];\n    totalUso?: number;\n    ultimoUso?: string;\n    dataCriacao?: string;\n}\n\nexport interface SimpleCampo {\n    id?: number;\n    nome: string;\n    valor: string;\n    tipo?: string;\n    ordem?: number;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SimpleTemplateService {\n    private apiUrl = `${environment.apiUrl}/public/templates`;\n\n    constructor(private http: HttpClient) { }\n\n    /**\n     * Lista todos os templates\n     */\n    listarTemplates(): Observable<SimpleTemplate[]> {\n        // üîí SEGURAN√áA: Usar endpoint seguro que retorna apenas templates do usu√°rio logado\n        const token = localStorage.getItem('token');\n        if (!token) {\n            console.error('‚ùå Token n√£o encontrado para listar templates');\n            return of([]);\n        }\n\n        const headers = new HttpHeaders()\n            .set('Content-Type', 'application/json')\n            .set('Authorization', `Bearer ${token}`);\n\n        // Usar endpoint correto com usuarioId\n        const secureApiUrl = `${this.apiUrl}?usuarioId=1`;\n\n        return this.http.get<SimpleTemplate[]>(secureApiUrl, { headers })\n            .pipe(\n                catchError(error => {\n                    console.error('Erro ao listar templates:', error);\n                    return of([]);\n                })\n            );\n    }\n\n    /**\n     * Cria um Novo Formul√°rio\n     */\n    criarTemplate(template: SimpleTemplate): Observable<SimpleTemplate | null> {\n        const headers = new HttpHeaders()\n            .set('Content-Type', 'application/json')\n            .set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n\n        return this.http.post<SimpleTemplate>(this.apiUrl, template, { headers })\n            .pipe(\n                catchError(error => {\n                    console.error('Erro ao Criar Formul√°rio:', error);\n                    return of(null);\n                })\n            );\n    }\n\n    /**\n     * Atualiza um template existente\n     */\n    atualizarTemplate(id: number, template: SimpleTemplate): Observable<SimpleTemplate | null> {\n        const headers = new HttpHeaders()\n            .set('Content-Type', 'application/json')\n            .set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n\n        return this.http.put<SimpleTemplate>(`${this.apiUrl}/${id}`, template, { headers })\n            .pipe(\n                catchError(error => {\n                    console.error('Erro ao atualizar template:', error);\n                    return of(null);\n                })\n            );\n    }\n\n    /**\n     * Remove um template\n     */\n    removerTemplate(id: number): Observable<boolean> {\n        const headers = new HttpHeaders()\n            .set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n\n        return this.http.delete(`${this.apiUrl}/${id}`, { headers })\n            .pipe(\n                map(() => true),\n                catchError(error => {\n                    console.error('Erro ao remover template:', error);\n                    return of(false);\n                })\n            );\n    }\n\n    /**\n     * Registra uso de um template\n     */\n    registrarUso(id: number, sucesso: boolean = true): Observable<boolean> {\n        const headers = new HttpHeaders()\n            .set('Content-Type', 'application/json')\n            .set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n\n        return this.http.post(`${this.apiUrl}/${id}/uso`, { success: sucesso }, { headers })\n            .pipe(\n                map(() => true),\n                catchError(error => {\n                    console.error('Erro ao registrar uso do template:', error);\n                    return of(false);\n                })\n            );\n    }\n\n    /**\n     * Testa conex√£o com o backend\n     */\n    testarConexao(): Observable<boolean> {\n        const headers = new HttpHeaders()\n            .set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n\n        return this.http.get(`${environment.apiUrl}/public/health`, { headers })\n            .pipe(\n                map(() => true),\n                catchError(error => {\n                    console.error('Erro ao testar conex√£o:', error);\n                    return of(false);\n                })\n            );\n    }\n}\n\n"],"mappings":"AACA,SAASA,UAAU,EAAEC,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAASC,WAAW,QAAQ,gCAAgC;;;AAuB5D,OAAM,MAAOC,qBAAqB;EAGVC,IAAA;EAFZC,MAAM,GAAG,GAAGH,WAAW,CAACG,MAAM,mBAAmB;EAEzDC,YAAoBF,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExC;;;EAGAG,eAAeA,CAAA;IACX;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACRG,OAAO,CAACC,KAAK,CAAC,8CAA8C,CAAC;MAC7D,OAAOb,EAAE,CAAC,EAAE,CAAC;IACjB;IAEA,MAAMc,OAAO,GAAG,IAAIf,WAAW,EAAE,CAC5BgB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CACvCA,GAAG,CAAC,eAAe,EAAE,UAAUN,KAAK,EAAE,CAAC;IAE5C;IACA,MAAMO,YAAY,GAAG,GAAG,IAAI,CAACV,MAAM,cAAc;IAEjD,OAAO,IAAI,CAACD,IAAI,CAACY,GAAG,CAAmBD,YAAY,EAAE;MAAEF;IAAO,CAAE,CAAC,CAC5DI,IAAI,CACDjB,UAAU,CAACY,KAAK,IAAG;MACfD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAOb,EAAE,CAAC,EAAE,CAAC;IACjB,CAAC,CAAC,CACL;EACT;EAEA;;;EAGAmB,aAAaA,CAACC,QAAwB;IAClC,MAAMN,OAAO,GAAG,IAAIf,WAAW,EAAE,CAC5BgB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CACvCA,GAAG,CAAC,iBAAiB,EAAE,+CAA+C,CAAC;IAE5E,OAAO,IAAI,CAACV,IAAI,CAACgB,IAAI,CAAiB,IAAI,CAACf,MAAM,EAAEc,QAAQ,EAAE;MAAEN;IAAO,CAAE,CAAC,CACpEI,IAAI,CACDjB,UAAU,CAACY,KAAK,IAAG;MACfD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAOb,EAAE,CAAC,IAAI,CAAC;IACnB,CAAC,CAAC,CACL;EACT;EAEA;;;EAGAsB,iBAAiBA,CAACC,EAAU,EAAEH,QAAwB;IAClD,MAAMN,OAAO,GAAG,IAAIf,WAAW,EAAE,CAC5BgB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CACvCA,GAAG,CAAC,iBAAiB,EAAE,+CAA+C,CAAC;IAE5E,OAAO,IAAI,CAACV,IAAI,CAACmB,GAAG,CAAiB,GAAG,IAAI,CAAClB,MAAM,IAAIiB,EAAE,EAAE,EAAEH,QAAQ,EAAE;MAAEN;IAAO,CAAE,CAAC,CAC9EI,IAAI,CACDjB,UAAU,CAACY,KAAK,IAAG;MACfD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAOb,EAAE,CAAC,IAAI,CAAC;IACnB,CAAC,CAAC,CACL;EACT;EAEA;;;EAGAyB,eAAeA,CAACF,EAAU;IACtB,MAAMT,OAAO,GAAG,IAAIf,WAAW,EAAE,CAC5BgB,GAAG,CAAC,iBAAiB,EAAE,+CAA+C,CAAC;IAE5E,OAAO,IAAI,CAACV,IAAI,CAACqB,MAAM,CAAC,GAAG,IAAI,CAACpB,MAAM,IAAIiB,EAAE,EAAE,EAAE;MAAET;IAAO,CAAE,CAAC,CACvDI,IAAI,CACDhB,GAAG,CAAC,MAAM,IAAI,CAAC,EACfD,UAAU,CAACY,KAAK,IAAG;MACfD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAOb,EAAE,CAAC,KAAK,CAAC;IACpB,CAAC,CAAC,CACL;EACT;EAEA;;;EAGA2B,YAAYA,CAACJ,EAAU,EAAEK,OAAA,GAAmB,IAAI;IAC5C,MAAMd,OAAO,GAAG,IAAIf,WAAW,EAAE,CAC5BgB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CACvCA,GAAG,CAAC,iBAAiB,EAAE,+CAA+C,CAAC;IAE5E,OAAO,IAAI,CAACV,IAAI,CAACgB,IAAI,CAAC,GAAG,IAAI,CAACf,MAAM,IAAIiB,EAAE,MAAM,EAAE;MAAEM,OAAO,EAAED;IAAO,CAAE,EAAE;MAAEd;IAAO,CAAE,CAAC,CAC/EI,IAAI,CACDhB,GAAG,CAAC,MAAM,IAAI,CAAC,EACfD,UAAU,CAACY,KAAK,IAAG;MACfD,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,OAAOb,EAAE,CAAC,KAAK,CAAC;IACpB,CAAC,CAAC,CACL;EACT;EAEA;;;EAGA8B,aAAaA,CAAA;IACT,MAAMhB,OAAO,GAAG,IAAIf,WAAW,EAAE,CAC5BgB,GAAG,CAAC,iBAAiB,EAAE,+CAA+C,CAAC;IAE5E,OAAO,IAAI,CAACV,IAAI,CAACY,GAAG,CAAC,GAAGd,WAAW,CAACG,MAAM,gBAAgB,EAAE;MAAEQ;IAAO,CAAE,CAAC,CACnEI,IAAI,CACDhB,GAAG,CAAC,MAAM,IAAI,CAAC,EACfD,UAAU,CAACY,KAAK,IAAG;MACfD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAOb,EAAE,CAAC,KAAK,CAAC;IACpB,CAAC,CAAC,CACL;EACT;;qCApHSI,qBAAqB,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAnC,UAAA;EAAA;;WAArBM,qBAAqB;IAAA8B,OAAA,EAArB9B,qBAAqB,CAAA+B,IAAA;IAAAC,UAAA,EAFlB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}