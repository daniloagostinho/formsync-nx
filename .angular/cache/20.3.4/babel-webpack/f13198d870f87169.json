{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TemplateCsvService {\n  http;\n  apiUrl = `${environment.apiUrl}/templates/csv`;\n  constructor(http) {\n    this.http = http;\n  }\n  /**\n   * Upload de CSV de templates\n   */\n  uploadCsv(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(`${this.apiUrl}/upload`, formData);\n  }\n  /**\n   * Listar templates\n   */\n  listarTemplates() {\n    // üîë Usar chave de extens√£o para listar templates\n    const headers = new HttpHeaders().set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n    console.log('üîë [DEBUG] Fazendo requisi√ß√£o com chave de extens√£o para:', `${environment.apiUrl}/public/templates?usuarioId=1`);\n    return this.http.get(`${environment.apiUrl}/public/templates?usuarioId=1`, {\n      headers\n    });\n  }\n  /**\n   * Deletar template\n   */\n  deletarTemplate(id) {\n    const headers = new HttpHeaders().set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n    return this.http.delete(`${environment.apiUrl}/public/templates/${id}`, {\n      headers\n    });\n  }\n  /**\n   * Obter formato do CSV\n   */\n  getFormatoCsv() {\n    return this.http.get(`${this.apiUrl}/formato`);\n  }\n  /**\n   * Health check do servi√ßo\n   */\n  healthCheck() {\n    return this.http.get(`${this.apiUrl}/health`);\n  }\n  static …µfac = function TemplateCsvService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TemplateCsvService)(i0.…µ…µinject(i1.HttpClient));\n  };\n  static …µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: TemplateCsvService,\n    factory: TemplateCsvService.…µfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","HttpHeaders","environment","TemplateCsvService","http","apiUrl","constructor","uploadCsv","file","formData","FormData","append","post","listarTemplates","headers","set","console","log","get","deletarTemplate","id","delete","getFormatoCsv","healthCheck","i0","…µ…µinject","i1","factory","…µfac","providedIn"],"sources":["/home/danilo/√Årea de trabalho/formsync-nx/apps/front/src/app/services/template-csv.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nexport interface Template {\n    id: number;\n    nome: string;\n    descricao: string;\n    ativo: boolean;\n    dataCriacao: string;\n    dataAtualizacao: string;\n    totalUso: number;\n    ultimoUso?: string;\n    campos: CampoTemplate[];\n}\n\nexport interface CampoTemplate {\n    id: number;\n    nome: string;\n    valor: string;\n    tipo: string;\n    ordem: number;\n    ativo: boolean;\n    dataCriacao: string;\n    dataAtualizacao: string;\n    totalUso: number;\n    ultimoUso?: string;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TemplateCsvService {\n    private apiUrl = `${environment.apiUrl}/templates/csv`;\n\n    constructor(private http: HttpClient) { }\n\n    /**\n     * Upload de CSV de templates\n     */\n    uploadCsv(file: File): Observable<any> {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        return this.http.post(`${this.apiUrl}/upload`, formData);\n    }\n\n    /**\n     * Listar templates\n     */\n    listarTemplates(): Observable<Template[]> {\n        // üîë Usar chave de extens√£o para listar templates\n        const headers = new HttpHeaders()\n            .set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n\n        console.log('üîë [DEBUG] Fazendo requisi√ß√£o com chave de extens√£o para:', `${environment.apiUrl}/public/templates?usuarioId=1`);\n\n        return this.http.get<Template[]>(`${environment.apiUrl}/public/templates?usuarioId=1`, { headers });\n    }\n\n    /**\n     * Deletar template\n     */\n    deletarTemplate(id: number): Observable<void> {\n        const headers = new HttpHeaders()\n            .set('X-Extension-Key', 'ext_2024_preenche_rapido_secure_key_987654321');\n        return this.http.delete<void>(`${environment.apiUrl}/public/templates/${id}`, { headers });\n    }\n\n    /**\n     * Obter formato do CSV\n     */\n    getFormatoCsv(): Observable<any> {\n        return this.http.get(`${this.apiUrl}/formato`);\n    }\n\n    /**\n     * Health check do servi√ßo\n     */\n    healthCheck(): Observable<any> {\n        return this.http.get(`${this.apiUrl}/health`);\n    }\n}\n\n"],"mappings":"AACA,SAASA,UAAU,EAAEC,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,gCAAgC;;;AA8B5D,OAAM,MAAOC,kBAAkB;EAGPC,IAAA;EAFZC,MAAM,GAAG,GAAGH,WAAW,CAACG,MAAM,gBAAgB;EAEtDC,YAAoBF,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExC;;;EAGAG,SAASA,CAACC,IAAU;IAChB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAE7B,OAAO,IAAI,CAACJ,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACP,MAAM,SAAS,EAAEI,QAAQ,CAAC;EAC5D;EAEA;;;EAGAI,eAAeA,CAAA;IACX;IACA,MAAMC,OAAO,GAAG,IAAIb,WAAW,EAAE,CAC5Bc,GAAG,CAAC,iBAAiB,EAAE,+CAA+C,CAAC;IAE5EC,OAAO,CAACC,GAAG,CAAC,2DAA2D,EAAE,GAAGf,WAAW,CAACG,MAAM,+BAA+B,CAAC;IAE9H,OAAO,IAAI,CAACD,IAAI,CAACc,GAAG,CAAa,GAAGhB,WAAW,CAACG,MAAM,+BAA+B,EAAE;MAAES;IAAO,CAAE,CAAC;EACvG;EAEA;;;EAGAK,eAAeA,CAACC,EAAU;IACtB,MAAMN,OAAO,GAAG,IAAIb,WAAW,EAAE,CAC5Bc,GAAG,CAAC,iBAAiB,EAAE,+CAA+C,CAAC;IAC5E,OAAO,IAAI,CAACX,IAAI,CAACiB,MAAM,CAAO,GAAGnB,WAAW,CAACG,MAAM,qBAAqBe,EAAE,EAAE,EAAE;MAAEN;IAAO,CAAE,CAAC;EAC9F;EAEA;;;EAGAQ,aAAaA,CAAA;IACT,OAAO,IAAI,CAAClB,IAAI,CAACc,GAAG,CAAC,GAAG,IAAI,CAACb,MAAM,UAAU,CAAC;EAClD;EAEA;;;EAGAkB,WAAWA,CAAA;IACP,OAAO,IAAI,CAACnB,IAAI,CAACc,GAAG,CAAC,GAAG,IAAI,CAACb,MAAM,SAAS,CAAC;EACjD;;qCAjDSF,kBAAkB,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAA1B,UAAA;EAAA;;WAAlBG,kBAAkB;IAAAwB,OAAA,EAAlBxB,kBAAkB,CAAAyB,IAAA;IAAAC,UAAA,EAFf;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}