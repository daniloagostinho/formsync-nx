{"ast":null,"code":"import { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  auth;\n  router;\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const rota = state.url.split('?')[0]; // Remove query string\n    const publicRoutes = ['/login', '/registrar', '/verificar-codigo'];\n    if (publicRoutes.includes(rota)) {\n      return true;\n    }\n    if (!this.auth.estaAutenticado()) {\n      console.log('❌ Usuário não autenticado, redirecionando para login...');\n      this.router.navigate(['/login']);\n      return false;\n    }\n    console.log('✅ Usuário autenticado, permitindo acesso à rota:', rota);\n    return true;\n  }\n  static ɵfac = function AuthGuard_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ActivatedRouteSnapshot","Router","RouterStateSnapshot","UrlTree","AuthService","AuthGuard","auth","router","constructor","canActivate","route","state","rota","url","split","publicRoutes","includes","estaAutenticado","console","log","navigate","i0","ɵɵinject","i1","i2","factory","ɵfac","providedIn"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/src/app/guards/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private auth: AuthService,\n    private router: Router,\n  ) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot,\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n\n    const rota = state.url.split('?')[0]; // Remove query string\n    const publicRoutes = [\n      '/login',\n      '/registrar',\n      '/verificar-codigo',\n    ];\n\n    if (publicRoutes.includes(rota)) {\n      return true;\n    }\n\n    if (!this.auth.estaAutenticado()) {\n      console.log('❌ Usuário não autenticado, redirecionando para login...');\n      this.router.navigate(['/login']);\n      return false;\n    }\n\n    console.log('✅ Usuário autenticado, permitindo acesso à rota:', rota);\n    return true;\n  }\n} "],"mappings":"AACA,SACEA,sBAAsB,EAEtBC,MAAM,EACNC,mBAAmB,EACnBC,OAAO,QACF,iBAAiB;AAExB,SAASC,WAAW,QAAQ,0BAA0B;;;;AAKtD,OAAM,MAAOC,SAAS;EAEVC,IAAA;EACAC,MAAA;EAFVC,YACUF,IAAiB,EACjBC,MAAc;IADd,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;EACZ;EAEJE,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAO1B,MAAMC,IAAI,GAAGD,KAAK,CAACE,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC,MAAMC,YAAY,GAAG,CACnB,QAAQ,EACR,YAAY,EACZ,mBAAmB,CACpB;IAED,IAAIA,YAAY,CAACC,QAAQ,CAACJ,IAAI,CAAC,EAAE;MAC/B,OAAO,IAAI;IACb;IAEA,IAAI,CAAC,IAAI,CAACN,IAAI,CAACW,eAAe,EAAE,EAAE;MAChCC,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;MACtE,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;IACd;IAEAF,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEP,IAAI,CAAC;IACrE,OAAO,IAAI;EACb;;qCAlCWP,SAAS,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAnB,WAAA,GAAAiB,EAAA,CAAAC,QAAA,CAAAE,EAAA,CAAAvB,MAAA;EAAA;;WAATI,SAAS;IAAAoB,OAAA,EAATpB,SAAS,CAAAqB,IAAA;IAAAC,UAAA,EAFR;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}