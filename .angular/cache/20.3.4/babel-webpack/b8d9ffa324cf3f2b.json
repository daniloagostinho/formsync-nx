{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CookieConsentService {\n  consentSubject = new BehaviorSubject(null);\n  consent$ = this.consentSubject.asObservable();\n  constructor() {\n    this.loadConsent();\n  }\n  /**\n   * Carrega o consentimento salvo no localStorage\n   */\n  loadConsent() {\n    const savedConsent = localStorage.getItem('cookieConsent');\n    if (savedConsent) {\n      try {\n        const consent = JSON.parse(savedConsent);\n        this.consentSubject.next(consent);\n      } catch (error) {\n        console.error('Erro ao carregar consentimento de cookies:', error);\n        this.clearConsent();\n      }\n    }\n  }\n  /**\n   * Salva o consentimento do usuário\n   */\n  saveConsent(consent) {\n    localStorage.setItem('cookieConsent', JSON.stringify(consent));\n    this.consentSubject.next(consent);\n    // Emite evento para outros componentes\n    window.dispatchEvent(new CustomEvent('cookieConsentChanged', {\n      detail: consent\n    }));\n  }\n  /**\n   * Obtém o consentimento atual\n   */\n  getConsent() {\n    return this.consentSubject.value;\n  }\n  /**\n   * Verifica se o usuário já deu consentimento\n   */\n  hasConsent() {\n    return this.consentSubject.value !== null;\n  }\n  /**\n   * Verifica se analytics está permitido\n   */\n  isAnalyticsAllowed() {\n    const consent = this.getConsent();\n    return consent?.analytics === true;\n  }\n  /**\n   * Verifica se marketing está permitido\n   */\n  isMarketingAllowed() {\n    const consent = this.getConsent();\n    return consent?.marketing === true;\n  }\n  /**\n   * Verifica se cookies essenciais estão permitidos (sempre true)\n   */\n  isEssentialAllowed() {\n    return true; // Cookies essenciais são sempre permitidos\n  }\n  /**\n   * Limpa o consentimento salvo\n   */\n  clearConsent() {\n    localStorage.removeItem('cookieConsent');\n    this.consentSubject.next(null);\n  }\n  /**\n   * Atualiza apenas uma categoria de consentimento\n   */\n  updateConsentCategory(category, value) {\n    const currentConsent = this.getConsent();\n    if (currentConsent) {\n      const updatedConsent = {\n        ...currentConsent,\n        [category]: value,\n        timestamp: new Date().toISOString()\n      };\n      this.saveConsent(updatedConsent);\n    }\n  }\n  /**\n   * Aceita todos os cookies\n   */\n  acceptAll() {\n    const consent = {\n      essential: true,\n      analytics: true,\n      marketing: true,\n      timestamp: new Date().toISOString()\n    };\n    this.saveConsent(consent);\n  }\n  /**\n   * Rejeita todos os cookies opcionais\n   */\n  rejectAll() {\n    const consent = {\n      essential: true,\n      analytics: false,\n      marketing: false,\n      timestamp: new Date().toISOString()\n    };\n    this.saveConsent(consent);\n  }\n  /**\n   * Verifica se o consentimento expirou (mais de 1 ano)\n   */\n  isConsentExpired() {\n    const consent = this.getConsent();\n    if (!consent?.timestamp) return true;\n    const consentDate = new Date(consent.timestamp);\n    const oneYearAgo = new Date();\n    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n    return consentDate < oneYearAgo;\n  }\n  /**\n   * Obtém estatísticas de consentimento (para analytics)\n   */\n  getConsentStats() {\n    const consent = this.getConsent();\n    if (!consent) return {\n      analytics: 0,\n      marketing: 0,\n      total: 0\n    };\n    return {\n      analytics: consent.analytics ? 1 : 0,\n      marketing: consent.marketing ? 1 : 0,\n      total: 1\n    };\n  }\n  static ɵfac = function CookieConsentService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CookieConsentService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CookieConsentService,\n    factory: CookieConsentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","CookieConsentService","consentSubject","consent$","asObservable","constructor","loadConsent","savedConsent","localStorage","getItem","consent","JSON","parse","next","error","console","clearConsent","saveConsent","setItem","stringify","window","dispatchEvent","CustomEvent","detail","getConsent","value","hasConsent","isAnalyticsAllowed","analytics","isMarketingAllowed","marketing","isEssentialAllowed","removeItem","updateConsentCategory","category","currentConsent","updatedConsent","timestamp","Date","toISOString","acceptAll","essential","rejectAll","isConsentExpired","consentDate","oneYearAgo","setFullYear","getFullYear","getConsentStats","total","factory","ɵfac","providedIn"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/src/app/services/cookie-consent.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface CookieConsent {\n  essential: boolean;\n  analytics: boolean;\n  marketing: boolean;\n  timestamp: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CookieConsentService {\n  private consentSubject = new BehaviorSubject<CookieConsent | null>(null);\n  public consent$ = this.consentSubject.asObservable();\n\n  constructor() {\n    this.loadConsent();\n  }\n\n  /**\n   * Carrega o consentimento salvo no localStorage\n   */\n  private loadConsent(): void {\n    const savedConsent = localStorage.getItem('cookieConsent');\n    if (savedConsent) {\n      try {\n        const consent = JSON.parse(savedConsent);\n        this.consentSubject.next(consent);\n      } catch (error) {\n        console.error('Erro ao carregar consentimento de cookies:', error);\n        this.clearConsent();\n      }\n    }\n  }\n\n  /**\n   * Salva o consentimento do usuário\n   */\n  saveConsent(consent: CookieConsent): void {\n    localStorage.setItem('cookieConsent', JSON.stringify(consent));\n    this.consentSubject.next(consent);\n    \n    // Emite evento para outros componentes\n    window.dispatchEvent(new CustomEvent('cookieConsentChanged', { \n      detail: consent \n    }));\n  }\n\n  /**\n   * Obtém o consentimento atual\n   */\n  getConsent(): CookieConsent | null {\n    return this.consentSubject.value;\n  }\n\n  /**\n   * Verifica se o usuário já deu consentimento\n   */\n  hasConsent(): boolean {\n    return this.consentSubject.value !== null;\n  }\n\n  /**\n   * Verifica se analytics está permitido\n   */\n  isAnalyticsAllowed(): boolean {\n    const consent = this.getConsent();\n    return consent?.analytics === true;\n  }\n\n  /**\n   * Verifica se marketing está permitido\n   */\n  isMarketingAllowed(): boolean {\n    const consent = this.getConsent();\n    return consent?.marketing === true;\n  }\n\n  /**\n   * Verifica se cookies essenciais estão permitidos (sempre true)\n   */\n  isEssentialAllowed(): boolean {\n    return true; // Cookies essenciais são sempre permitidos\n  }\n\n  /**\n   * Limpa o consentimento salvo\n   */\n  clearConsent(): void {\n    localStorage.removeItem('cookieConsent');\n    this.consentSubject.next(null);\n  }\n\n  /**\n   * Atualiza apenas uma categoria de consentimento\n   */\n  updateConsentCategory(category: keyof CookieConsent, value: boolean): void {\n    const currentConsent = this.getConsent();\n    if (currentConsent) {\n      const updatedConsent = {\n        ...currentConsent,\n        [category]: value,\n        timestamp: new Date().toISOString()\n      };\n      this.saveConsent(updatedConsent);\n    }\n  }\n\n  /**\n   * Aceita todos os cookies\n   */\n  acceptAll(): void {\n    const consent: CookieConsent = {\n      essential: true,\n      analytics: true,\n      marketing: true,\n      timestamp: new Date().toISOString()\n    };\n    this.saveConsent(consent);\n  }\n\n  /**\n   * Rejeita todos os cookies opcionais\n   */\n  rejectAll(): void {\n    const consent: CookieConsent = {\n      essential: true,\n      analytics: false,\n      marketing: false,\n      timestamp: new Date().toISOString()\n    };\n    this.saveConsent(consent);\n  }\n\n  /**\n   * Verifica se o consentimento expirou (mais de 1 ano)\n   */\n  isConsentExpired(): boolean {\n    const consent = this.getConsent();\n    if (!consent?.timestamp) return true;\n\n    const consentDate = new Date(consent.timestamp);\n    const oneYearAgo = new Date();\n    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n\n    return consentDate < oneYearAgo;\n  }\n\n  /**\n   * Obtém estatísticas de consentimento (para analytics)\n   */\n  getConsentStats(): { analytics: number; marketing: number; total: number } {\n    const consent = this.getConsent();\n    if (!consent) return { analytics: 0, marketing: 0, total: 0 };\n\n    return {\n      analytics: consent.analytics ? 1 : 0,\n      marketing: consent.marketing ? 1 : 0,\n      total: 1\n    };\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}