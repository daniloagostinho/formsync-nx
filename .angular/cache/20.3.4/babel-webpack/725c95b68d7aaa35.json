{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, inject, ElementRef, NgZone, EventEmitter, Injector, Renderer2, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, Optional, SkipSelf, InjectionToken, ChangeDetectorRef, ViewChild, ViewContainerRef, DOCUMENT, booleanAttribute, Directive, forwardRef, signal, HostAttributeToken, ContentChild, TemplateRef, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of } from 'rxjs';\nimport { DateAdapter, MAT_DATE_FORMATS } from './date-formats.mjs';\nimport { _IdGenerator, CdkMonitorFocus, CdkTrapFocus, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceStringArray } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey, SPACE, ENTER, PAGE_DOWN, PAGE_UP, END, HOME, DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW, BACKSPACE } from '@angular/cdk/keycodes';\nimport { createRepositionScrollStrategy, FlexibleConnectedPositionStrategy, createOverlayRef, OverlayConfig, createBlockScrollStrategy, createGlobalPositionStrategy, createFlexibleConnectedPositionStrategy, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform, _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { ComponentPortal, CdkPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { startWith, take, filter } from 'rxjs/operators';\nimport { NgClass } from '@angular/common';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { _StructuralStylesLoader } from './structural-styles.mjs';\nimport { MatButton, MatButtonModule } from './button.mjs';\nimport { MatIconButton } from './icon-button.mjs';\nimport { _animationsDisabled } from './animation.mjs';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators, ControlContainer, NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MAT_INPUT_VALUE_ACCESSOR } from './input-value-accessor.mjs';\nimport { MAT_FORM_FIELD, MatFormFieldControl } from './form-field2.mjs';\nimport { ErrorStateMatcher } from './error-options.mjs';\nimport { _ErrorStateTracker } from './error-state.mjs';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from './common-module.mjs';\nimport './ripple-module.mjs';\nimport './ripple.mjs';\nimport './ripple-loader.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/observers/private';\n\n/** @docs-private */\nconst _c0 = [\"mat-calendar-body\", \"\"];\nfunction _forTrack0($index, $item) {\n  return this._trackRow($item);\n}\nconst _forTrack1 = ($index, $item) => $item.id;\nfunction MatCalendarBody_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 0)(1, \"td\", 3);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"padding-top\", ctx_r0._cellPadding)(\"padding-bottom\", ctx_r0._cellPadding);\n    i0.ɵɵattribute(\"colspan\", ctx_r0.numCols);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.label, \" \");\n  }\n}\nfunction MatCalendarBody_For_2_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"padding-top\", ctx_r0._cellPadding)(\"padding-bottom\", ctx_r0._cellPadding);\n    i0.ɵɵattribute(\"colspan\", ctx_r0._firstRowOffset);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0._firstRowOffset >= ctx_r0.labelMinRequiredCells ? ctx_r0.label : \"\", \" \");\n  }\n}\nfunction MatCalendarBody_For_2_For_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 6)(1, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function MatCalendarBody_For_2_For_3_Template_button_click_1_listener($event) {\n      const item_r3 = i0.ɵɵrestoreView(_r2).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0._cellClicked(item_r3, $event));\n    })(\"focus\", function MatCalendarBody_For_2_For_3_Template_button_focus_1_listener($event) {\n      const item_r3 = i0.ɵɵrestoreView(_r2).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0._emitActiveDateChange(item_r3, $event));\n    });\n    i0.ɵɵelementStart(2, \"span\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"span\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    const ɵ$index_14_r4 = ctx.$index;\n    const ɵ$index_7_r5 = i0.ɵɵnextContext().$index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"width\", ctx_r0._cellWidth)(\"padding-top\", ctx_r0._cellPadding)(\"padding-bottom\", ctx_r0._cellPadding);\n    i0.ɵɵattribute(\"data-mat-row\", ɵ$index_7_r5)(\"data-mat-col\", ɵ$index_14_r4);\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"mat-calendar-body-disabled\", !item_r3.enabled)(\"mat-calendar-body-active\", ctx_r0._isActiveCell(ɵ$index_7_r5, ɵ$index_14_r4))(\"mat-calendar-body-range-start\", ctx_r0._isRangeStart(item_r3.compareValue))(\"mat-calendar-body-range-end\", ctx_r0._isRangeEnd(item_r3.compareValue))(\"mat-calendar-body-in-range\", ctx_r0._isInRange(item_r3.compareValue))(\"mat-calendar-body-comparison-bridge-start\", ctx_r0._isComparisonBridgeStart(item_r3.compareValue, ɵ$index_7_r5, ɵ$index_14_r4))(\"mat-calendar-body-comparison-bridge-end\", ctx_r0._isComparisonBridgeEnd(item_r3.compareValue, ɵ$index_7_r5, ɵ$index_14_r4))(\"mat-calendar-body-comparison-start\", ctx_r0._isComparisonStart(item_r3.compareValue))(\"mat-calendar-body-comparison-end\", ctx_r0._isComparisonEnd(item_r3.compareValue))(\"mat-calendar-body-in-comparison-range\", ctx_r0._isInComparisonRange(item_r3.compareValue))(\"mat-calendar-body-preview-start\", ctx_r0._isPreviewStart(item_r3.compareValue))(\"mat-calendar-body-preview-end\", ctx_r0._isPreviewEnd(item_r3.compareValue))(\"mat-calendar-body-in-preview\", ctx_r0._isInPreview(item_r3.compareValue));\n    i0.ɵɵproperty(\"ngClass\", item_r3.cssClasses)(\"tabindex\", ctx_r0._isActiveCell(ɵ$index_7_r5, ɵ$index_14_r4) ? 0 : -1);\n    i0.ɵɵattribute(\"aria-label\", item_r3.ariaLabel)(\"aria-disabled\", !item_r3.enabled || null)(\"aria-pressed\", ctx_r0._isSelected(item_r3.compareValue))(\"aria-current\", ctx_r0.todayValue === item_r3.compareValue ? \"date\" : null)(\"aria-describedby\", ctx_r0._getDescribedby(item_r3.compareValue));\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"mat-calendar-body-selected\", ctx_r0._isSelected(item_r3.compareValue))(\"mat-calendar-body-comparison-identical\", ctx_r0._isComparisonIdentical(item_r3.compareValue))(\"mat-calendar-body-today\", ctx_r0.todayValue === item_r3.compareValue);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", item_r3.displayValue, \" \");\n  }\n}\nfunction MatCalendarBody_For_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 1);\n    i0.ɵɵconditionalCreate(1, MatCalendarBody_For_2_Conditional_1_Template, 2, 6, \"td\", 4);\n    i0.ɵɵrepeaterCreate(2, MatCalendarBody_For_2_For_3_Template, 5, 48, \"td\", 5, _forTrack1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r6 = ctx.$implicit;\n    const ɵ$index_7_r5 = ctx.$index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(ɵ$index_7_r5 === 0 && ctx_r0._firstRowOffset ? 1 : -1);\n    i0.ɵɵadvance();\n    i0.ɵɵrepeater(row_r6);\n  }\n}\nfunction MatMonthView_For_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 2)(1, \"span\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 3);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const day_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(day_r1.long);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(day_r1.narrow);\n  }\n}\nconst _c1 = [\"*\"];\nfunction MatCalendar_ng_template_0_Template(rf, ctx) {}\nfunction MatCalendar_Case_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-month-view\", 4);\n    i0.ɵɵtwoWayListener(\"activeDateChange\", function MatCalendar_Case_2_Template_mat_month_view_activeDateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"_userSelection\", function MatCalendar_Case_2_Template_mat_month_view__userSelection_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._dateSelected($event));\n    })(\"dragStarted\", function MatCalendar_Case_2_Template_mat_month_view_dragStarted_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._dragStarted($event));\n    })(\"dragEnded\", function MatCalendar_Case_2_Template_mat_month_view_dragEnded_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._dragEnded($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵtwoWayProperty(\"activeDate\", ctx_r1.activeDate);\n    i0.ɵɵproperty(\"selected\", ctx_r1.selected)(\"dateFilter\", ctx_r1.dateFilter)(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.minDate)(\"dateClass\", ctx_r1.dateClass)(\"comparisonStart\", ctx_r1.comparisonStart)(\"comparisonEnd\", ctx_r1.comparisonEnd)(\"startDateAccessibleName\", ctx_r1.startDateAccessibleName)(\"endDateAccessibleName\", ctx_r1.endDateAccessibleName)(\"activeDrag\", ctx_r1._activeDrag);\n  }\n}\nfunction MatCalendar_Case_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-year-view\", 5);\n    i0.ɵɵtwoWayListener(\"activeDateChange\", function MatCalendar_Case_3_Template_mat_year_view_activeDateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"monthSelected\", function MatCalendar_Case_3_Template_mat_year_view_monthSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._monthSelectedInYearView($event));\n    })(\"selectedChange\", function MatCalendar_Case_3_Template_mat_year_view_selectedChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._goToDateInView($event, \"month\"));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵtwoWayProperty(\"activeDate\", ctx_r1.activeDate);\n    i0.ɵɵproperty(\"selected\", ctx_r1.selected)(\"dateFilter\", ctx_r1.dateFilter)(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.minDate)(\"dateClass\", ctx_r1.dateClass);\n  }\n}\nfunction MatCalendar_Case_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-multi-year-view\", 6);\n    i0.ɵɵtwoWayListener(\"activeDateChange\", function MatCalendar_Case_4_Template_mat_multi_year_view_activeDateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"yearSelected\", function MatCalendar_Case_4_Template_mat_multi_year_view_yearSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._yearSelectedInMultiYearView($event));\n    })(\"selectedChange\", function MatCalendar_Case_4_Template_mat_multi_year_view_selectedChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._goToDateInView($event, \"year\"));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵtwoWayProperty(\"activeDate\", ctx_r1.activeDate);\n    i0.ɵɵproperty(\"selected\", ctx_r1.selected)(\"dateFilter\", ctx_r1.dateFilter)(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.minDate)(\"dateClass\", ctx_r1.dateClass);\n  }\n}\nfunction MatDatepickerContent_ng_template_2_Template(rf, ctx) {}\nconst _c2 = [\"button\"];\nconst _c3 = [[[\"\", \"matDatepickerToggleIcon\", \"\"]]];\nconst _c4 = [\"[matDatepickerToggleIcon]\"];\nfunction MatDatepickerToggle_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 2);\n    i0.ɵɵelement(1, \"path\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c5 = [[[\"input\", \"matStartDate\", \"\"]], [[\"input\", \"matEndDate\", \"\"]]];\nconst _c6 = [\"input[matStartDate]\", \"input[matEndDate]\"];\nfunction MatDatepickerActions_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵdomElementStart(0, \"div\", 0);\n    i0.ɵɵprojection(1);\n    i0.ɵɵdomElementEnd();\n  }\n}\nfunction createMissingDateImplError(provider) {\n  return Error(`MatDatepicker: No provider found for ${provider}. You must add one of the following ` + `to your app config: provideNativeDateAdapter, provideDateFnsAdapter, ` + `provideLuxonDateAdapter, provideMomentDateAdapter, or provide a custom implementation.`);\n}\n\n/** Datepicker data that requires internationalization. */\nclass MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes = new Subject();\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n  /** Label for the button used to close the calendar popup. */\n  closeCalendarLabel = 'Close calendar';\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 24 years';\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 24 years';\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n  /**\n   * A label for the first date of a range of dates (used by screen readers).\n   * @deprecated Provide your own internationalization string.\n   * @breaking-change 17.0.0\n   */\n  startDateLabel = 'Start date';\n  /**\n   * A label for the last date of a range of dates (used by screen readers).\n   * @deprecated Provide your own internationalization string.\n   * @breaking-change 17.0.0\n   */\n  endDateLabel = 'End date';\n  /**\n   * A label for the Comparison date of a range of dates (used by screen readers).\n   */\n  comparisonDateLabel = 'Comparison range';\n  /** Formats a range of years (used for visuals). */\n  formatYearRange(start, end) {\n    return `${start} \\u2013 ${end}`;\n  }\n  /** Formats a label for a range of years (used by screen readers). */\n  formatYearRangeLabel(start, end) {\n    return `${start} to ${end}`;\n  }\n  static ɵfac = function MatDatepickerIntl_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDatepickerIntl)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatDatepickerIntl,\n    factory: MatDatepickerIntl.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDatepickerIntl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nlet uniqueIdCounter$1 = 0;\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nclass MatCalendarCell {\n  value;\n  displayValue;\n  ariaLabel;\n  enabled;\n  cssClasses;\n  compareValue;\n  rawValue;\n  id = uniqueIdCounter$1++;\n  constructor(value, displayValue, ariaLabel, enabled, cssClasses = {}, compareValue = value, rawValue) {\n    this.value = value;\n    this.displayValue = displayValue;\n    this.ariaLabel = ariaLabel;\n    this.enabled = enabled;\n    this.cssClasses = cssClasses;\n    this.compareValue = compareValue;\n    this.rawValue = rawValue;\n  }\n}\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n  passive: false,\n  capture: true\n};\n/** Event options that can be used to bind a passive, capturing event. */\nconst passiveCapturingEventOptions = {\n  passive: true,\n  capture: true\n};\n/** Event options that can be used to bind a passive, non-capturing event. */\nconst passiveEventOptions = {\n  passive: true\n};\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\nclass MatCalendarBody {\n  _elementRef = inject(ElementRef);\n  _ngZone = inject(NgZone);\n  _platform = inject(Platform);\n  _intl = inject(MatDatepickerIntl);\n  _eventCleanups;\n  /**\n   * Used to skip the next focus event when rendering the preview range.\n   * We need a flag like this, because some browsers fire focus events asynchronously.\n   */\n  _skipNextFocus;\n  /**\n   * Used to focus the active cell after change detection has run.\n   */\n  _focusActiveCellAfterViewChecked = false;\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  label;\n  /** The cells to display in the table. */\n  rows;\n  /** The value in the table that corresponds to today. */\n  todayValue;\n  /** Start value of the selected date range. */\n  startValue;\n  /** End value of the selected date range. */\n  endValue;\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  labelMinRequiredCells;\n  /** The number of columns in the table. */\n  numCols = 7;\n  /** The cell number of the active cell in the table. */\n  activeCell = 0;\n  ngAfterViewChecked() {\n    if (this._focusActiveCellAfterViewChecked) {\n      this._focusActiveCell();\n      this._focusActiveCellAfterViewChecked = false;\n    }\n  }\n  /** Whether a range is being selected. */\n  isRange = false;\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  cellAspectRatio = 1;\n  /** Start of the comparison range. */\n  comparisonStart;\n  /** End of the comparison range. */\n  comparisonEnd;\n  /** Start of the preview range. */\n  previewStart = null;\n  /** End of the preview range. */\n  previewEnd = null;\n  /** ARIA Accessible name of the `<input matStartDate/>` */\n  startDateAccessibleName;\n  /** ARIA Accessible name of the `<input matEndDate/>` */\n  endDateAccessibleName;\n  /** Emits when a new value is selected. */\n  selectedValueChange = new EventEmitter();\n  /** Emits when the preview has changed as a result of a user action. */\n  previewChange = new EventEmitter();\n  activeDateChange = new EventEmitter();\n  /** Emits the date at the possible start of a drag event. */\n  dragStarted = new EventEmitter();\n  /** Emits the date at the conclusion of a drag, or null if mouse was not released on a date. */\n  dragEnded = new EventEmitter();\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset;\n  /** Padding for the individual date cells. */\n  _cellPadding;\n  /** Width of an individual cell. */\n  _cellWidth;\n  /** ID for the start date label. */\n  _startDateLabelId;\n  /** ID for the end date label. */\n  _endDateLabelId;\n  /** ID for the comparison start date label. */\n  _comparisonStartDateLabelId;\n  /** ID for the comparison end date label. */\n  _comparisonEndDateLabelId;\n  _didDragSinceMouseDown = false;\n  _injector = inject(Injector);\n  comparisonDateAccessibleName = this._intl.comparisonDateLabel;\n  /**\n   * Tracking function for rows based on their identity. Ideally we would use some sort of\n   * key on the row, but that would require a breaking change for the `rows` input. We don't\n   * use the built-in identity tracking, because it logs warnings.\n   */\n  _trackRow = row => row;\n  constructor() {\n    const renderer = inject(Renderer2);\n    const idGenerator = inject(_IdGenerator);\n    this._startDateLabelId = idGenerator.getId('mat-calendar-body-start-');\n    this._endDateLabelId = idGenerator.getId('mat-calendar-body-end-');\n    this._comparisonStartDateLabelId = idGenerator.getId('mat-calendar-body-comparison-start-');\n    this._comparisonEndDateLabelId = idGenerator.getId('mat-calendar-body-comparison-end-');\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    this._ngZone.runOutsideAngular(() => {\n      const element = this._elementRef.nativeElement;\n      const cleanups = [\n      // `touchmove` is active since we need to call `preventDefault`.\n      renderer.listen(element, 'touchmove', this._touchmoveHandler, activeCapturingEventOptions), renderer.listen(element, 'mouseenter', this._enterHandler, passiveCapturingEventOptions), renderer.listen(element, 'focus', this._enterHandler, passiveCapturingEventOptions), renderer.listen(element, 'mouseleave', this._leaveHandler, passiveCapturingEventOptions), renderer.listen(element, 'blur', this._leaveHandler, passiveCapturingEventOptions), renderer.listen(element, 'mousedown', this._mousedownHandler, passiveEventOptions), renderer.listen(element, 'touchstart', this._mousedownHandler, passiveEventOptions)];\n      if (this._platform.isBrowser) {\n        cleanups.push(renderer.listen('window', 'mouseup', this._mouseupHandler), renderer.listen('window', 'touchend', this._touchendHandler));\n      }\n      this._eventCleanups = cleanups;\n    });\n  }\n  /** Called when a cell is clicked. */\n  _cellClicked(cell, event) {\n    // Ignore \"clicks\" that are actually canceled drags (eg the user dragged\n    // off and then went back to this cell to undo).\n    if (this._didDragSinceMouseDown) {\n      return;\n    }\n    if (cell.enabled) {\n      this.selectedValueChange.emit({\n        value: cell.value,\n        event\n      });\n    }\n  }\n  _emitActiveDateChange(cell, event) {\n    if (cell.enabled) {\n      this.activeDateChange.emit({\n        value: cell.value,\n        event\n      });\n    }\n  }\n  /** Returns whether a cell should be marked as selected. */\n  _isSelected(value) {\n    return this.startValue === value || this.endValue === value;\n  }\n  ngOnChanges(changes) {\n    const columnChanges = changes['numCols'];\n    const {\n      rows,\n      numCols\n    } = this;\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n  ngOnDestroy() {\n    this._eventCleanups.forEach(cleanup => cleanup());\n  }\n  /** Returns whether a cell is active. */\n  _isActiveCell(rowIndex, colIndex) {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n    return cellNumber == this.activeCell;\n  }\n  /**\n   * Focuses the active cell after the microtask queue is empty.\n   *\n   * Adding a 0ms setTimeout seems to fix Voiceover losing focus when pressing PageUp/PageDown\n   * (issue #24330).\n   *\n   * Determined a 0ms by gradually increasing duration from 0 and testing two use cases with screen\n   * reader enabled:\n   *\n   * 1. Pressing PageUp/PageDown repeatedly with pausing between each key press.\n   * 2. Pressing and holding the PageDown key with repeated keys enabled.\n   *\n   * Test 1 worked roughly 95-99% of the time with 0ms and got a little bit better as the duration\n   * increased. Test 2 got slightly better until the duration was long enough to interfere with\n   * repeated keys. If the repeated key speed was faster than the timeout duration, then pressing\n   * and holding pagedown caused the entire page to scroll.\n   *\n   * Since repeated key speed can verify across machines, determined that any duration could\n   * potentially interfere with repeated keys. 0ms would be best because it almost entirely\n   * eliminates the focus being lost in Voiceover (#24330) without causing unintended side effects.\n   * Adding delay also complicates writing tests.\n   */\n  _focusActiveCell(movePreview = true) {\n    afterNextRender(() => {\n      setTimeout(() => {\n        const activeCell = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n        if (activeCell) {\n          if (!movePreview) {\n            this._skipNextFocus = true;\n          }\n          activeCell.focus();\n        }\n      });\n    }, {\n      injector: this._injector\n    });\n  }\n  /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n  _scheduleFocusActiveCellAfterViewChecked() {\n    this._focusActiveCellAfterViewChecked = true;\n  }\n  /** Gets whether a value is the start of the main range. */\n  _isRangeStart(value) {\n    return isStart(value, this.startValue, this.endValue);\n  }\n  /** Gets whether a value is the end of the main range. */\n  _isRangeEnd(value) {\n    return isEnd(value, this.startValue, this.endValue);\n  }\n  /** Gets whether a value is within the currently-selected range. */\n  _isInRange(value) {\n    return isInRange(value, this.startValue, this.endValue, this.isRange);\n  }\n  /** Gets whether a value is the start of the comparison range. */\n  _isComparisonStart(value) {\n    return isStart(value, this.comparisonStart, this.comparisonEnd);\n  }\n  /** Whether the cell is a start bridge cell between the main and comparison ranges. */\n  _isComparisonBridgeStart(value, rowIndex, colIndex) {\n    if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\n      return false;\n    }\n    let previousCell = this.rows[rowIndex][colIndex - 1];\n    if (!previousCell) {\n      const previousRow = this.rows[rowIndex - 1];\n      previousCell = previousRow && previousRow[previousRow.length - 1];\n    }\n    return previousCell && !this._isRangeEnd(previousCell.compareValue);\n  }\n  /** Whether the cell is an end bridge cell between the main and comparison ranges. */\n  _isComparisonBridgeEnd(value, rowIndex, colIndex) {\n    if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\n      return false;\n    }\n    let nextCell = this.rows[rowIndex][colIndex + 1];\n    if (!nextCell) {\n      const nextRow = this.rows[rowIndex + 1];\n      nextCell = nextRow && nextRow[0];\n    }\n    return nextCell && !this._isRangeStart(nextCell.compareValue);\n  }\n  /** Gets whether a value is the end of the comparison range. */\n  _isComparisonEnd(value) {\n    return isEnd(value, this.comparisonStart, this.comparisonEnd);\n  }\n  /** Gets whether a value is within the current comparison range. */\n  _isInComparisonRange(value) {\n    return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\n  }\n  /**\n   * Gets whether a value is the same as the start and end of the comparison range.\n   * For context, the functions that we use to determine whether something is the start/end of\n   * a range don't allow for the start and end to be on the same day, because we'd have to use\n   * much more specific CSS selectors to style them correctly in all scenarios. This is fine for\n   * the regular range, because when it happens, the selected styles take over and still show where\n   * the range would've been, however we don't have these selected styles for a comparison range.\n   * This function is used to apply a class that serves the same purpose as the one for selected\n   * dates, but it only applies in the context of a comparison range.\n   */\n  _isComparisonIdentical(value) {\n    // Note that we don't need to null check the start/end\n    // here, because the `value` will always be defined.\n    return this.comparisonStart === this.comparisonEnd && value === this.comparisonStart;\n  }\n  /** Gets whether a value is the start of the preview range. */\n  _isPreviewStart(value) {\n    return isStart(value, this.previewStart, this.previewEnd);\n  }\n  /** Gets whether a value is the end of the preview range. */\n  _isPreviewEnd(value) {\n    return isEnd(value, this.previewStart, this.previewEnd);\n  }\n  /** Gets whether a value is inside the preview range. */\n  _isInPreview(value) {\n    return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\n  }\n  /** Gets ids of aria descriptions for the start and end of a date range. */\n  _getDescribedby(value) {\n    if (!this.isRange) {\n      return null;\n    }\n    if (this.startValue === value && this.endValue === value) {\n      return `${this._startDateLabelId} ${this._endDateLabelId}`;\n    } else if (this.startValue === value) {\n      return this._startDateLabelId;\n    } else if (this.endValue === value) {\n      return this._endDateLabelId;\n    }\n    if (this.comparisonStart !== null && this.comparisonEnd !== null) {\n      if (value === this.comparisonStart && value === this.comparisonEnd) {\n        return `${this._comparisonStartDateLabelId} ${this._comparisonEndDateLabelId}`;\n      } else if (value === this.comparisonStart) {\n        return this._comparisonStartDateLabelId;\n      } else if (value === this.comparisonEnd) {\n        return this._comparisonEndDateLabelId;\n      }\n    }\n    return null;\n  }\n  /**\n   * Event handler for when the user enters an element\n   * inside the calendar body (e.g. by hovering in or focus).\n   */\n  _enterHandler = event => {\n    if (this._skipNextFocus && event.type === 'focus') {\n      this._skipNextFocus = false;\n      return;\n    }\n    // We only need to hit the zone when we're selecting a range.\n    if (event.target && this.isRange) {\n      const cell = this._getCellFromElement(event.target);\n      if (cell) {\n        this._ngZone.run(() => this.previewChange.emit({\n          value: cell.enabled ? cell : null,\n          event\n        }));\n      }\n    }\n  };\n  _touchmoveHandler = event => {\n    if (!this.isRange) return;\n    const target = getActualTouchTarget(event);\n    const cell = target ? this._getCellFromElement(target) : null;\n    if (target !== event.target) {\n      this._didDragSinceMouseDown = true;\n    }\n    // If the initial target of the touch is a date cell, prevent default so\n    // that the move is not handled as a scroll.\n    if (getCellElement(event.target)) {\n      event.preventDefault();\n    }\n    this._ngZone.run(() => this.previewChange.emit({\n      value: cell?.enabled ? cell : null,\n      event\n    }));\n  };\n  /**\n   * Event handler for when the user's pointer leaves an element\n   * inside the calendar body (e.g. by hovering out or blurring).\n   */\n  _leaveHandler = event => {\n    // We only need to hit the zone when we're selecting a range.\n    if (this.previewEnd !== null && this.isRange) {\n      if (event.type !== 'blur') {\n        this._didDragSinceMouseDown = true;\n      }\n      // Only reset the preview end value when leaving cells. This looks better, because\n      // we have a gap between the cells and the rows and we don't want to remove the\n      // range just for it to show up again when the user moves a few pixels to the side.\n      if (event.target && this._getCellFromElement(event.target) && !(event.relatedTarget && this._getCellFromElement(event.relatedTarget))) {\n        this._ngZone.run(() => this.previewChange.emit({\n          value: null,\n          event\n        }));\n      }\n    }\n  };\n  /**\n   * Triggered on mousedown or touchstart on a date cell.\n   * Respsonsible for starting a drag sequence.\n   */\n  _mousedownHandler = event => {\n    if (!this.isRange) return;\n    this._didDragSinceMouseDown = false;\n    // Begin a drag if a cell within the current range was targeted.\n    const cell = event.target && this._getCellFromElement(event.target);\n    if (!cell || !this._isInRange(cell.compareValue)) {\n      return;\n    }\n    this._ngZone.run(() => {\n      this.dragStarted.emit({\n        value: cell.rawValue,\n        event\n      });\n    });\n  };\n  /** Triggered on mouseup anywhere. Respsonsible for ending a drag sequence. */\n  _mouseupHandler = event => {\n    if (!this.isRange) return;\n    const cellElement = getCellElement(event.target);\n    if (!cellElement) {\n      // Mouseup happened outside of datepicker. Cancel drag.\n      this._ngZone.run(() => {\n        this.dragEnded.emit({\n          value: null,\n          event\n        });\n      });\n      return;\n    }\n    if (cellElement.closest('.mat-calendar-body') !== this._elementRef.nativeElement) {\n      // Mouseup happened inside a different month instance.\n      // Allow it to handle the event.\n      return;\n    }\n    this._ngZone.run(() => {\n      const cell = this._getCellFromElement(cellElement);\n      this.dragEnded.emit({\n        value: cell?.rawValue ?? null,\n        event\n      });\n    });\n  };\n  /** Triggered on touchend anywhere. Respsonsible for ending a drag sequence. */\n  _touchendHandler = event => {\n    const target = getActualTouchTarget(event);\n    if (target) {\n      this._mouseupHandler({\n        target\n      });\n    }\n  };\n  /** Finds the MatCalendarCell that corresponds to a DOM node. */\n  _getCellFromElement(element) {\n    const cell = getCellElement(element);\n    if (cell) {\n      const row = cell.getAttribute('data-mat-row');\n      const col = cell.getAttribute('data-mat-col');\n      if (row && col) {\n        return this.rows[parseInt(row)][parseInt(col)];\n      }\n    }\n    return null;\n  }\n  static ɵfac = function MatCalendarBody_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatCalendarBody)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatCalendarBody,\n    selectors: [[\"\", \"mat-calendar-body\", \"\"]],\n    hostAttrs: [1, \"mat-calendar-body\"],\n    inputs: {\n      label: \"label\",\n      rows: \"rows\",\n      todayValue: \"todayValue\",\n      startValue: \"startValue\",\n      endValue: \"endValue\",\n      labelMinRequiredCells: \"labelMinRequiredCells\",\n      numCols: \"numCols\",\n      activeCell: \"activeCell\",\n      isRange: \"isRange\",\n      cellAspectRatio: \"cellAspectRatio\",\n      comparisonStart: \"comparisonStart\",\n      comparisonEnd: \"comparisonEnd\",\n      previewStart: \"previewStart\",\n      previewEnd: \"previewEnd\",\n      startDateAccessibleName: \"startDateAccessibleName\",\n      endDateAccessibleName: \"endDateAccessibleName\"\n    },\n    outputs: {\n      selectedValueChange: \"selectedValueChange\",\n      previewChange: \"previewChange\",\n      activeDateChange: \"activeDateChange\",\n      dragStarted: \"dragStarted\",\n      dragEnded: \"dragEnded\"\n    },\n    exportAs: [\"matCalendarBody\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    attrs: _c0,\n    decls: 11,\n    vars: 11,\n    consts: [[\"aria-hidden\", \"true\"], [\"role\", \"row\"], [1, \"mat-calendar-body-hidden-label\", 3, \"id\"], [1, \"mat-calendar-body-label\"], [1, \"mat-calendar-body-label\", 3, \"paddingTop\", \"paddingBottom\"], [\"role\", \"gridcell\", 1, \"mat-calendar-body-cell-container\", 3, \"width\", \"paddingTop\", \"paddingBottom\"], [\"role\", \"gridcell\", 1, \"mat-calendar-body-cell-container\"], [\"type\", \"button\", 1, \"mat-calendar-body-cell\", 3, \"click\", \"focus\", \"ngClass\", \"tabindex\"], [1, \"mat-calendar-body-cell-content\", \"mat-focus-indicator\"], [\"aria-hidden\", \"true\", 1, \"mat-calendar-body-cell-preview\"]],\n    template: function MatCalendarBody_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵconditionalCreate(0, MatCalendarBody_Conditional_0_Template, 3, 6, \"tr\", 0);\n        i0.ɵɵrepeaterCreate(1, MatCalendarBody_For_2_Template, 4, 1, \"tr\", 1, _forTrack0, true);\n        i0.ɵɵelementStart(3, \"span\", 2);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"span\", 2);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"span\", 2);\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"span\", 2);\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵconditional(ctx._firstRowOffset < ctx.labelMinRequiredCells ? 0 : -1);\n        i0.ɵɵadvance();\n        i0.ɵɵrepeater(ctx.rows);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"id\", ctx._startDateLabelId);\n        i0.ɵɵadvance();\n        i0.ɵɵtextInterpolate1(\" \", ctx.startDateAccessibleName, \"\\n\");\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"id\", ctx._endDateLabelId);\n        i0.ɵɵadvance();\n        i0.ɵɵtextInterpolate1(\" \", ctx.endDateAccessibleName, \"\\n\");\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"id\", ctx._comparisonStartDateLabelId);\n        i0.ɵɵadvance();\n        i0.ɵɵtextInterpolate2(\" \", ctx.comparisonDateAccessibleName, \" \", ctx.startDateAccessibleName, \"\\n\");\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"id\", ctx._comparisonEndDateLabelId);\n        i0.ɵɵadvance();\n        i0.ɵɵtextInterpolate2(\" \", ctx.comparisonDateAccessibleName, \" \", ctx.endDateAccessibleName, \"\\n\");\n      }\n    },\n    dependencies: [NgClass],\n    styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:var(--mat-datepicker-calendar-date-today-outline-color, var(--mat-sys-primary))}.mat-calendar-body-label{height:0;line-height:0;text-align:start;padding-left:4.7142857143%;padding-right:4.7142857143%;font-size:var(--mat-datepicker-calendar-body-label-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-body-label-text-weight, var(--mat-sys-title-small-weight));color:var(--mat-datepicker-calendar-body-label-text-color, var(--mat-sys-on-surface))}.mat-calendar-body-hidden-label{display:none}.mat-calendar-body-cell-container{position:relative;height:0;line-height:0}.mat-calendar-body-cell{position:absolute;top:0;left:0;width:100%;height:100%;background:none;text-align:center;outline:none;margin:0;font-family:var(--mat-datepicker-calendar-text-font, var(--mat-sys-body-medium-font));font-size:var(--mat-datepicker-calendar-text-size, var(--mat-sys-body-medium-size));-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-calendar-body-cell::-moz-focus-inner{border:0}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;display:block;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-start::after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,.mat-calendar-body-comparison-start::after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,[dir=rtl] .mat-calendar-body-comparison-start::after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,.mat-calendar-body-comparison-end::after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,[dir=rtl] .mat-calendar-body-comparison-end::after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:0;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start::after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start::after{width:90%}.mat-calendar-body-in-preview{color:var(--mat-datepicker-calendar-date-preview-state-outline-color, var(--mat-sys-primary))}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-disabled>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){color:var(--mat-datepicker-calendar-date-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-calendar-body-disabled>.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:var(--mat-datepicker-calendar-date-today-disabled-state-outline-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}@media(forced-colors: active){.mat-calendar-body-disabled{opacity:.5}}.mat-calendar-body-cell-content{top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px;color:var(--mat-datepicker-calendar-date-text-color, var(--mat-sys-on-surface));border-color:var(--mat-datepicker-calendar-date-outline-color, transparent)}.mat-calendar-body-cell-content.mat-focus-indicator{position:absolute}@media(forced-colors: active){.mat-calendar-body-cell-content{border:none}}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:var(--mat-datepicker-calendar-date-focus-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(hover: hover){.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:var(--mat-datepicker-calendar-date-hover-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}}.mat-calendar-body-selected{background-color:var(--mat-datepicker-calendar-date-selected-state-background-color, var(--mat-sys-primary));color:var(--mat-datepicker-calendar-date-selected-state-text-color, var(--mat-sys-on-primary))}.mat-calendar-body-disabled>.mat-calendar-body-selected{background-color:var(--mat-datepicker-calendar-date-selected-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-calendar-body-selected.mat-calendar-body-today{box-shadow:inset 0 0 0 1px var(--mat-datepicker-calendar-date-today-selected-state-outline-color, var(--mat-sys-primary))}.mat-calendar-body-in-range::before{background:var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container))}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range::before{background:var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container))}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range::before{background:var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container))}.mat-calendar-body-comparison-bridge-start::before,[dir=rtl] .mat-calendar-body-comparison-bridge-end::before{background:linear-gradient(to right, var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container)) 50%, var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container)) 50%)}.mat-calendar-body-comparison-bridge-end::before,[dir=rtl] .mat-calendar-body-comparison-bridge-start::before{background:linear-gradient(to left, var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container)) 50%, var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container)) 50%)}.mat-calendar-body-in-range>.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after{background:var(--mat-datepicker-calendar-date-in-overlap-range-state-background-color, var(--mat-sys-secondary-container))}.mat-calendar-body-comparison-identical.mat-calendar-body-selected,.mat-calendar-body-in-comparison-range>.mat-calendar-body-selected{background:var(--mat-datepicker-calendar-date-in-overlap-range-selected-state-background-color, var(--mat-sys-secondary))}@media(forced-colors: active){.mat-datepicker-popup:not(:empty),.mat-calendar-body-cell:not(.mat-calendar-body-in-range) .mat-calendar-body-selected{outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-selected{background:none}.mat-calendar-body-in-range::before,.mat-calendar-body-comparison-bridge-start::before,.mat-calendar-body-comparison-bridge-end::before{border-top:solid 1px;border-bottom:solid 1px}.mat-calendar-body-range-start::before{border-left:solid 1px}[dir=rtl] .mat-calendar-body-range-start::before{border-left:0;border-right:solid 1px}.mat-calendar-body-range-end::before{border-right:solid 1px}[dir=rtl] .mat-calendar-body-range-end::before{border-right:0;border-left:solid 1px}.mat-calendar-body-in-comparison-range::before{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-comparison-start::before{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-comparison-start::before{border-left:0;border-right:dashed 1px}.mat-calendar-body-comparison-end::before{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-comparison-end::before{border-right:0;border-left:dashed 1px}}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCalendarBody, [{\n    type: Component,\n    args: [{\n      selector: '[mat-calendar-body]',\n      host: {\n        'class': 'mat-calendar-body'\n      },\n      exportAs: 'matCalendarBody',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      imports: [NgClass],\n      template: \"<!--\\n  If there's not enough space in the first row, create a separate label row. We mark this row as\\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\\n-->\\n@if (_firstRowOffset < labelMinRequiredCells) {\\n  <tr aria-hidden=\\\"true\\\">\\n    <td class=\\\"mat-calendar-body-label\\\"\\n        [attr.colspan]=\\\"numCols\\\"\\n        [style.paddingTop]=\\\"_cellPadding\\\"\\n        [style.paddingBottom]=\\\"_cellPadding\\\">\\n      {{label}}\\n    </td>\\n  </tr>\\n}\\n\\n<!-- Create the first row separately so we can include a special spacer cell. -->\\n@for (row of rows; track _trackRow(row); let rowIndex = $index) {\\n  <tr role=\\\"row\\\">\\n    <!--\\n      This cell is purely decorative, but we can't put `aria-hidden` or `role=\\\"presentation\\\"` on it,\\n      because it throws off the week days for the rest of the row on NVDA. The aspect ratio of the\\n      table cells is maintained by setting the top and bottom padding as a percentage of the width\\n      (a variant of the trick described here: https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\\n    -->\\n    @if (rowIndex === 0 && _firstRowOffset) {\\n      <td\\n        class=\\\"mat-calendar-body-label\\\"\\n        [attr.colspan]=\\\"_firstRowOffset\\\"\\n        [style.paddingTop]=\\\"_cellPadding\\\"\\n        [style.paddingBottom]=\\\"_cellPadding\\\">\\n        {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\\n      </td>\\n    }\\n    <!--\\n      Each gridcell in the calendar contains a button, which signals to assistive technology that the\\n      cell is interactable, as well as the selection state via `aria-pressed`. See #23476 for\\n      background.\\n    -->\\n    @for (item of row; track item.id; let colIndex = $index) {\\n      <td\\n        role=\\\"gridcell\\\"\\n        class=\\\"mat-calendar-body-cell-container\\\"\\n        [style.width]=\\\"_cellWidth\\\"\\n        [style.paddingTop]=\\\"_cellPadding\\\"\\n        [style.paddingBottom]=\\\"_cellPadding\\\"\\n        [attr.data-mat-row]=\\\"rowIndex\\\"\\n        [attr.data-mat-col]=\\\"colIndex\\\"\\n      >\\n        <button\\n            type=\\\"button\\\"\\n            class=\\\"mat-calendar-body-cell\\\"\\n            [ngClass]=\\\"item.cssClasses\\\"\\n            [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\"\\n            [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\"\\n            [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\"\\n            [class.mat-calendar-body-range-start]=\\\"_isRangeStart(item.compareValue)\\\"\\n            [class.mat-calendar-body-range-end]=\\\"_isRangeEnd(item.compareValue)\\\"\\n            [class.mat-calendar-body-in-range]=\\\"_isInRange(item.compareValue)\\\"\\n            [class.mat-calendar-body-comparison-bridge-start]=\\\"_isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\\\"\\n            [class.mat-calendar-body-comparison-bridge-end]=\\\"_isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\\\"\\n            [class.mat-calendar-body-comparison-start]=\\\"_isComparisonStart(item.compareValue)\\\"\\n            [class.mat-calendar-body-comparison-end]=\\\"_isComparisonEnd(item.compareValue)\\\"\\n            [class.mat-calendar-body-in-comparison-range]=\\\"_isInComparisonRange(item.compareValue)\\\"\\n            [class.mat-calendar-body-preview-start]=\\\"_isPreviewStart(item.compareValue)\\\"\\n            [class.mat-calendar-body-preview-end]=\\\"_isPreviewEnd(item.compareValue)\\\"\\n            [class.mat-calendar-body-in-preview]=\\\"_isInPreview(item.compareValue)\\\"\\n            [attr.aria-label]=\\\"item.ariaLabel\\\"\\n            [attr.aria-disabled]=\\\"!item.enabled || null\\\"\\n            [attr.aria-pressed]=\\\"_isSelected(item.compareValue)\\\"\\n            [attr.aria-current]=\\\"todayValue === item.compareValue ? 'date' : null\\\"\\n            [attr.aria-describedby]=\\\"_getDescribedby(item.compareValue)\\\"\\n            (click)=\\\"_cellClicked(item, $event)\\\"\\n            (focus)=\\\"_emitActiveDateChange(item, $event)\\\">\\n            <span class=\\\"mat-calendar-body-cell-content mat-focus-indicator\\\"\\n              [class.mat-calendar-body-selected]=\\\"_isSelected(item.compareValue)\\\"\\n              [class.mat-calendar-body-comparison-identical]=\\\"_isComparisonIdentical(item.compareValue)\\\"\\n              [class.mat-calendar-body-today]=\\\"todayValue === item.compareValue\\\">\\n              {{item.displayValue}}\\n            </span>\\n            <span class=\\\"mat-calendar-body-cell-preview\\\" aria-hidden=\\\"true\\\"></span>\\n        </button>\\n      </td>\\n    }\\n  </tr>\\n}\\n\\n<span [id]=\\\"_startDateLabelId\\\" class=\\\"mat-calendar-body-hidden-label\\\">\\n  {{startDateAccessibleName}}\\n</span>\\n<span [id]=\\\"_endDateLabelId\\\" class=\\\"mat-calendar-body-hidden-label\\\">\\n  {{endDateAccessibleName}}\\n</span>\\n<span [id]=\\\"_comparisonStartDateLabelId\\\" class=\\\"mat-calendar-body-hidden-label\\\">\\n  {{comparisonDateAccessibleName}} {{startDateAccessibleName}}\\n</span>\\n<span [id]=\\\"_comparisonEndDateLabelId\\\" class=\\\"mat-calendar-body-hidden-label\\\">\\n  {{comparisonDateAccessibleName}} {{endDateAccessibleName}}\\n</span>\\n\",\n      styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:var(--mat-datepicker-calendar-date-today-outline-color, var(--mat-sys-primary))}.mat-calendar-body-label{height:0;line-height:0;text-align:start;padding-left:4.7142857143%;padding-right:4.7142857143%;font-size:var(--mat-datepicker-calendar-body-label-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-body-label-text-weight, var(--mat-sys-title-small-weight));color:var(--mat-datepicker-calendar-body-label-text-color, var(--mat-sys-on-surface))}.mat-calendar-body-hidden-label{display:none}.mat-calendar-body-cell-container{position:relative;height:0;line-height:0}.mat-calendar-body-cell{position:absolute;top:0;left:0;width:100%;height:100%;background:none;text-align:center;outline:none;margin:0;font-family:var(--mat-datepicker-calendar-text-font, var(--mat-sys-body-medium-font));font-size:var(--mat-datepicker-calendar-text-size, var(--mat-sys-body-medium-size));-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-calendar-body-cell::-moz-focus-inner{border:0}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;display:block;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-start::after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,.mat-calendar-body-comparison-start::after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,[dir=rtl] .mat-calendar-body-comparison-start::after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,.mat-calendar-body-comparison-end::after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,[dir=rtl] .mat-calendar-body-comparison-end::after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:0;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start::after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start::after{width:90%}.mat-calendar-body-in-preview{color:var(--mat-datepicker-calendar-date-preview-state-outline-color, var(--mat-sys-primary))}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-disabled>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){color:var(--mat-datepicker-calendar-date-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-calendar-body-disabled>.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:var(--mat-datepicker-calendar-date-today-disabled-state-outline-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}@media(forced-colors: active){.mat-calendar-body-disabled{opacity:.5}}.mat-calendar-body-cell-content{top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px;color:var(--mat-datepicker-calendar-date-text-color, var(--mat-sys-on-surface));border-color:var(--mat-datepicker-calendar-date-outline-color, transparent)}.mat-calendar-body-cell-content.mat-focus-indicator{position:absolute}@media(forced-colors: active){.mat-calendar-body-cell-content{border:none}}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:var(--mat-datepicker-calendar-date-focus-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(hover: hover){.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:var(--mat-datepicker-calendar-date-hover-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}}.mat-calendar-body-selected{background-color:var(--mat-datepicker-calendar-date-selected-state-background-color, var(--mat-sys-primary));color:var(--mat-datepicker-calendar-date-selected-state-text-color, var(--mat-sys-on-primary))}.mat-calendar-body-disabled>.mat-calendar-body-selected{background-color:var(--mat-datepicker-calendar-date-selected-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-calendar-body-selected.mat-calendar-body-today{box-shadow:inset 0 0 0 1px var(--mat-datepicker-calendar-date-today-selected-state-outline-color, var(--mat-sys-primary))}.mat-calendar-body-in-range::before{background:var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container))}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range::before{background:var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container))}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range::before{background:var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container))}.mat-calendar-body-comparison-bridge-start::before,[dir=rtl] .mat-calendar-body-comparison-bridge-end::before{background:linear-gradient(to right, var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container)) 50%, var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container)) 50%)}.mat-calendar-body-comparison-bridge-end::before,[dir=rtl] .mat-calendar-body-comparison-bridge-start::before{background:linear-gradient(to left, var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container)) 50%, var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container)) 50%)}.mat-calendar-body-in-range>.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after{background:var(--mat-datepicker-calendar-date-in-overlap-range-state-background-color, var(--mat-sys-secondary-container))}.mat-calendar-body-comparison-identical.mat-calendar-body-selected,.mat-calendar-body-in-comparison-range>.mat-calendar-body-selected{background:var(--mat-datepicker-calendar-date-in-overlap-range-selected-state-background-color, var(--mat-sys-secondary))}@media(forced-colors: active){.mat-datepicker-popup:not(:empty),.mat-calendar-body-cell:not(.mat-calendar-body-in-range) .mat-calendar-body-selected{outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-selected{background:none}.mat-calendar-body-in-range::before,.mat-calendar-body-comparison-bridge-start::before,.mat-calendar-body-comparison-bridge-end::before{border-top:solid 1px;border-bottom:solid 1px}.mat-calendar-body-range-start::before{border-left:solid 1px}[dir=rtl] .mat-calendar-body-range-start::before{border-left:0;border-right:solid 1px}.mat-calendar-body-range-end::before{border-right:solid 1px}[dir=rtl] .mat-calendar-body-range-end::before{border-right:0;border-left:solid 1px}.mat-calendar-body-in-comparison-range::before{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-comparison-start::before{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-comparison-start::before{border-left:0;border-right:dashed 1px}.mat-calendar-body-comparison-end::before{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-comparison-end::before{border-right:0;border-left:dashed 1px}}\\n\"]\n    }]\n  }], () => [], {\n    label: [{\n      type: Input\n    }],\n    rows: [{\n      type: Input\n    }],\n    todayValue: [{\n      type: Input\n    }],\n    startValue: [{\n      type: Input\n    }],\n    endValue: [{\n      type: Input\n    }],\n    labelMinRequiredCells: [{\n      type: Input\n    }],\n    numCols: [{\n      type: Input\n    }],\n    activeCell: [{\n      type: Input\n    }],\n    isRange: [{\n      type: Input\n    }],\n    cellAspectRatio: [{\n      type: Input\n    }],\n    comparisonStart: [{\n      type: Input\n    }],\n    comparisonEnd: [{\n      type: Input\n    }],\n    previewStart: [{\n      type: Input\n    }],\n    previewEnd: [{\n      type: Input\n    }],\n    startDateAccessibleName: [{\n      type: Input\n    }],\n    endDateAccessibleName: [{\n      type: Input\n    }],\n    selectedValueChange: [{\n      type: Output\n    }],\n    previewChange: [{\n      type: Output\n    }],\n    activeDateChange: [{\n      type: Output\n    }],\n    dragStarted: [{\n      type: Output\n    }],\n    dragEnded: [{\n      type: Output\n    }]\n  });\n})();\n/** Checks whether a node is a table cell element. */\nfunction isTableCell(node) {\n  return node?.nodeName === 'TD';\n}\n/**\n * Gets the date table cell element that is or contains the specified element.\n * Or returns null if element is not part of a date cell.\n */\nfunction getCellElement(element) {\n  let cell;\n  if (isTableCell(element)) {\n    cell = element;\n  } else if (isTableCell(element.parentNode)) {\n    cell = element.parentNode;\n  } else if (isTableCell(element.parentNode?.parentNode)) {\n    cell = element.parentNode.parentNode;\n  }\n  return cell?.getAttribute('data-mat-row') != null ? cell : null;\n}\n/** Checks whether a value is the start of a range. */\nfunction isStart(value, start, end) {\n  return end !== null && start !== end && value < end && value === start;\n}\n/** Checks whether a value is the end of a range. */\nfunction isEnd(value, start, end) {\n  return start !== null && start !== end && value >= start && value === end;\n}\n/** Checks whether a value is inside of a range. */\nfunction isInRange(value, start, end, rangeEnabled) {\n  return rangeEnabled && start !== null && end !== null && start !== end && value >= start && value <= end;\n}\n/**\n * Extracts the element that actually corresponds to a touch event's location\n * (rather than the element that initiated the sequence of touch events).\n */\nfunction getActualTouchTarget(event) {\n  const touchLocation = event.changedTouches[0];\n  return document.elementFromPoint(touchLocation.clientX, touchLocation.clientY);\n}\n\n/** A class representing a range of dates. */\nclass DateRange {\n  start;\n  end;\n  /**\n   * Ensures that objects with a `start` and `end` property can't be assigned to a variable that\n   * expects a `DateRange`\n   */\n  // tslint:disable-next-line:no-unused-variable\n  _disableStructuralEquivalency;\n  constructor(/** The start date of the range. */\n  start, /** The end date of the range. */\n  end) {\n    this.start = start;\n    this.end = end;\n  }\n}\n/**\n * A selection model containing a date selection.\n * @docs-private\n */\nclass MatDateSelectionModel {\n  selection;\n  _adapter;\n  _selectionChanged = new Subject();\n  /** Emits when the selection has changed. */\n  selectionChanged = this._selectionChanged;\n  constructor(/** The current selection. */\n  selection, _adapter) {\n    this.selection = selection;\n    this._adapter = _adapter;\n    this.selection = selection;\n  }\n  /**\n   * Updates the current selection in the model.\n   * @param value New selection that should be assigned.\n   * @param source Object that triggered the selection change.\n   */\n  updateSelection(value, source) {\n    const oldValue = this.selection;\n    this.selection = value;\n    this._selectionChanged.next({\n      selection: value,\n      source,\n      oldValue\n    });\n  }\n  ngOnDestroy() {\n    this._selectionChanged.complete();\n  }\n  _isValidDateInstance(date) {\n    return this._adapter.isDateInstance(date) && this._adapter.isValid(date);\n  }\n  static ɵfac = function MatDateSelectionModel_Factory(__ngFactoryType__) {\n    i0.ɵɵinvalidFactory();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatDateSelectionModel,\n    factory: MatDateSelectionModel.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDateSelectionModel, [{\n    type: Injectable\n  }], () => [{\n    type: undefined\n  }, {\n    type: DateAdapter\n  }], null);\n})();\n/**\n * A selection model that contains a single date.\n * @docs-private\n */\nclass MatSingleDateSelectionModel extends MatDateSelectionModel {\n  constructor(adapter) {\n    super(null, adapter);\n  }\n  /**\n   * Adds a date to the current selection. In the case of a single date selection, the added date\n   * simply overwrites the previous selection\n   */\n  add(date) {\n    super.updateSelection(date, this);\n  }\n  /** Checks whether the current selection is valid. */\n  isValid() {\n    return this.selection != null && this._isValidDateInstance(this.selection);\n  }\n  /**\n   * Checks whether the current selection is complete. In the case of a single date selection, this\n   * is true if the current selection is not null.\n   */\n  isComplete() {\n    return this.selection != null;\n  }\n  /** Clones the selection model. */\n  clone() {\n    const clone = new MatSingleDateSelectionModel(this._adapter);\n    clone.updateSelection(this.selection, this);\n    return clone;\n  }\n  static ɵfac = function MatSingleDateSelectionModel_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatSingleDateSelectionModel)(i0.ɵɵinject(DateAdapter));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatSingleDateSelectionModel,\n    factory: MatSingleDateSelectionModel.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSingleDateSelectionModel, [{\n    type: Injectable\n  }], () => [{\n    type: DateAdapter\n  }], null);\n})();\n/**\n * A selection model that contains a date range.\n * @docs-private\n */\nclass MatRangeDateSelectionModel extends MatDateSelectionModel {\n  constructor(adapter) {\n    super(new DateRange(null, null), adapter);\n  }\n  /**\n   * Adds a date to the current selection. In the case of a date range selection, the added date\n   * fills in the next `null` value in the range. If both the start and the end already have a date,\n   * the selection is reset so that the given date is the new `start` and the `end` is null.\n   */\n  add(date) {\n    let {\n      start,\n      end\n    } = this.selection;\n    if (start == null) {\n      start = date;\n    } else if (end == null) {\n      end = date;\n    } else {\n      start = date;\n      end = null;\n    }\n    super.updateSelection(new DateRange(start, end), this);\n  }\n  /** Checks whether the current selection is valid. */\n  isValid() {\n    const {\n      start,\n      end\n    } = this.selection;\n    // Empty ranges are valid.\n    if (start == null && end == null) {\n      return true;\n    }\n    // Complete ranges are only valid if both dates are valid and the start is before the end.\n    if (start != null && end != null) {\n      return this._isValidDateInstance(start) && this._isValidDateInstance(end) && this._adapter.compareDate(start, end) <= 0;\n    }\n    // Partial ranges are valid if the start/end is valid.\n    return (start == null || this._isValidDateInstance(start)) && (end == null || this._isValidDateInstance(end));\n  }\n  /**\n   * Checks whether the current selection is complete. In the case of a date range selection, this\n   * is true if the current selection has a non-null `start` and `end`.\n   */\n  isComplete() {\n    return this.selection.start != null && this.selection.end != null;\n  }\n  /** Clones the selection model. */\n  clone() {\n    const clone = new MatRangeDateSelectionModel(this._adapter);\n    clone.updateSelection(this.selection, this);\n    return clone;\n  }\n  static ɵfac = function MatRangeDateSelectionModel_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatRangeDateSelectionModel)(i0.ɵɵinject(DateAdapter));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatRangeDateSelectionModel,\n    factory: MatRangeDateSelectionModel.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRangeDateSelectionModel, [{\n    type: Injectable\n  }], () => [{\n    type: DateAdapter\n  }], null);\n})();\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n  return parent || new MatSingleDateSelectionModel(adapter);\n}\n/**\n * Used to provide a single selection model to a component.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY\n};\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n  return parent || new MatRangeDateSelectionModel(adapter);\n}\n/**\n * Used to provide a range selection model to a component.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_RANGE_DATE_SELECTION_MODEL_FACTORY\n};\n\n/** Injection token used to customize the date range selection behavior. */\nconst MAT_DATE_RANGE_SELECTION_STRATEGY = new InjectionToken('MAT_DATE_RANGE_SELECTION_STRATEGY');\n/** Provides the default date range selection behavior. */\nclass DefaultMatCalendarRangeStrategy {\n  _dateAdapter;\n  constructor(_dateAdapter) {\n    this._dateAdapter = _dateAdapter;\n  }\n  selectionFinished(date, currentRange) {\n    let {\n      start,\n      end\n    } = currentRange;\n    if (start == null) {\n      start = date;\n    } else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\n      end = date;\n    } else {\n      start = date;\n      end = null;\n    }\n    return new DateRange(start, end);\n  }\n  createPreview(activeDate, currentRange) {\n    let start = null;\n    let end = null;\n    if (currentRange.start && !currentRange.end && activeDate) {\n      start = currentRange.start;\n      end = activeDate;\n    }\n    return new DateRange(start, end);\n  }\n  createDrag(dragOrigin, originalRange, newDate) {\n    let start = originalRange.start;\n    let end = originalRange.end;\n    if (!start || !end) {\n      // Can't drag from an incomplete range.\n      return null;\n    }\n    const adapter = this._dateAdapter;\n    const isRange = adapter.compareDate(start, end) !== 0;\n    const diffYears = adapter.getYear(newDate) - adapter.getYear(dragOrigin);\n    const diffMonths = adapter.getMonth(newDate) - adapter.getMonth(dragOrigin);\n    const diffDays = adapter.getDate(newDate) - adapter.getDate(dragOrigin);\n    if (isRange && adapter.sameDate(dragOrigin, originalRange.start)) {\n      start = newDate;\n      if (adapter.compareDate(newDate, end) > 0) {\n        end = adapter.addCalendarYears(end, diffYears);\n        end = adapter.addCalendarMonths(end, diffMonths);\n        end = adapter.addCalendarDays(end, diffDays);\n      }\n    } else if (isRange && adapter.sameDate(dragOrigin, originalRange.end)) {\n      end = newDate;\n      if (adapter.compareDate(newDate, start) < 0) {\n        start = adapter.addCalendarYears(start, diffYears);\n        start = adapter.addCalendarMonths(start, diffMonths);\n        start = adapter.addCalendarDays(start, diffDays);\n      }\n    } else {\n      start = adapter.addCalendarYears(start, diffYears);\n      start = adapter.addCalendarMonths(start, diffMonths);\n      start = adapter.addCalendarDays(start, diffDays);\n      end = adapter.addCalendarYears(end, diffYears);\n      end = adapter.addCalendarMonths(end, diffMonths);\n      end = adapter.addCalendarDays(end, diffDays);\n    }\n    return new DateRange(start, end);\n  }\n  static ɵfac = function DefaultMatCalendarRangeStrategy_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || DefaultMatCalendarRangeStrategy)(i0.ɵɵinject(DateAdapter));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DefaultMatCalendarRangeStrategy,\n    factory: DefaultMatCalendarRangeStrategy.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultMatCalendarRangeStrategy, [{\n    type: Injectable\n  }], () => [{\n    type: DateAdapter\n  }], null);\n})();\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY(parent, adapter) {\n  return parent || new DefaultMatCalendarRangeStrategy(adapter);\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_CALENDAR_RANGE_STRATEGY_PROVIDER = {\n  provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n  deps: [[new Optional(), new SkipSelf(), MAT_DATE_RANGE_SELECTION_STRATEGY], DateAdapter],\n  useFactory: MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY\n};\nconst DAYS_PER_WEEK = 7;\nlet uniqueIdCounter = 0;\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\nclass MatMonthView {\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _dateFormats = inject(MAT_DATE_FORMATS, {\n    optional: true\n  });\n  _dateAdapter = inject(DateAdapter, {\n    optional: true\n  });\n  _dir = inject(Directionality, {\n    optional: true\n  });\n  _rangeStrategy = inject(MAT_DATE_RANGE_SELECTION_STRATEGY, {\n    optional: true\n  });\n  _rerenderSubscription = Subscription.EMPTY;\n  /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n  _selectionKeyPressed;\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  get activeDate() {\n    return this._activeDate;\n  }\n  set activeDate(value) {\n    const oldActiveDate = this._activeDate;\n    const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  _activeDate;\n  /** The currently selected date. */\n  get selected() {\n    return this._selected;\n  }\n  set selected(value) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    this._setRanges(this._selected);\n  }\n  _selected;\n  /** The minimum selectable date. */\n  get minDate() {\n    return this._minDate;\n  }\n  set minDate(value) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _minDate;\n  /** The maximum selectable date. */\n  get maxDate() {\n    return this._maxDate;\n  }\n  set maxDate(value) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _maxDate;\n  /** Function used to filter which dates are selectable. */\n  dateFilter;\n  /** Function that can be used to add custom CSS classes to dates. */\n  dateClass;\n  /** Start of the comparison range. */\n  comparisonStart;\n  /** End of the comparison range. */\n  comparisonEnd;\n  /** ARIA Accessible name of the `<input matStartDate/>` */\n  startDateAccessibleName;\n  /** ARIA Accessible name of the `<input matEndDate/>` */\n  endDateAccessibleName;\n  /** Origin of active drag, or null when dragging is not active. */\n  activeDrag = null;\n  /** Emits when a new date is selected. */\n  selectedChange = new EventEmitter();\n  /** Emits when any date is selected. */\n  _userSelection = new EventEmitter();\n  /** Emits when the user initiates a date range drag via mouse or touch. */\n  dragStarted = new EventEmitter();\n  /**\n   * Emits when the user completes or cancels a date range drag.\n   * Emits null when the drag was canceled or the newly selected date range if completed.\n   */\n  dragEnded = new EventEmitter();\n  /** Emits when any date is activated. */\n  activeDateChange = new EventEmitter();\n  /** The body of calendar table */\n  _matCalendarBody;\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel;\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks;\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset;\n  /** Start value of the currently-shown date range. */\n  _rangeStart;\n  /** End value of the currently-shown date range. */\n  _rangeEnd;\n  /** Start value of the currently-shown comparison date range. */\n  _comparisonRangeStart;\n  /** End value of the currently-shown comparison date range. */\n  _comparisonRangeEnd;\n  /** Start of the preview range. */\n  _previewStart;\n  /** End of the preview range. */\n  _previewEnd;\n  /** Whether the user is currently selecting a range of dates. */\n  _isRange;\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate;\n  /** The names of the weekdays. */\n  _weekdays;\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n    this._activeDate = this._dateAdapter.today();\n  }\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges.pipe(startWith(null)).subscribe(() => this._init());\n  }\n  ngOnChanges(changes) {\n    const comparisonChange = changes['comparisonStart'] || changes['comparisonEnd'];\n    if (comparisonChange && !comparisonChange.firstChange) {\n      this._setRanges(this.selected);\n    }\n    if (changes['activeDrag'] && !this.activeDrag) {\n      this._clearPreview();\n    }\n  }\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n  /** Handles when a new date is selected. */\n  _dateSelected(event) {\n    const date = event.value;\n    const selectedDate = this._getDateFromDayOfMonth(date);\n    let rangeStartDate;\n    let rangeEndDate;\n    if (this._selected instanceof DateRange) {\n      rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\n      rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\n    } else {\n      rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\n    }\n    if (rangeStartDate !== date || rangeEndDate !== date) {\n      this.selectedChange.emit(selectedDate);\n    }\n    this._userSelection.emit({\n      value: selectedDate,\n      event: event.event\n    });\n    this._clearPreview();\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Takes the index of a calendar body cell wrapped in an event as argument. For the date that\n   * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n   * that date.\n   *\n   * This function is used to match each component's model of the active date with the calendar\n   * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n   * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n   * updated value asynchronously via the `activeCell` Input.\n   */\n  _updateActiveDate(event) {\n    const month = event.value;\n    const oldActiveDate = this._activeDate;\n    this.activeDate = this._getDateFromDayOfMonth(month);\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this._activeDate);\n    }\n  }\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event) {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, -1) : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, 1) : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._selectionKeyPressed = true;\n        if (this._canSelect(this._activeDate)) {\n          // Prevent unexpected default actions such as form submission.\n          // Note that we only prevent the default action here while the selection happens in\n          // `keyup` below. We can't do the selection here, because it can cause the calendar to\n          // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n          // because it's too late (see #23305).\n          event.preventDefault();\n        }\n        return;\n      case ESCAPE:\n        // Abort the current range selection if the user presses escape mid-selection.\n        if (this._previewEnd != null && !hasModifierKey(event)) {\n          this._clearPreview();\n          // If a drag is in progress, cancel the drag without changing the\n          // current selection.\n          if (this.activeDrag) {\n            this.dragEnded.emit({\n              value: null,\n              event\n            });\n          } else {\n            this.selectedChange.emit(null);\n            this._userSelection.emit({\n              value: null,\n              event\n            });\n          }\n          event.preventDefault();\n          event.stopPropagation(); // Prevents the overlay from closing.\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n      this._focusActiveCellAfterViewChecked();\n    }\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n  /** Handles keyup events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeyup(event) {\n    if (event.keyCode === SPACE || event.keyCode === ENTER) {\n      if (this._selectionKeyPressed && this._canSelect(this._activeDate)) {\n        this._dateSelected({\n          value: this._dateAdapter.getDate(this._activeDate),\n          event\n        });\n      }\n      this._selectionKeyPressed = false;\n    }\n  }\n  /** Initializes this month view. */\n  _init() {\n    this._setRanges(this.selected);\n    this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\n    this._monthLabel = this._dateFormats.display.monthLabel ? this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthLabel) : this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset = (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell(movePreview) {\n    this._matCalendarBody._focusActiveCell(movePreview);\n  }\n  /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n  _focusActiveCellAfterViewChecked() {\n    this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n  }\n  /** Called when the user has activated a new cell and the preview needs to be updated. */\n  _previewChanged({\n    event,\n    value: cell\n  }) {\n    if (this._rangeStrategy) {\n      // We can assume that this will be a range, because preview\n      // events aren't fired for single date selections.\n      const value = cell ? cell.rawValue : null;\n      const previewRange = this._rangeStrategy.createPreview(value, this.selected, event);\n      this._previewStart = this._getCellCompareValue(previewRange.start);\n      this._previewEnd = this._getCellCompareValue(previewRange.end);\n      if (this.activeDrag && value) {\n        const dragRange = this._rangeStrategy.createDrag?.(this.activeDrag.value, this.selected, value, event);\n        if (dragRange) {\n          this._previewStart = this._getCellCompareValue(dragRange.start);\n          this._previewEnd = this._getCellCompareValue(dragRange.end);\n        }\n      }\n      // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\n      // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\n      // when navigating one month back using the keyboard which will cause this handler\n      // to throw a \"changed after checked\" error when updating the preview state.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Called when the user has ended a drag. If the drag/drop was successful,\n   * computes and emits the new range selection.\n   */\n  _dragEnded(event) {\n    if (!this.activeDrag) return;\n    if (event.value) {\n      // Propagate drag effect\n      const dragDropResult = this._rangeStrategy?.createDrag?.(this.activeDrag.value, this.selected, event.value, event.event);\n      this.dragEnded.emit({\n        value: dragDropResult ?? null,\n        event: event.event\n      });\n    } else {\n      this.dragEnded.emit({\n        value: null,\n        event: event.event\n      });\n    }\n  }\n  /**\n   * Takes a day of the month and returns a new date in the same month and year as the currently\n   *  active date. The returned date will have the same day of the month as the argument date.\n   */\n  _getDateFromDayOfMonth(dayOfMonth) {\n    return this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), dayOfMonth);\n  }\n  /** Initializes the weekdays. */\n  _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {\n        long,\n        narrow: narrowWeekdays[i],\n        id: uniqueIdCounter++\n      };\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n  /** Creates MatCalendarCells for the dates in this month. */\n  _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date, 'month') : undefined;\n      this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses, this._getCellCompareValue(date), date));\n    }\n  }\n  /** Date filter for the month */\n  _shouldEnableDate(date) {\n    return !!date && (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) && (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) && (!this.dateFilter || this.dateFilter(date));\n  }\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  _getDateInCurrentMonth(date) {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;\n  }\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  _hasSameMonthAndYear(d1, d2) {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) && this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n  /** Gets the value that will be used to one cell to another. */\n  _getCellCompareValue(date) {\n    if (date) {\n      // We use the time since the Unix epoch to compare dates in this view, rather than the\n      // cell values, because we need to support ranges that span across multiple months/years.\n      const year = this._dateAdapter.getYear(date);\n      const month = this._dateAdapter.getMonth(date);\n      const day = this._dateAdapter.getDate(date);\n      return new Date(year, month, day).getTime();\n    }\n    return null;\n  }\n  /** Determines whether the user has the RTL layout direction. */\n  _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n  /** Sets the current range based on a model value. */\n  _setRanges(selectedValue) {\n    if (selectedValue instanceof DateRange) {\n      this._rangeStart = this._getCellCompareValue(selectedValue.start);\n      this._rangeEnd = this._getCellCompareValue(selectedValue.end);\n      this._isRange = true;\n    } else {\n      this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\n      this._isRange = false;\n    }\n    this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\n    this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\n  }\n  /** Gets whether a date can be selected in the month view. */\n  _canSelect(date) {\n    return !this.dateFilter || this.dateFilter(date);\n  }\n  /** Clears out preview state. */\n  _clearPreview() {\n    this._previewStart = this._previewEnd = null;\n  }\n  static ɵfac = function MatMonthView_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatMonthView)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatMonthView,\n    selectors: [[\"mat-month-view\"]],\n    viewQuery: function MatMonthView_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatCalendarBody, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n      }\n    },\n    inputs: {\n      activeDate: \"activeDate\",\n      selected: \"selected\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      dateFilter: \"dateFilter\",\n      dateClass: \"dateClass\",\n      comparisonStart: \"comparisonStart\",\n      comparisonEnd: \"comparisonEnd\",\n      startDateAccessibleName: \"startDateAccessibleName\",\n      endDateAccessibleName: \"endDateAccessibleName\",\n      activeDrag: \"activeDrag\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\",\n      _userSelection: \"_userSelection\",\n      dragStarted: \"dragStarted\",\n      dragEnded: \"dragEnded\",\n      activeDateChange: \"activeDateChange\"\n    },\n    exportAs: [\"matMonthView\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 8,\n    vars: 14,\n    consts: [[\"role\", \"grid\", 1, \"mat-calendar-table\"], [1, \"mat-calendar-table-header\"], [\"scope\", \"col\"], [\"aria-hidden\", \"true\"], [\"colspan\", \"7\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"selectedValueChange\", \"activeDateChange\", \"previewChange\", \"dragStarted\", \"dragEnded\", \"keyup\", \"keydown\", \"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\", \"isRange\", \"labelMinRequiredCells\", \"activeCell\", \"startDateAccessibleName\", \"endDateAccessibleName\"], [1, \"cdk-visually-hidden\"]],\n    template: function MatMonthView_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\", 0)(1, \"thead\", 1)(2, \"tr\");\n        i0.ɵɵrepeaterCreate(3, MatMonthView_For_4_Template, 5, 2, \"th\", 2, _forTrack1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"tr\", 3);\n        i0.ɵɵelement(6, \"th\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"tbody\", 5);\n        i0.ɵɵlistener(\"selectedValueChange\", function MatMonthView_Template_tbody_selectedValueChange_7_listener($event) {\n          return ctx._dateSelected($event);\n        })(\"activeDateChange\", function MatMonthView_Template_tbody_activeDateChange_7_listener($event) {\n          return ctx._updateActiveDate($event);\n        })(\"previewChange\", function MatMonthView_Template_tbody_previewChange_7_listener($event) {\n          return ctx._previewChanged($event);\n        })(\"dragStarted\", function MatMonthView_Template_tbody_dragStarted_7_listener($event) {\n          return ctx.dragStarted.emit($event);\n        })(\"dragEnded\", function MatMonthView_Template_tbody_dragEnded_7_listener($event) {\n          return ctx._dragEnded($event);\n        })(\"keyup\", function MatMonthView_Template_tbody_keyup_7_listener($event) {\n          return ctx._handleCalendarBodyKeyup($event);\n        })(\"keydown\", function MatMonthView_Template_tbody_keydown_7_listener($event) {\n          return ctx._handleCalendarBodyKeydown($event);\n        });\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵrepeater(ctx._weekdays);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"label\", ctx._monthLabel)(\"rows\", ctx._weeks)(\"todayValue\", ctx._todayDate)(\"startValue\", ctx._rangeStart)(\"endValue\", ctx._rangeEnd)(\"comparisonStart\", ctx._comparisonRangeStart)(\"comparisonEnd\", ctx._comparisonRangeEnd)(\"previewStart\", ctx._previewStart)(\"previewEnd\", ctx._previewEnd)(\"isRange\", ctx._isRange)(\"labelMinRequiredCells\", 3)(\"activeCell\", ctx._dateAdapter.getDate(ctx.activeDate) - 1)(\"startDateAccessibleName\", ctx.startDateAccessibleName)(\"endDateAccessibleName\", ctx.endDateAccessibleName);\n      }\n    },\n    dependencies: [MatCalendarBody],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMonthView, [{\n    type: Component,\n    args: [{\n      selector: 'mat-month-view',\n      exportAs: 'matMonthView',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      imports: [MatCalendarBody],\n      template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead class=\\\"mat-calendar-table-header\\\">\\n    <tr>\\n      @for (day of _weekdays; track day.id) {\\n        <th scope=\\\"col\\\">\\n          <span class=\\\"cdk-visually-hidden\\\">{{day.long}}</span>\\n          <span aria-hidden=\\\"true\\\">{{day.narrow}}</span>\\n        </th>\\n      }\\n    </tr>\\n    <tr aria-hidden=\\\"true\\\"><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_monthLabel\\\"\\n         [rows]=\\\"_weeks\\\"\\n         [todayValue]=\\\"_todayDate!\\\"\\n         [startValue]=\\\"_rangeStart!\\\"\\n         [endValue]=\\\"_rangeEnd!\\\"\\n         [comparisonStart]=\\\"_comparisonRangeStart\\\"\\n         [comparisonEnd]=\\\"_comparisonRangeEnd\\\"\\n         [previewStart]=\\\"_previewStart\\\"\\n         [previewEnd]=\\\"_previewEnd\\\"\\n         [isRange]=\\\"_isRange\\\"\\n         [labelMinRequiredCells]=\\\"3\\\"\\n         [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\"\\n         [startDateAccessibleName]=\\\"startDateAccessibleName\\\"\\n         [endDateAccessibleName]=\\\"endDateAccessibleName\\\"\\n         (selectedValueChange)=\\\"_dateSelected($event)\\\"\\n         (activeDateChange)=\\\"_updateActiveDate($event)\\\"\\n         (previewChange)=\\\"_previewChanged($event)\\\"\\n         (dragStarted)=\\\"dragStarted.emit($event)\\\"\\n         (dragEnded)=\\\"_dragEnded($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\"\n    }]\n  }], () => [], {\n    activeDate: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    dateClass: [{\n      type: Input\n    }],\n    comparisonStart: [{\n      type: Input\n    }],\n    comparisonEnd: [{\n      type: Input\n    }],\n    startDateAccessibleName: [{\n      type: Input\n    }],\n    endDateAccessibleName: [{\n      type: Input\n    }],\n    activeDrag: [{\n      type: Input\n    }],\n    selectedChange: [{\n      type: Output\n    }],\n    _userSelection: [{\n      type: Output\n    }],\n    dragStarted: [{\n      type: Output\n    }],\n    dragEnded: [{\n      type: Output\n    }],\n    activeDateChange: [{\n      type: Output\n    }],\n    _matCalendarBody: [{\n      type: ViewChild,\n      args: [MatCalendarBody]\n    }]\n  });\n})();\nconst yearsPerPage = 24;\nconst yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\nclass MatMultiYearView {\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _dateAdapter = inject(DateAdapter, {\n    optional: true\n  });\n  _dir = inject(Directionality, {\n    optional: true\n  });\n  _rerenderSubscription = Subscription.EMPTY;\n  /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n  _selectionKeyPressed;\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  get activeDate() {\n    return this._activeDate;\n  }\n  set activeDate(value) {\n    let oldActiveDate = this._activeDate;\n    const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!isSameMultiYearView(this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  _activeDate;\n  /** The currently selected date. */\n  get selected() {\n    return this._selected;\n  }\n  set selected(value) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    this._setSelectedYear(value);\n  }\n  _selected;\n  /** The minimum selectable date. */\n  get minDate() {\n    return this._minDate;\n  }\n  set minDate(value) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _minDate;\n  /** The maximum selectable date. */\n  get maxDate() {\n    return this._maxDate;\n  }\n  set maxDate(value) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _maxDate;\n  /** A function used to filter which dates are selectable. */\n  dateFilter;\n  /** Function that can be used to add custom CSS classes to date cells. */\n  dateClass;\n  /** Emits when a new year is selected. */\n  selectedChange = new EventEmitter();\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  yearSelected = new EventEmitter();\n  /** Emits when any date is activated. */\n  activeDateChange = new EventEmitter();\n  /** The body of calendar table */\n  _matCalendarBody;\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years;\n  /** The year that today falls on. */\n  _todayYear;\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear;\n  constructor() {\n    if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    this._activeDate = this._dateAdapter.today();\n  }\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges.pipe(startWith(null)).subscribe(() => this._init());\n  }\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n    this._years = [];\n    for (let i = 0, row = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Handles when a new year is selected. */\n  _yearSelected(event) {\n    const year = event.value;\n    const selectedYear = this._dateAdapter.createDate(year, 0, 1);\n    const selectedDate = this._getDateFromYear(year);\n    this.yearSelected.emit(selectedYear);\n    this.selectedChange.emit(selectedDate);\n  }\n  /**\n   * Takes the index of a calendar body cell wrapped in an event as argument. For the date that\n   * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n   * that date.\n   *\n   * This function is used to match each component's model of the active date with the calendar\n   * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n   * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n   * updated value asynchronously via the `activeCell` Input.\n   */\n  _updateActiveDate(event) {\n    const year = event.value;\n    const oldActiveDate = this._activeDate;\n    this.activeDate = this._getDateFromYear(year);\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n  }\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event) {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        // Note that we only prevent the default action here while the selection happens in\n        // `keyup` below. We can't do the selection here, because it can cause the calendar to\n        // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n        // because it's too late (see #23305).\n        this._selectionKeyPressed = true;\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n    this._focusActiveCellAfterViewChecked();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n  /** Handles keyup events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeyup(event) {\n    if (event.keyCode === SPACE || event.keyCode === ENTER) {\n      if (this._selectionKeyPressed) {\n        this._yearSelected({\n          value: this._dateAdapter.getYear(this._activeDate),\n          event\n        });\n      }\n      this._selectionKeyPressed = false;\n    }\n  }\n  _getActiveCell() {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n  /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n  _focusActiveCellAfterViewChecked() {\n    this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n  }\n  /**\n   * Takes a year and returns a new date on the same day and month as the currently active date\n   *  The returned date will have the same year as the argument date.\n   */\n  _getDateFromYear(year) {\n    const activeMonth = this._dateAdapter.getMonth(this.activeDate);\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, activeMonth, 1));\n    const normalizedDate = this._dateAdapter.createDate(year, activeMonth, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth));\n    return normalizedDate;\n  }\n  /** Creates an MatCalendarCell for the given year. */\n  _createCellForYear(year) {\n    const date = this._dateAdapter.createDate(year, 0, 1);\n    const yearName = this._dateAdapter.getYearName(date);\n    const cellClasses = this.dateClass ? this.dateClass(date, 'multi-year') : undefined;\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year), cellClasses);\n  }\n  /** Whether the given year is enabled. */\n  _shouldEnableYear(year) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null || this.maxDate && year > this._dateAdapter.getYear(this.maxDate) || this.minDate && year < this._dateAdapter.getYear(this.minDate)) {\n      return false;\n    }\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /** Determines whether the user has the RTL layout direction. */\n  _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n  /** Sets the currently-highlighted year based on a model value. */\n  _setSelectedYear(value) {\n    this._selectedYear = null;\n    if (value instanceof DateRange) {\n      const displayValue = value.start || value.end;\n      if (displayValue) {\n        this._selectedYear = this._dateAdapter.getYear(displayValue);\n      }\n    } else if (value) {\n      this._selectedYear = this._dateAdapter.getYear(value);\n    }\n  }\n  static ɵfac = function MatMultiYearView_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatMultiYearView)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatMultiYearView,\n    selectors: [[\"mat-multi-year-view\"]],\n    viewQuery: function MatMultiYearView_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatCalendarBody, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n      }\n    },\n    inputs: {\n      activeDate: \"activeDate\",\n      selected: \"selected\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      dateFilter: \"dateFilter\",\n      dateClass: \"dateClass\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\",\n      yearSelected: \"yearSelected\",\n      activeDateChange: \"activeDateChange\"\n    },\n    exportAs: [\"matMultiYearView\"],\n    decls: 5,\n    vars: 7,\n    consts: [[\"role\", \"grid\", 1, \"mat-calendar-table\"], [\"aria-hidden\", \"true\", 1, \"mat-calendar-table-header\"], [\"colspan\", \"4\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"selectedValueChange\", \"activeDateChange\", \"keyup\", \"keydown\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"numCols\", \"cellAspectRatio\", \"activeCell\"]],\n    template: function MatMultiYearView_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\", 0)(1, \"thead\", 1)(2, \"tr\");\n        i0.ɵɵelement(3, \"th\", 2);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"tbody\", 3);\n        i0.ɵɵlistener(\"selectedValueChange\", function MatMultiYearView_Template_tbody_selectedValueChange_4_listener($event) {\n          return ctx._yearSelected($event);\n        })(\"activeDateChange\", function MatMultiYearView_Template_tbody_activeDateChange_4_listener($event) {\n          return ctx._updateActiveDate($event);\n        })(\"keyup\", function MatMultiYearView_Template_tbody_keyup_4_listener($event) {\n          return ctx._handleCalendarBodyKeyup($event);\n        })(\"keydown\", function MatMultiYearView_Template_tbody_keydown_4_listener($event) {\n          return ctx._handleCalendarBodyKeydown($event);\n        });\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"rows\", ctx._years)(\"todayValue\", ctx._todayYear)(\"startValue\", ctx._selectedYear)(\"endValue\", ctx._selectedYear)(\"numCols\", 4)(\"cellAspectRatio\", 4 / 7)(\"activeCell\", ctx._getActiveCell());\n      }\n    },\n    dependencies: [MatCalendarBody],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMultiYearView, [{\n    type: Component,\n    args: [{\n      selector: 'mat-multi-year-view',\n      exportAs: 'matMultiYearView',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      imports: [MatCalendarBody],\n      template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead aria-hidden=\\\"true\\\" class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [rows]=\\\"_years\\\"\\n         [todayValue]=\\\"_todayYear\\\"\\n         [startValue]=\\\"_selectedYear!\\\"\\n         [endValue]=\\\"_selectedYear!\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_getActiveCell()\\\"\\n         (selectedValueChange)=\\\"_yearSelected($event)\\\"\\n         (activeDateChange)=\\\"_updateActiveDate($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\"\n    }]\n  }], () => [], {\n    activeDate: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    dateClass: [{\n      type: Input\n    }],\n    selectedChange: [{\n      type: Output\n    }],\n    yearSelected: [{\n      type: Output\n    }],\n    activeDateChange: [{\n      type: Output\n    }],\n    _matCalendarBody: [{\n      type: ViewChild,\n      args: [MatCalendarBody]\n    }]\n  });\n})();\nfunction isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) === Math.floor((year2 - startingYear) / yearsPerPage);\n}\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nfunction getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo(activeYear - getStartingYear(dateAdapter, minDate, maxDate), yearsPerPage);\n}\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear(dateAdapter, minDate, maxDate) {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo(a, b) {\n  return (a % b + b) % b;\n}\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\nclass MatYearView {\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _dateFormats = inject(MAT_DATE_FORMATS, {\n    optional: true\n  });\n  _dateAdapter = inject(DateAdapter, {\n    optional: true\n  });\n  _dir = inject(Directionality, {\n    optional: true\n  });\n  _rerenderSubscription = Subscription.EMPTY;\n  /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n  _selectionKeyPressed;\n  /** The date to display in this year view (everything other than the year is ignored). */\n  get activeDate() {\n    return this._activeDate;\n  }\n  set activeDate(value) {\n    let oldActiveDate = this._activeDate;\n    const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  _activeDate;\n  /** The currently selected date. */\n  get selected() {\n    return this._selected;\n  }\n  set selected(value) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    this._setSelectedMonth(value);\n  }\n  _selected;\n  /** The minimum selectable date. */\n  get minDate() {\n    return this._minDate;\n  }\n  set minDate(value) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _minDate;\n  /** The maximum selectable date. */\n  get maxDate() {\n    return this._maxDate;\n  }\n  set maxDate(value) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _maxDate;\n  /** A function used to filter which dates are selectable. */\n  dateFilter;\n  /** Function that can be used to add custom CSS classes to date cells. */\n  dateClass;\n  /** Emits when a new month is selected. */\n  selectedChange = new EventEmitter();\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  monthSelected = new EventEmitter();\n  /** Emits when any date is activated. */\n  activeDateChange = new EventEmitter();\n  /** The body of calendar table */\n  _matCalendarBody;\n  /** Grid of calendar cells representing the months of the year. */\n  _months;\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel;\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth;\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth;\n  constructor() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n    this._activeDate = this._dateAdapter.today();\n  }\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges.pipe(startWith(null)).subscribe(() => this._init());\n  }\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n  /** Handles when a new month is selected. */\n  _monthSelected(event) {\n    const month = event.value;\n    const selectedMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n    this.monthSelected.emit(selectedMonth);\n    const selectedDate = this._getDateFromMonth(month);\n    this.selectedChange.emit(selectedDate);\n  }\n  /**\n   * Takes the index of a calendar body cell wrapped in an event as argument. For the date that\n   * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n   * that date.\n   *\n   * This function is used to match each component's model of the active date with the calendar\n   * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n   * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n   * updated value asynchronously via the `activeCell` Input.\n   */\n  _updateActiveDate(event) {\n    const month = event.value;\n    const oldActiveDate = this._activeDate;\n    this.activeDate = this._getDateFromMonth(month);\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n  }\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event) {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        // Note that we only prevent the default action here while the selection happens in\n        // `keyup` below. We can't do the selection here, because it can cause the calendar to\n        // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n        // because it's too late (see #23305).\n        this._selectionKeyPressed = true;\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n      this._focusActiveCellAfterViewChecked();\n    }\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n  /** Handles keyup events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeyup(event) {\n    if (event.keyCode === SPACE || event.keyCode === ENTER) {\n      if (this._selectionKeyPressed) {\n        this._monthSelected({\n          value: this._dateAdapter.getMonth(this._activeDate),\n          event\n        });\n      }\n      this._selectionKeyPressed = false;\n    }\n  }\n  /** Initializes this year view. */\n  _init() {\n    this._setSelectedMonth(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n  /** Schedules the matCalendarBody to focus the active cell after change detection has run */\n  _focusActiveCellAfterViewChecked() {\n    this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n  }\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  _getMonthInCurrentYear(date) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ? this._dateAdapter.getMonth(date) : null;\n  }\n  /**\n   * Takes a month and returns a new date in the same day and year as the currently active date.\n   *  The returned date will have the same month as the argument date.\n   */\n  _getDateFromMonth(month) {\n    const normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n    return this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth));\n  }\n  /** Creates an MatCalendarCell for the given month. */\n  _createCellForMonth(month, monthName) {\n    const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n    const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.monthYearA11yLabel);\n    const cellClasses = this.dateClass ? this.dateClass(date, 'year') : undefined;\n    return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month), cellClasses);\n  }\n  /** Whether the given month is enabled. */\n  _shouldEnableMonth(month) {\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n    if (month === undefined || month === null || this._isYearAndMonthAfterMaxDate(activeYear, month) || this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n    if (!this.dateFilter) {\n      return true;\n    }\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  _isYearAndMonthAfterMaxDate(year, month) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n      return year > maxYear || year === maxYear && month > maxMonth;\n    }\n    return false;\n  }\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  _isYearAndMonthBeforeMinDate(year, month) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n      return year < minYear || year === minYear && month < minMonth;\n    }\n    return false;\n  }\n  /** Determines whether the user has the RTL layout direction. */\n  _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n  /** Sets the currently-selected month based on a model value. */\n  _setSelectedMonth(value) {\n    if (value instanceof DateRange) {\n      this._selectedMonth = this._getMonthInCurrentYear(value.start) || this._getMonthInCurrentYear(value.end);\n    } else {\n      this._selectedMonth = this._getMonthInCurrentYear(value);\n    }\n  }\n  static ɵfac = function MatYearView_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatYearView)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatYearView,\n    selectors: [[\"mat-year-view\"]],\n    viewQuery: function MatYearView_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatCalendarBody, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n      }\n    },\n    inputs: {\n      activeDate: \"activeDate\",\n      selected: \"selected\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      dateFilter: \"dateFilter\",\n      dateClass: \"dateClass\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\",\n      monthSelected: \"monthSelected\",\n      activeDateChange: \"activeDateChange\"\n    },\n    exportAs: [\"matYearView\"],\n    decls: 5,\n    vars: 9,\n    consts: [[\"role\", \"grid\", 1, \"mat-calendar-table\"], [\"aria-hidden\", \"true\", 1, \"mat-calendar-table-header\"], [\"colspan\", \"4\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"selectedValueChange\", \"activeDateChange\", \"keyup\", \"keydown\", \"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"cellAspectRatio\", \"activeCell\"]],\n    template: function MatYearView_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\", 0)(1, \"thead\", 1)(2, \"tr\");\n        i0.ɵɵelement(3, \"th\", 2);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"tbody\", 3);\n        i0.ɵɵlistener(\"selectedValueChange\", function MatYearView_Template_tbody_selectedValueChange_4_listener($event) {\n          return ctx._monthSelected($event);\n        })(\"activeDateChange\", function MatYearView_Template_tbody_activeDateChange_4_listener($event) {\n          return ctx._updateActiveDate($event);\n        })(\"keyup\", function MatYearView_Template_tbody_keyup_4_listener($event) {\n          return ctx._handleCalendarBodyKeyup($event);\n        })(\"keydown\", function MatYearView_Template_tbody_keydown_4_listener($event) {\n          return ctx._handleCalendarBodyKeydown($event);\n        });\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"label\", ctx._yearLabel)(\"rows\", ctx._months)(\"todayValue\", ctx._todayMonth)(\"startValue\", ctx._selectedMonth)(\"endValue\", ctx._selectedMonth)(\"labelMinRequiredCells\", 2)(\"numCols\", 4)(\"cellAspectRatio\", 4 / 7)(\"activeCell\", ctx._dateAdapter.getMonth(ctx.activeDate));\n      }\n    },\n    dependencies: [MatCalendarBody],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatYearView, [{\n    type: Component,\n    args: [{\n      selector: 'mat-year-view',\n      exportAs: 'matYearView',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      imports: [MatCalendarBody],\n      template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead aria-hidden=\\\"true\\\" class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_yearLabel\\\"\\n         [rows]=\\\"_months\\\"\\n         [todayValue]=\\\"_todayMonth!\\\"\\n         [startValue]=\\\"_selectedMonth!\\\"\\n         [endValue]=\\\"_selectedMonth!\\\"\\n         [labelMinRequiredCells]=\\\"2\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\"\\n         (selectedValueChange)=\\\"_monthSelected($event)\\\"\\n         (activeDateChange)=\\\"_updateActiveDate($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\"\n    }]\n  }], () => [], {\n    activeDate: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    dateClass: [{\n      type: Input\n    }],\n    selectedChange: [{\n      type: Output\n    }],\n    monthSelected: [{\n      type: Output\n    }],\n    activeDateChange: [{\n      type: Output\n    }],\n    _matCalendarBody: [{\n      type: ViewChild,\n      args: [MatCalendarBody]\n    }]\n  });\n})();\n\n/** Default header for MatCalendar */\nclass MatCalendarHeader {\n  _intl = inject(MatDatepickerIntl);\n  calendar = inject(MatCalendar);\n  _dateAdapter = inject(DateAdapter, {\n    optional: true\n  });\n  _dateFormats = inject(MAT_DATE_FORMATS, {\n    optional: true\n  });\n  _periodButtonText;\n  _periodButtonDescription;\n  _periodButtonLabel;\n  _prevButtonLabel;\n  _nextButtonLabel;\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n    const changeDetectorRef = inject(ChangeDetectorRef);\n    this._updateLabels();\n    this.calendar.stateChanges.subscribe(() => {\n      this._updateLabels();\n      changeDetectorRef.markForCheck();\n    });\n  }\n  /** The display text for the current calendar view. */\n  get periodButtonText() {\n    return this._periodButtonText;\n  }\n  /** The aria description for the current calendar view. */\n  get periodButtonDescription() {\n    return this._periodButtonDescription;\n  }\n  /** The `aria-label` for changing the calendar view. */\n  get periodButtonLabel() {\n    return this._periodButtonLabel;\n  }\n  /** The label for the previous button. */\n  get prevButtonLabel() {\n    return this._prevButtonLabel;\n  }\n  /** The label for the next button. */\n  get nextButtonLabel() {\n    return this._nextButtonLabel;\n  }\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked() {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n  /** Handles user clicks on the previous button. */\n  previousClicked() {\n    if (this.previousEnabled()) {\n      this.calendar.activeDate = this.calendar.currentView == 'month' ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n    }\n  }\n  /** Handles user clicks on the next button. */\n  nextClicked() {\n    if (this.nextEnabled()) {\n      this.calendar.activeDate = this.calendar.currentView == 'month' ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n    }\n  }\n  /** Whether the previous period button is enabled. */\n  previousEnabled() {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate || !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n  /** Whether the next period button is enabled. */\n  nextEnabled() {\n    return !this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n  /** Updates the labels for the various sections of the header. */\n  _updateLabels() {\n    const calendar = this.calendar;\n    const intl = this._intl;\n    const adapter = this._dateAdapter;\n    if (calendar.currentView === 'month') {\n      this._periodButtonText = adapter.format(calendar.activeDate, this._dateFormats.display.monthYearLabel).toLocaleUpperCase();\n      this._periodButtonDescription = adapter.format(calendar.activeDate, this._dateFormats.display.monthYearLabel).toLocaleUpperCase();\n      this._periodButtonLabel = intl.switchToMultiYearViewLabel;\n      this._prevButtonLabel = intl.prevMonthLabel;\n      this._nextButtonLabel = intl.nextMonthLabel;\n    } else if (calendar.currentView === 'year') {\n      this._periodButtonText = adapter.getYearName(calendar.activeDate);\n      this._periodButtonDescription = adapter.getYearName(calendar.activeDate);\n      this._periodButtonLabel = intl.switchToMonthViewLabel;\n      this._prevButtonLabel = intl.prevYearLabel;\n      this._nextButtonLabel = intl.nextYearLabel;\n    } else {\n      this._periodButtonText = intl.formatYearRange(...this._formatMinAndMaxYearLabels());\n      // Format a label for the window of years displayed in the multi-year calendar view. Use\n      // `formatYearRangeLabel` because it is TTS friendly.\n      this._periodButtonDescription = intl.formatYearRangeLabel(...this._formatMinAndMaxYearLabels());\n      this._periodButtonLabel = intl.switchToMonthViewLabel;\n      this._prevButtonLabel = intl.prevMultiYearLabel;\n      this._nextButtonLabel = intl.nextMultiYearLabel;\n    }\n  }\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  _isSameView(date1, date2) {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) && this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n  /**\n   * Format two individual labels for the minimum year and maximum year available in the multi-year\n   * calendar view. Returns an array of two strings where the first string is the formatted label\n   * for the minimum year, and the second string is the formatted label for the maximum year.\n   */\n  _formatMinAndMaxYearLabels() {\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    const minYearLabel = this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n    const maxYearLabel = this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n    return [minYearLabel, maxYearLabel];\n  }\n  _periodButtonLabelId = inject(_IdGenerator).getId('mat-calendar-period-label-');\n  static ɵfac = function MatCalendarHeader_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatCalendarHeader)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatCalendarHeader,\n    selectors: [[\"mat-calendar-header\"]],\n    exportAs: [\"matCalendarHeader\"],\n    ngContentSelectors: _c1,\n    decls: 17,\n    vars: 11,\n    consts: [[1, \"mat-calendar-header\"], [1, \"mat-calendar-controls\"], [\"aria-live\", \"polite\", 1, \"cdk-visually-hidden\", 3, \"id\"], [\"matButton\", \"\", \"type\", \"button\", 1, \"mat-calendar-period-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"viewBox\", \"0 0 10 5\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 1, \"mat-calendar-arrow\"], [\"points\", \"0,0 5,5 10,0\"], [1, \"mat-calendar-spacer\"], [\"matIconButton\", \"\", \"type\", \"button\", \"disabledInteractive\", \"\", 1, \"mat-calendar-previous-button\", 3, \"click\", \"disabled\"], [\"viewBox\", \"0 0 24 24\", \"focusable\", \"false\", \"aria-hidden\", \"true\"], [\"d\", \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"], [\"matIconButton\", \"\", \"type\", \"button\", \"disabledInteractive\", \"\", 1, \"mat-calendar-next-button\", 3, \"click\", \"disabled\"], [\"d\", \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"]],\n    template: function MatCalendarHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_4_listener() {\n          return ctx.currentPeriodClicked();\n        });\n        i0.ɵɵelementStart(5, \"span\", 4);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(7, \"svg\", 5);\n        i0.ɵɵelement(8, \"polygon\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelement(9, \"div\", 7);\n        i0.ɵɵprojection(10);\n        i0.ɵɵelementStart(11, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_11_listener() {\n          return ctx.previousClicked();\n        });\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(12, \"svg\", 9);\n        i0.ɵɵelement(13, \"path\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(14, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_14_listener() {\n          return ctx.nextClicked();\n        });\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(15, \"svg\", 9);\n        i0.ɵɵelement(16, \"path\", 12);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"id\", ctx._periodButtonLabelId);\n        i0.ɵɵadvance();\n        i0.ɵɵtextInterpolate(ctx.periodButtonDescription);\n        i0.ɵɵadvance();\n        i0.ɵɵattribute(\"aria-label\", ctx.periodButtonLabel)(\"aria-describedby\", ctx._periodButtonLabelId);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.periodButtonText);\n        i0.ɵɵadvance();\n        i0.ɵɵclassProp(\"mat-calendar-invert\", ctx.calendar.currentView !== \"month\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", !ctx.previousEnabled());\n        i0.ɵɵattribute(\"aria-label\", ctx.prevButtonLabel);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", !ctx.nextEnabled());\n        i0.ɵɵattribute(\"aria-label\", ctx.nextButtonLabel);\n      }\n    },\n    dependencies: [MatButton, MatIconButton],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCalendarHeader, [{\n    type: Component,\n    args: [{\n      selector: 'mat-calendar-header',\n      exportAs: 'matCalendarHeader',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      imports: [MatButton, MatIconButton],\n      template: \"<div class=\\\"mat-calendar-header\\\">\\n  <div class=\\\"mat-calendar-controls\\\">\\n    <!-- [Firefox Issue: https://bugzilla.mozilla.org/show_bug.cgi?id=1880533]\\n      Relocated label next to related button and made visually hidden via cdk-visually-hidden\\n      to enable label to appear in a11y tree for SR when using Firefox -->\\n    <span [id]=\\\"_periodButtonLabelId\\\" class=\\\"cdk-visually-hidden\\\" aria-live=\\\"polite\\\">{{periodButtonDescription}}</span>\\n    <button matButton type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\"\\n            (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\"\\n            [attr.aria-describedby]=\\\"_periodButtonLabelId\\\">\\n      <span aria-hidden=\\\"true\\\">{{periodButtonText}}</span>\\n      <svg class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"calendar.currentView !== 'month'\\\"\\n           viewBox=\\\"0 0 10 5\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n           <polygon points=\\\"0,0 5,5 10,0\\\"/>\\n      </svg>\\n    </button>\\n\\n    <div class=\\\"mat-calendar-spacer\\\"></div>\\n\\n    <ng-content></ng-content>\\n\\n    <button matIconButton type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\"\\n            [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\"\\n            [attr.aria-label]=\\\"prevButtonLabel\\\" disabledInteractive>\\n      <svg viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n       </svg>\\n    </button>\\n\\n    <button matIconButton type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\"\\n            [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\"\\n            [attr.aria-label]=\\\"nextButtonLabel\\\" disabledInteractive>\\n      <svg viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n      </svg>\\n    </button>\\n  </div>\\n</div>\\n\"\n    }]\n  }], () => [], null);\n})();\n/** A calendar that is used as part of the datepicker. */\nclass MatCalendar {\n  _dateAdapter = inject(DateAdapter, {\n    optional: true\n  });\n  _dateFormats = inject(MAT_DATE_FORMATS, {\n    optional: true\n  });\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _elementRef = inject(ElementRef);\n  /** An input indicating the type of the header component, if set. */\n  headerComponent;\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal;\n  _intlChanges;\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  _moveFocusOnNextTick = false;\n  /** A date representing the period (month or year) to start the calendar in. */\n  get startAt() {\n    return this._startAt;\n  }\n  set startAt(value) {\n    this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _startAt;\n  /** Whether the calendar should be started in month or year view. */\n  startView = 'month';\n  /** The currently selected date. */\n  get selected() {\n    return this._selected;\n  }\n  set selected(value) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n  }\n  _selected;\n  /** The minimum selectable date. */\n  get minDate() {\n    return this._minDate;\n  }\n  set minDate(value) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _minDate;\n  /** The maximum selectable date. */\n  get maxDate() {\n    return this._maxDate;\n  }\n  set maxDate(value) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _maxDate;\n  /** Function used to filter which dates are selectable. */\n  dateFilter;\n  /** Function that can be used to add custom CSS classes to dates. */\n  dateClass;\n  /** Start of the comparison range. */\n  comparisonStart;\n  /** End of the comparison range. */\n  comparisonEnd;\n  /** ARIA Accessible name of the `<input matStartDate/>` */\n  startDateAccessibleName;\n  /** ARIA Accessible name of the `<input matEndDate/>` */\n  endDateAccessibleName;\n  /** Emits when the currently selected date changes. */\n  selectedChange = new EventEmitter();\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  yearSelected = new EventEmitter();\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  monthSelected = new EventEmitter();\n  /**\n   * Emits when the current view changes.\n   */\n  viewChanged = new EventEmitter(true);\n  /** Emits when any date is selected. */\n  _userSelection = new EventEmitter();\n  /** Emits a new date range value when the user completes a drag drop operation. */\n  _userDragDrop = new EventEmitter();\n  /** Reference to the current month view component. */\n  monthView;\n  /** Reference to the current year view component. */\n  yearView;\n  /** Reference to the current multi-year view component. */\n  multiYearView;\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate() {\n    return this._clampedActiveDate;\n  }\n  set activeDate(value) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  _clampedActiveDate;\n  /** Whether the calendar is in month view. */\n  get currentView() {\n    return this._currentView;\n  }\n  set currentView(value) {\n    const viewChangedResult = this._currentView !== value ? value : null;\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n    if (viewChangedResult) {\n      this.stateChanges.next();\n      this.viewChanged.emit(viewChangedResult);\n    }\n  }\n  _currentView;\n  /** Origin of active drag, or null when dragging is not active. */\n  _activeDrag = null;\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject();\n  constructor() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n    this._intlChanges = inject(MatDatepickerIntl).changes.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n  ngOnChanges(changes) {\n    // Ignore date changes that are at a different time on the same day. This fixes issues where\n    // the calendar re-renders when there is no meaningful change to [minDate] or [maxDate]\n    // (#24435).\n    const minDateChange = changes['minDate'] && !this._dateAdapter.sameDate(changes['minDate'].previousValue, changes['minDate'].currentValue) ? changes['minDate'] : undefined;\n    const maxDateChange = changes['maxDate'] && !this._dateAdapter.sameDate(changes['maxDate'].previousValue, changes['maxDate'].currentValue) ? changes['maxDate'] : undefined;\n    const changeRequiringRerender = minDateChange || maxDateChange || changes['dateFilter'];\n    if (changeRequiringRerender && !changeRequiringRerender.firstChange) {\n      const view = this._getCurrentViewComponent();\n      if (view) {\n        // Schedule focus to be moved to the active date since re-rendering can blur the active\n        // cell (see #29265), however don't do so if focus is outside of the calendar, because it\n        // can steal away the user's attention (see #30635).\n        if (this._elementRef.nativeElement.contains(_getFocusedElementPierceShadowDom())) {\n          this._moveFocusOnNextTick = true;\n        }\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n    this.stateChanges.next();\n  }\n  /** Focuses the active date. */\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell(false);\n  }\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    this._getCurrentViewComponent()._init();\n  }\n  /** Handles date selection in the month view. */\n  _dateSelected(event) {\n    const date = event.value;\n    if (this.selected instanceof DateRange || date && !this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n    this._userSelection.emit(event);\n  }\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear) {\n    this.yearSelected.emit(normalizedYear);\n  }\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date, view) {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n  /** Called when the user starts dragging to change a date range. */\n  _dragStarted(event) {\n    this._activeDrag = event;\n  }\n  /**\n   * Called when a drag completes. It may end in cancelation or in the selection\n   * of a new range.\n   */\n  _dragEnded(event) {\n    if (!this._activeDrag) return;\n    if (event.value) {\n      this._userDragDrop.emit(event);\n    }\n    this._activeDrag = null;\n  }\n  /** Returns the component instance that corresponds to the current calendar view. */\n  _getCurrentViewComponent() {\n    // The return type is explicitly written as a union to ensure that the Closure compiler does\n    // not optimize calls to _init(). Without the explicit return type, TypeScript narrows it to\n    // only the first component type. See https://github.com/angular/components/issues/22996.\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n  static ɵfac = function MatCalendar_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatCalendar)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatCalendar,\n    selectors: [[\"mat-calendar\"]],\n    viewQuery: function MatCalendar_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatMonthView, 5);\n        i0.ɵɵviewQuery(MatYearView, 5);\n        i0.ɵɵviewQuery(MatMultiYearView, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.monthView = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.yearView = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.multiYearView = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-calendar\"],\n    inputs: {\n      headerComponent: \"headerComponent\",\n      startAt: \"startAt\",\n      startView: \"startView\",\n      selected: \"selected\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      dateFilter: \"dateFilter\",\n      dateClass: \"dateClass\",\n      comparisonStart: \"comparisonStart\",\n      comparisonEnd: \"comparisonEnd\",\n      startDateAccessibleName: \"startDateAccessibleName\",\n      endDateAccessibleName: \"endDateAccessibleName\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\",\n      yearSelected: \"yearSelected\",\n      monthSelected: \"monthSelected\",\n      viewChanged: \"viewChanged\",\n      _userSelection: \"_userSelection\",\n      _userDragDrop: \"_userDragDrop\"\n    },\n    exportAs: [\"matCalendar\"],\n    features: [i0.ɵɵProvidersFeature([MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]), i0.ɵɵNgOnChangesFeature],\n    decls: 5,\n    vars: 2,\n    consts: [[3, \"cdkPortalOutlet\"], [\"cdkMonitorSubtreeFocus\", \"\", \"tabindex\", \"-1\", 1, \"mat-calendar-content\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\", \"activeDrag\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\"], [3, \"activeDateChange\", \"_userSelection\", \"dragStarted\", \"dragEnded\", \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\", \"activeDrag\"], [3, \"activeDateChange\", \"monthSelected\", \"selectedChange\", \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\"], [3, \"activeDateChange\", \"yearSelected\", \"selectedChange\", \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\"]],\n    template: function MatCalendar_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MatCalendar_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵconditionalCreate(2, MatCalendar_Case_2_Template, 1, 11, \"mat-month-view\", 2)(3, MatCalendar_Case_3_Template, 1, 6, \"mat-year-view\", 3)(4, MatCalendar_Case_4_Template, 1, 6, \"mat-multi-year-view\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        i0.ɵɵproperty(\"cdkPortalOutlet\", ctx._calendarHeaderPortal);\n        i0.ɵɵadvance(2);\n        i0.ɵɵconditional((tmp_1_0 = ctx.currentView) === \"month\" ? 2 : tmp_1_0 === \"year\" ? 3 : tmp_1_0 === \"multi-year\" ? 4 : -1);\n      }\n    },\n    dependencies: [CdkPortalOutlet, CdkMonitorFocus, MatMonthView, MatYearView, MatMultiYearView],\n    styles: [\".mat-calendar{display:block;line-height:normal;font-family:var(--mat-datepicker-calendar-text-font, var(--mat-sys-body-medium-font));font-size:var(--mat-datepicker-calendar-text-size, var(--mat-sys-body-medium-size))}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:none}.mat-calendar-controls{display:flex;align-items:center;margin:5% calc(4.7142857143% - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0;margin:0 8px;font-size:var(--mat-datepicker-calendar-period-button-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-period-button-text-weight, var(--mat-sys-title-small-weight));--mat-button-text-label-text-color: var(--mat-datepicker-calendar-period-button-text-color, var(--mat-sys-on-surface-variant))}.mat-calendar-arrow{display:inline-block;width:10px;height:5px;margin:0 0 0 5px;vertical-align:middle;fill:var(--mat-datepicker-calendar-period-button-icon-color, var(--mat-sys-on-surface-variant))}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}@media(forced-colors: active){.mat-calendar-arrow{fill:CanvasText}}.mat-datepicker-content .mat-calendar-previous-button:not(.mat-mdc-button-disabled),.mat-datepicker-content .mat-calendar-next-button:not(.mat-mdc-button-disabled){color:var(--mat-datepicker-calendar-navigation-button-icon-color, var(--mat-sys-on-surface-variant))}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0;color:var(--mat-datepicker-calendar-header-text-color, var(--mat-sys-on-surface-variant));font-size:var(--mat-datepicker-calendar-header-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-header-text-weight, var(--mat-sys-title-small-weight))}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px;background:var(--mat-datepicker-calendar-header-divider-color, transparent)}.mat-calendar-body-cell-content::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 3px)*-1)}.mat-calendar-body-cell:focus .mat-focus-indicator::before{content:\\\"\\\"}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCalendar, [{\n    type: Component,\n    args: [{\n      selector: 'mat-calendar',\n      host: {\n        'class': 'mat-calendar'\n      },\n      exportAs: 'matCalendar',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER],\n      imports: [CdkPortalOutlet, CdkMonitorFocus, MatMonthView, MatYearView, MatMultiYearView],\n      template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template>\\n\\n<div class=\\\"mat-calendar-content\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\">\\n  @switch (currentView) {\\n    @case ('month') {\\n        <mat-month-view\\n            [(activeDate)]=\\\"activeDate\\\"\\n            [selected]=\\\"selected\\\"\\n            [dateFilter]=\\\"dateFilter\\\"\\n            [maxDate]=\\\"maxDate\\\"\\n            [minDate]=\\\"minDate\\\"\\n            [dateClass]=\\\"dateClass\\\"\\n            [comparisonStart]=\\\"comparisonStart\\\"\\n            [comparisonEnd]=\\\"comparisonEnd\\\"\\n            [startDateAccessibleName]=\\\"startDateAccessibleName\\\"\\n            [endDateAccessibleName]=\\\"endDateAccessibleName\\\"\\n            (_userSelection)=\\\"_dateSelected($event)\\\"\\n            (dragStarted)=\\\"_dragStarted($event)\\\"\\n            (dragEnded)=\\\"_dragEnded($event)\\\"\\n            [activeDrag]=\\\"_activeDrag\\\"></mat-month-view>\\n    }\\n\\n    @case ('year') {\\n        <mat-year-view\\n            [(activeDate)]=\\\"activeDate\\\"\\n            [selected]=\\\"selected\\\"\\n            [dateFilter]=\\\"dateFilter\\\"\\n            [maxDate]=\\\"maxDate\\\"\\n            [minDate]=\\\"minDate\\\"\\n            [dateClass]=\\\"dateClass\\\"\\n            (monthSelected)=\\\"_monthSelectedInYearView($event)\\\"\\n            (selectedChange)=\\\"_goToDateInView($event, 'month')\\\"></mat-year-view>\\n    }\\n\\n    @case ('multi-year') {\\n        <mat-multi-year-view\\n            [(activeDate)]=\\\"activeDate\\\"\\n            [selected]=\\\"selected\\\"\\n            [dateFilter]=\\\"dateFilter\\\"\\n            [maxDate]=\\\"maxDate\\\"\\n            [minDate]=\\\"minDate\\\"\\n            [dateClass]=\\\"dateClass\\\"\\n            (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\"\\n            (selectedChange)=\\\"_goToDateInView($event, 'year')\\\"></mat-multi-year-view>\\n    }\\n  }\\n</div>\\n\",\n      styles: [\".mat-calendar{display:block;line-height:normal;font-family:var(--mat-datepicker-calendar-text-font, var(--mat-sys-body-medium-font));font-size:var(--mat-datepicker-calendar-text-size, var(--mat-sys-body-medium-size))}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:none}.mat-calendar-controls{display:flex;align-items:center;margin:5% calc(4.7142857143% - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0;margin:0 8px;font-size:var(--mat-datepicker-calendar-period-button-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-period-button-text-weight, var(--mat-sys-title-small-weight));--mat-button-text-label-text-color: var(--mat-datepicker-calendar-period-button-text-color, var(--mat-sys-on-surface-variant))}.mat-calendar-arrow{display:inline-block;width:10px;height:5px;margin:0 0 0 5px;vertical-align:middle;fill:var(--mat-datepicker-calendar-period-button-icon-color, var(--mat-sys-on-surface-variant))}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}@media(forced-colors: active){.mat-calendar-arrow{fill:CanvasText}}.mat-datepicker-content .mat-calendar-previous-button:not(.mat-mdc-button-disabled),.mat-datepicker-content .mat-calendar-next-button:not(.mat-mdc-button-disabled){color:var(--mat-datepicker-calendar-navigation-button-icon-color, var(--mat-sys-on-surface-variant))}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0;color:var(--mat-datepicker-calendar-header-text-color, var(--mat-sys-on-surface-variant));font-size:var(--mat-datepicker-calendar-header-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-header-text-weight, var(--mat-sys-title-small-weight))}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px;background:var(--mat-datepicker-calendar-header-divider-color, transparent)}.mat-calendar-body-cell-content::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 3px)*-1)}.mat-calendar-body-cell:focus .mat-focus-indicator::before{content:\\\"\\\"}\\n\"]\n    }]\n  }], () => [], {\n    headerComponent: [{\n      type: Input\n    }],\n    startAt: [{\n      type: Input\n    }],\n    startView: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    dateClass: [{\n      type: Input\n    }],\n    comparisonStart: [{\n      type: Input\n    }],\n    comparisonEnd: [{\n      type: Input\n    }],\n    startDateAccessibleName: [{\n      type: Input\n    }],\n    endDateAccessibleName: [{\n      type: Input\n    }],\n    selectedChange: [{\n      type: Output\n    }],\n    yearSelected: [{\n      type: Output\n    }],\n    monthSelected: [{\n      type: Output\n    }],\n    viewChanged: [{\n      type: Output\n    }],\n    _userSelection: [{\n      type: Output\n    }],\n    _userDragDrop: [{\n      type: Output\n    }],\n    monthView: [{\n      type: ViewChild,\n      args: [MatMonthView]\n    }],\n    yearView: [{\n      type: ViewChild,\n      args: [MatYearView]\n    }],\n    multiYearView: [{\n      type: ViewChild,\n      args: [MatMultiYearView]\n    }]\n  });\n})();\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nconst MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy', {\n  providedIn: 'root',\n  factory: () => {\n    const injector = inject(Injector);\n    return () => createRepositionScrollStrategy(injector);\n  }\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(_overlay) {\n  const injector = inject(Injector);\n  return () => createRepositionScrollStrategy(injector);\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Component used as the content for the datepicker overlay. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the overlay that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\nclass MatDatepickerContent {\n  _elementRef = inject(ElementRef);\n  _animationsDisabled = _animationsDisabled();\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _globalModel = inject(MatDateSelectionModel);\n  _dateAdapter = inject(DateAdapter);\n  _ngZone = inject(NgZone);\n  _rangeSelectionStrategy = inject(MAT_DATE_RANGE_SELECTION_STRATEGY, {\n    optional: true\n  });\n  _stateChanges;\n  _model;\n  _eventCleanups;\n  _animationFallback;\n  /** Reference to the internal calendar component. */\n  _calendar;\n  /**\n   * Theme color of the internal calendar. This API is supported in M2 themes\n   * only, it has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/datepicker/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  color;\n  /** Reference to the datepicker that created the overlay. */\n  datepicker;\n  /** Start of the comparison range. */\n  comparisonStart;\n  /** End of the comparison range. */\n  comparisonEnd;\n  /** ARIA Accessible name of the `<input matStartDate/>` */\n  startDateAccessibleName;\n  /** ARIA Accessible name of the `<input matEndDate/>` */\n  endDateAccessibleName;\n  /** Whether the datepicker is above or below the input. */\n  _isAbove;\n  /** Emits when an animation has finished. */\n  _animationDone = new Subject();\n  /** Whether there is an in-progress animation. */\n  _isAnimating = false;\n  /** Text for the close button. */\n  _closeButtonText;\n  /** Whether the close button currently has focus. */\n  _closeButtonFocused;\n  /** Portal with projected action buttons. */\n  _actionsPortal = null;\n  /** Id of the label for the `role=\"dialog\"` element. */\n  _dialogLabelId;\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n    this._closeButtonText = inject(MatDatepickerIntl).closeCalendarLabel;\n    if (!this._animationsDisabled) {\n      const element = this._elementRef.nativeElement;\n      const renderer = inject(Renderer2);\n      this._eventCleanups = this._ngZone.runOutsideAngular(() => [renderer.listen(element, 'animationstart', this._handleAnimationEvent), renderer.listen(element, 'animationend', this._handleAnimationEvent), renderer.listen(element, 'animationcancel', this._handleAnimationEvent)]);\n    }\n  }\n  ngAfterViewInit() {\n    this._stateChanges = this.datepicker.stateChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n    this._calendar.focusActiveCell();\n  }\n  ngOnDestroy() {\n    clearTimeout(this._animationFallback);\n    this._eventCleanups?.forEach(cleanup => cleanup());\n    this._stateChanges?.unsubscribe();\n    this._animationDone.complete();\n  }\n  _handleUserSelection(event) {\n    const selection = this._model.selection;\n    const value = event.value;\n    const isRange = selection instanceof DateRange;\n    // If we're selecting a range and we have a selection strategy, always pass the value through\n    // there. Otherwise don't assign null values to the model, unless we're selecting a range.\n    // A null value when picking a range means that the user cancelled the selection (e.g. by\n    // pressing escape), whereas when selecting a single value it means that the value didn't\n    // change. This isn't very intuitive, but it's here for backwards-compatibility.\n    if (isRange && this._rangeSelectionStrategy) {\n      const newSelection = this._rangeSelectionStrategy.selectionFinished(value, selection, event.event);\n      this._model.updateSelection(newSelection, this);\n    } else if (value && (isRange || !this._dateAdapter.sameDate(value, selection))) {\n      this._model.add(value);\n    }\n    // Delegate closing the overlay to the actions.\n    if ((!this._model || this._model.isComplete()) && !this._actionsPortal) {\n      this.datepicker.close();\n    }\n  }\n  _handleUserDragDrop(event) {\n    this._model.updateSelection(event.value, this);\n  }\n  _startExitAnimation() {\n    this._elementRef.nativeElement.classList.add('mat-datepicker-content-exit');\n    if (this._animationsDisabled) {\n      this._animationDone.next();\n    } else {\n      // Some internal apps disable animations in tests using `* {animation: none !important}`.\n      // If that happens, the animation events won't fire and we'll never clean up the overlay.\n      // Add a fallback that will fire if the animation doesn't run in a certain amount of time.\n      clearTimeout(this._animationFallback);\n      this._animationFallback = setTimeout(() => {\n        if (!this._isAnimating) {\n          this._animationDone.next();\n        }\n      }, 200);\n    }\n  }\n  _handleAnimationEvent = event => {\n    const element = this._elementRef.nativeElement;\n    if (event.target !== element || !event.animationName.startsWith('_mat-datepicker-content')) {\n      return;\n    }\n    clearTimeout(this._animationFallback);\n    this._isAnimating = event.type === 'animationstart';\n    element.classList.toggle('mat-datepicker-content-animating', this._isAnimating);\n    if (!this._isAnimating) {\n      this._animationDone.next();\n    }\n  };\n  _getSelected() {\n    return this._model.selection;\n  }\n  /** Applies the current pending selection to the global model. */\n  _applyPendingSelection() {\n    if (this._model !== this._globalModel) {\n      this._globalModel.updateSelection(this._model.selection, this);\n    }\n  }\n  /**\n   * Assigns a new portal containing the datepicker actions.\n   * @param portal Portal with the actions to be assigned.\n   * @param forceRerender Whether a re-render of the portal should be triggered. This isn't\n   * necessary if the portal is assigned during initialization, but it may be required if it's\n   * added at a later point.\n   */\n  _assignActions(portal, forceRerender) {\n    // If we have actions, clone the model so that we have the ability to cancel the selection,\n    // otherwise update the global model directly. Note that we want to assign this as soon as\n    // possible, but `_actionsPortal` isn't available in the constructor so we do it in `ngOnInit`.\n    this._model = portal ? this._globalModel.clone() : this._globalModel;\n    this._actionsPortal = portal;\n    if (forceRerender) {\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  static ɵfac = function MatDatepickerContent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDatepickerContent)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatDatepickerContent,\n    selectors: [[\"mat-datepicker-content\"]],\n    viewQuery: function MatDatepickerContent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatCalendar, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._calendar = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-datepicker-content\"],\n    hostVars: 6,\n    hostBindings: function MatDatepickerContent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.color ? \"mat-\" + ctx.color : \"\");\n        i0.ɵɵclassProp(\"mat-datepicker-content-touch\", ctx.datepicker.touchUi)(\"mat-datepicker-content-animations-enabled\", !ctx._animationsDisabled);\n      }\n    },\n    inputs: {\n      color: \"color\"\n    },\n    exportAs: [\"matDatepickerContent\"],\n    decls: 5,\n    vars: 26,\n    consts: [[\"cdkTrapFocus\", \"\", \"role\", \"dialog\", 1, \"mat-datepicker-content-container\"], [3, \"yearSelected\", \"monthSelected\", \"viewChanged\", \"_userSelection\", \"_userDragDrop\", \"id\", \"startAt\", \"startView\", \"minDate\", \"maxDate\", \"dateFilter\", \"headerComponent\", \"selected\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\"], [3, \"cdkPortalOutlet\"], [\"type\", \"button\", \"matButton\", \"elevated\", 1, \"mat-datepicker-close-button\", 3, \"focus\", \"blur\", \"click\", \"color\"]],\n    template: function MatDatepickerContent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-calendar\", 1);\n        i0.ɵɵlistener(\"yearSelected\", function MatDatepickerContent_Template_mat_calendar_yearSelected_1_listener($event) {\n          return ctx.datepicker._selectYear($event);\n        })(\"monthSelected\", function MatDatepickerContent_Template_mat_calendar_monthSelected_1_listener($event) {\n          return ctx.datepicker._selectMonth($event);\n        })(\"viewChanged\", function MatDatepickerContent_Template_mat_calendar_viewChanged_1_listener($event) {\n          return ctx.datepicker._viewChanged($event);\n        })(\"_userSelection\", function MatDatepickerContent_Template_mat_calendar__userSelection_1_listener($event) {\n          return ctx._handleUserSelection($event);\n        })(\"_userDragDrop\", function MatDatepickerContent_Template_mat_calendar__userDragDrop_1_listener($event) {\n          return ctx._handleUserDragDrop($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, MatDatepickerContent_ng_template_2_Template, 0, 0, \"ng-template\", 2);\n        i0.ɵɵelementStart(3, \"button\", 3);\n        i0.ɵɵlistener(\"focus\", function MatDatepickerContent_Template_button_focus_3_listener() {\n          return ctx._closeButtonFocused = true;\n        })(\"blur\", function MatDatepickerContent_Template_button_blur_3_listener() {\n          return ctx._closeButtonFocused = false;\n        })(\"click\", function MatDatepickerContent_Template_button_click_3_listener() {\n          return ctx.datepicker.close();\n        });\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-datepicker-content-container-with-custom-header\", ctx.datepicker.calendarHeaderComponent)(\"mat-datepicker-content-container-with-actions\", ctx._actionsPortal);\n        i0.ɵɵattribute(\"aria-modal\", true)(\"aria-labelledby\", ctx._dialogLabelId ?? undefined);\n        i0.ɵɵadvance();\n        i0.ɵɵclassMap(ctx.datepicker.panelClass);\n        i0.ɵɵproperty(\"id\", ctx.datepicker.id)(\"startAt\", ctx.datepicker.startAt)(\"startView\", ctx.datepicker.startView)(\"minDate\", ctx.datepicker._getMinDate())(\"maxDate\", ctx.datepicker._getMaxDate())(\"dateFilter\", ctx.datepicker._getDateFilter())(\"headerComponent\", ctx.datepicker.calendarHeaderComponent)(\"selected\", ctx._getSelected())(\"dateClass\", ctx.datepicker.dateClass)(\"comparisonStart\", ctx.comparisonStart)(\"comparisonEnd\", ctx.comparisonEnd)(\"startDateAccessibleName\", ctx.startDateAccessibleName)(\"endDateAccessibleName\", ctx.endDateAccessibleName);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"cdkPortalOutlet\", ctx._actionsPortal);\n        i0.ɵɵadvance();\n        i0.ɵɵclassProp(\"cdk-visually-hidden\", !ctx._closeButtonFocused);\n        i0.ɵɵproperty(\"color\", ctx.color || \"primary\");\n        i0.ɵɵadvance();\n        i0.ɵɵtextInterpolate(ctx._closeButtonText);\n      }\n    },\n    dependencies: [CdkTrapFocus, MatCalendar, CdkPortalOutlet, MatButton],\n    styles: [\"@keyframes _mat-datepicker-content-dropdown-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}@keyframes _mat-datepicker-content-dialog-enter{from{opacity:0;transform:scale(0.8)}to{opacity:1;transform:none}}@keyframes _mat-datepicker-content-exit{from{opacity:1}to{opacity:0}}.mat-datepicker-content{display:block;background-color:var(--mat-datepicker-calendar-container-background-color, var(--mat-sys-surface-container-high));color:var(--mat-datepicker-calendar-container-text-color, var(--mat-sys-on-surface));box-shadow:var(--mat-datepicker-calendar-container-elevation-shadow, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12));border-radius:var(--mat-datepicker-calendar-container-shape, var(--mat-sys-corner-large))}.mat-datepicker-content.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-dropdown-enter 120ms cubic-bezier(0, 0, 0.2, 1)}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content .mat-datepicker-content-container-with-custom-header .mat-calendar{height:auto}.mat-datepicker-content .mat-datepicker-close-button{position:absolute;top:100%;left:0;margin-top:8px}.mat-datepicker-content-animating .mat-datepicker-content .mat-datepicker-close-button{display:none}.mat-datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.mat-datepicker-content-touch{display:block;max-height:80vh;box-shadow:var(--mat-datepicker-calendar-container-touch-elevation-shadow, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12));border-radius:var(--mat-datepicker-calendar-container-touch-shape, var(--mat-sys-corner-extra-large));position:relative;overflow:visible}.mat-datepicker-content-touch.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-dialog-enter 150ms cubic-bezier(0, 0, 0.2, 1)}.mat-datepicker-content-touch .mat-datepicker-content-container{min-height:312px;max-height:788px;min-width:250px;max-width:750px}.mat-datepicker-content-touch .mat-calendar{width:100%;height:auto}.mat-datepicker-content-exit.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-exit 100ms linear}@media all and (orientation: landscape){.mat-datepicker-content-touch .mat-datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-datepicker-content-touch .mat-datepicker-content-container{width:80vw;height:100vw}.mat-datepicker-content-touch .mat-datepicker-content-container-with-actions{height:115vw}}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDatepickerContent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-datepicker-content',\n      host: {\n        'class': 'mat-datepicker-content',\n        '[class]': 'color ? \"mat-\" + color : \"\"',\n        '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n        '[class.mat-datepicker-content-animations-enabled]': '!_animationsDisabled'\n      },\n      exportAs: 'matDatepickerContent',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      imports: [CdkTrapFocus, MatCalendar, CdkPortalOutlet, MatButton],\n      template: \"<div\\n  cdkTrapFocus\\n  role=\\\"dialog\\\"\\n  [attr.aria-modal]=\\\"true\\\"\\n  [attr.aria-labelledby]=\\\"_dialogLabelId ?? undefined\\\"\\n  class=\\\"mat-datepicker-content-container\\\"\\n  [class.mat-datepicker-content-container-with-custom-header]=\\\"datepicker.calendarHeaderComponent\\\"\\n  [class.mat-datepicker-content-container-with-actions]=\\\"_actionsPortal\\\">\\n  <mat-calendar\\n    [id]=\\\"datepicker.id\\\"\\n    [class]=\\\"datepicker.panelClass\\\"\\n    [startAt]=\\\"datepicker.startAt\\\"\\n    [startView]=\\\"datepicker.startView\\\"\\n    [minDate]=\\\"datepicker._getMinDate()\\\"\\n    [maxDate]=\\\"datepicker._getMaxDate()\\\"\\n    [dateFilter]=\\\"datepicker._getDateFilter()\\\"\\n    [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\"\\n    [selected]=\\\"_getSelected()\\\"\\n    [dateClass]=\\\"datepicker.dateClass\\\"\\n    [comparisonStart]=\\\"comparisonStart\\\"\\n    [comparisonEnd]=\\\"comparisonEnd\\\"\\n    [startDateAccessibleName]=\\\"startDateAccessibleName\\\"\\n    [endDateAccessibleName]=\\\"endDateAccessibleName\\\"\\n    (yearSelected)=\\\"datepicker._selectYear($event)\\\"\\n    (monthSelected)=\\\"datepicker._selectMonth($event)\\\"\\n    (viewChanged)=\\\"datepicker._viewChanged($event)\\\"\\n    (_userSelection)=\\\"_handleUserSelection($event)\\\"\\n    (_userDragDrop)=\\\"_handleUserDragDrop($event)\\\"></mat-calendar>\\n\\n  <ng-template [cdkPortalOutlet]=\\\"_actionsPortal\\\"></ng-template>\\n\\n  <!-- Invisible close button for screen reader users. -->\\n  <button\\n    type=\\\"button\\\"\\n    matButton=\\\"elevated\\\"\\n    [color]=\\\"color || 'primary'\\\"\\n    class=\\\"mat-datepicker-close-button\\\"\\n    [class.cdk-visually-hidden]=\\\"!_closeButtonFocused\\\"\\n    (focus)=\\\"_closeButtonFocused = true\\\"\\n    (blur)=\\\"_closeButtonFocused = false\\\"\\n    (click)=\\\"datepicker.close()\\\">{{ _closeButtonText }}</button>\\n</div>\\n\",\n      styles: [\"@keyframes _mat-datepicker-content-dropdown-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}@keyframes _mat-datepicker-content-dialog-enter{from{opacity:0;transform:scale(0.8)}to{opacity:1;transform:none}}@keyframes _mat-datepicker-content-exit{from{opacity:1}to{opacity:0}}.mat-datepicker-content{display:block;background-color:var(--mat-datepicker-calendar-container-background-color, var(--mat-sys-surface-container-high));color:var(--mat-datepicker-calendar-container-text-color, var(--mat-sys-on-surface));box-shadow:var(--mat-datepicker-calendar-container-elevation-shadow, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12));border-radius:var(--mat-datepicker-calendar-container-shape, var(--mat-sys-corner-large))}.mat-datepicker-content.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-dropdown-enter 120ms cubic-bezier(0, 0, 0.2, 1)}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content .mat-datepicker-content-container-with-custom-header .mat-calendar{height:auto}.mat-datepicker-content .mat-datepicker-close-button{position:absolute;top:100%;left:0;margin-top:8px}.mat-datepicker-content-animating .mat-datepicker-content .mat-datepicker-close-button{display:none}.mat-datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.mat-datepicker-content-touch{display:block;max-height:80vh;box-shadow:var(--mat-datepicker-calendar-container-touch-elevation-shadow, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12));border-radius:var(--mat-datepicker-calendar-container-touch-shape, var(--mat-sys-corner-extra-large));position:relative;overflow:visible}.mat-datepicker-content-touch.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-dialog-enter 150ms cubic-bezier(0, 0, 0.2, 1)}.mat-datepicker-content-touch .mat-datepicker-content-container{min-height:312px;max-height:788px;min-width:250px;max-width:750px}.mat-datepicker-content-touch .mat-calendar{width:100%;height:auto}.mat-datepicker-content-exit.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-exit 100ms linear}@media all and (orientation: landscape){.mat-datepicker-content-touch .mat-datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-datepicker-content-touch .mat-datepicker-content-container{width:80vw;height:100vw}.mat-datepicker-content-touch .mat-datepicker-content-container-with-actions{height:115vw}}\\n\"]\n    }]\n  }], () => [], {\n    _calendar: [{\n      type: ViewChild,\n      args: [MatCalendar]\n    }],\n    color: [{\n      type: Input\n    }]\n  });\n})();\n/** Base class for a datepicker. */\nclass MatDatepickerBase {\n  _injector = inject(Injector);\n  _viewContainerRef = inject(ViewContainerRef);\n  _dateAdapter = inject(DateAdapter, {\n    optional: true\n  });\n  _dir = inject(Directionality, {\n    optional: true\n  });\n  _model = inject(MatDateSelectionModel);\n  _animationsDisabled = _animationsDisabled();\n  _scrollStrategy = inject(MAT_DATEPICKER_SCROLL_STRATEGY);\n  _inputStateChanges = Subscription.EMPTY;\n  _document = inject(DOCUMENT);\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  calendarHeaderComponent;\n  /** The date to open the calendar to initially. */\n  get startAt() {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this.datepickerInput ? this.datepickerInput.getStartValue() : null);\n  }\n  set startAt(value) {\n    this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _startAt;\n  /** The view that the calendar should start in. */\n  startView = 'month';\n  /**\n   * Theme color of the datepicker's calendar. This API is supported in M2 themes only, it\n   * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/datepicker/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  get color() {\n    return this._color || (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n  }\n  set color(value) {\n    this._color = value;\n  }\n  _color;\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a dropdown and elements have more padding to allow for bigger touch targets.\n   */\n  touchUi = false;\n  /** Whether the datepicker pop-up should be disabled. */\n  get disabled() {\n    return this._disabled === undefined && this.datepickerInput ? this.datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value) {\n    if (value !== this._disabled) {\n      this._disabled = value;\n      this.stateChanges.next(undefined);\n    }\n  }\n  _disabled;\n  /** Preferred position of the datepicker in the X axis. */\n  xPosition = 'start';\n  /** Preferred position of the datepicker in the Y axis. */\n  yPosition = 'below';\n  /**\n   * Whether to restore focus to the previously-focused element when the calendar is closed.\n   * Note that automatic focus restoration is an accessibility feature and it is recommended that\n   * you provide your own equivalent, if you decide to turn it off.\n   */\n  restoreFocus = true;\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  yearSelected = new EventEmitter();\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  monthSelected = new EventEmitter();\n  /**\n   * Emits when the current view changes.\n   */\n  viewChanged = new EventEmitter(true);\n  /** Function that can be used to add custom CSS classes to dates. */\n  dateClass;\n  /** Emits when the datepicker has been opened. */\n  openedStream = new EventEmitter();\n  /** Emits when the datepicker has been closed. */\n  closedStream = new EventEmitter();\n  /** Classes to be passed to the date picker panel. */\n  get panelClass() {\n    return this._panelClass;\n  }\n  set panelClass(value) {\n    this._panelClass = coerceStringArray(value);\n  }\n  _panelClass;\n  /** Whether the calendar is open. */\n  get opened() {\n    return this._opened;\n  }\n  set opened(value) {\n    if (value) {\n      this.open();\n    } else {\n      this.close();\n    }\n  }\n  _opened = false;\n  /** The id for the datepicker calendar. */\n  id = inject(_IdGenerator).getId('mat-datepicker-');\n  /** The minimum selectable date. */\n  _getMinDate() {\n    return this.datepickerInput && this.datepickerInput.min;\n  }\n  /** The maximum selectable date. */\n  _getMaxDate() {\n    return this.datepickerInput && this.datepickerInput.max;\n  }\n  _getDateFilter() {\n    return this.datepickerInput && this.datepickerInput.dateFilter;\n  }\n  /** A reference to the overlay into which we've rendered the calendar. */\n  _overlayRef;\n  /** Reference to the component instance rendered in the overlay. */\n  _componentRef;\n  /** The element that was focused before the datepicker was opened. */\n  _focusedElementBeforeOpen = null;\n  /** Unique class that will be added to the backdrop so that the test harnesses can look it up. */\n  _backdropHarnessClass = `${this.id}-backdrop`;\n  /** Currently-registered actions portal. */\n  _actionsPortal;\n  /** The input element this datepicker is associated with. */\n  datepickerInput;\n  /** Emits when the datepicker's state changes. */\n  stateChanges = new Subject();\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  constructor() {\n    if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    this._model.selectionChanged.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n  ngOnChanges(changes) {\n    const positionChange = changes['xPosition'] || changes['yPosition'];\n    if (positionChange && !positionChange.firstChange && this._overlayRef) {\n      const positionStrategy = this._overlayRef.getConfig().positionStrategy;\n      if (positionStrategy instanceof FlexibleConnectedPositionStrategy) {\n        this._setConnectedPositions(positionStrategy);\n        if (this.opened) {\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n    this.stateChanges.next(undefined);\n  }\n  ngOnDestroy() {\n    this._destroyOverlay();\n    this.close();\n    this._inputStateChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n  /** Selects the given date */\n  select(date) {\n    this._model.add(date);\n  }\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear) {\n    this.yearSelected.emit(normalizedYear);\n  }\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n  /** Emits changed view */\n  _viewChanged(view) {\n    this.viewChanged.emit(view);\n  }\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   * @returns Selection model that the input should hook itself up to.\n   */\n  registerInput(input) {\n    if (this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._inputStateChanges.unsubscribe();\n    this.datepickerInput = input;\n    this._inputStateChanges = input.stateChanges.subscribe(() => this.stateChanges.next(undefined));\n    return this._model;\n  }\n  /**\n   * Registers a portal containing action buttons with the datepicker.\n   * @param portal Portal to be registered.\n   */\n  registerActions(portal) {\n    if (this._actionsPortal && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('A MatDatepicker can only be associated with a single actions row.');\n    }\n    this._actionsPortal = portal;\n    this._componentRef?.instance._assignActions(portal, true);\n  }\n  /**\n   * Removes a portal containing action buttons from the datepicker.\n   * @param portal Portal to be removed.\n   */\n  removeActions(portal) {\n    if (portal === this._actionsPortal) {\n      this._actionsPortal = null;\n      this._componentRef?.instance._assignActions(null, true);\n    }\n  }\n  /** Open the calendar. */\n  open() {\n    // Skip reopening if there's an in-progress animation to avoid overlapping\n    // sequences which can cause \"changed after checked\" errors. See #25837.\n    if (this._opened || this.disabled || this._componentRef?.instance._isAnimating) {\n      return;\n    }\n    if (!this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    this._focusedElementBeforeOpen = _getFocusedElementPierceShadowDom();\n    this._openOverlay();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n  /** Close the calendar. */\n  close() {\n    // Skip reopening if there's an in-progress animation to avoid overlapping\n    // sequences which can cause \"changed after checked\" errors. See #25837.\n    if (!this._opened || this._componentRef?.instance._isAnimating) {\n      return;\n    }\n    const canRestoreFocus = this.restoreFocus && this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function';\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n      }\n    };\n    if (this._componentRef) {\n      const {\n        instance,\n        location\n      } = this._componentRef;\n      instance._animationDone.pipe(take(1)).subscribe(() => {\n        const activeElement = this._document.activeElement;\n        // Since we restore focus after the exit animation, we have to check that\n        // the user didn't move focus themselves inside the `close` handler.\n        if (canRestoreFocus && (!activeElement || activeElement === this._document.activeElement || location.nativeElement.contains(activeElement))) {\n          this._focusedElementBeforeOpen.focus();\n        }\n        this._focusedElementBeforeOpen = null;\n        this._destroyOverlay();\n      });\n      instance._startExitAnimation();\n    }\n    if (canRestoreFocus) {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n  /** Applies the current pending selection on the overlay to the model. */\n  _applyPendingSelection() {\n    this._componentRef?.instance?._applyPendingSelection();\n  }\n  /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\n  _forwardContentValues(instance) {\n    instance.datepicker = this;\n    instance.color = this.color;\n    instance._dialogLabelId = this.datepickerInput.getOverlayLabelId();\n    instance._assignActions(this._actionsPortal, false);\n  }\n  /** Opens the overlay with the calendar. */\n  _openOverlay() {\n    this._destroyOverlay();\n    const isDialog = this.touchUi;\n    const portal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    const overlayRef = this._overlayRef = createOverlayRef(this._injector, new OverlayConfig({\n      positionStrategy: isDialog ? this._getDialogStrategy() : this._getDropdownStrategy(),\n      hasBackdrop: true,\n      backdropClass: [isDialog ? 'cdk-overlay-dark-backdrop' : 'mat-overlay-transparent-backdrop', this._backdropHarnessClass],\n      direction: this._dir || 'ltr',\n      scrollStrategy: isDialog ? createBlockScrollStrategy(this._injector) : this._scrollStrategy(),\n      panelClass: `mat-datepicker-${isDialog ? 'dialog' : 'popup'}`,\n      disableAnimations: this._animationsDisabled\n    }));\n    this._getCloseStream(overlayRef).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n      this.close();\n    });\n    // The `preventDefault` call happens inside the calendar as well, however focus moves into\n    // it inside a timeout which can give browsers a chance to fire off a keyboard event in-between\n    // that can scroll the page (see #24969). Always block default actions of arrow keys for the\n    // entire overlay so the page doesn't get scrolled by accident.\n    overlayRef.keydownEvents().subscribe(event => {\n      const keyCode = event.keyCode;\n      if (keyCode === UP_ARROW || keyCode === DOWN_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW || keyCode === PAGE_UP || keyCode === PAGE_DOWN) {\n        event.preventDefault();\n      }\n    });\n    this._componentRef = overlayRef.attach(portal);\n    this._forwardContentValues(this._componentRef.instance);\n    // Update the position once the calendar has rendered. Only relevant in dropdown mode.\n    if (!isDialog) {\n      afterNextRender(() => {\n        overlayRef.updatePosition();\n      }, {\n        injector: this._injector\n      });\n    }\n  }\n  /** Destroys the current overlay. */\n  _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = this._componentRef = null;\n    }\n  }\n  /** Gets a position strategy that will open the calendar as a dropdown. */\n  _getDialogStrategy() {\n    return createGlobalPositionStrategy(this._injector).centerHorizontally().centerVertically();\n  }\n  /** Gets a position strategy that will open the calendar as a dropdown. */\n  _getDropdownStrategy() {\n    const strategy = createFlexibleConnectedPositionStrategy(this._injector, this.datepickerInput.getConnectedOverlayOrigin()).withTransformOriginOn('.mat-datepicker-content').withFlexibleDimensions(false).withViewportMargin(8).withLockedPosition();\n    return this._setConnectedPositions(strategy);\n  }\n  /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\n  _setConnectedPositions(strategy) {\n    const primaryX = this.xPosition === 'end' ? 'end' : 'start';\n    const secondaryX = primaryX === 'start' ? 'end' : 'start';\n    const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';\n    const secondaryY = primaryY === 'top' ? 'bottom' : 'top';\n    return strategy.withPositions([{\n      originX: primaryX,\n      originY: secondaryY,\n      overlayX: primaryX,\n      overlayY: primaryY\n    }, {\n      originX: primaryX,\n      originY: primaryY,\n      overlayX: primaryX,\n      overlayY: secondaryY\n    }, {\n      originX: secondaryX,\n      originY: secondaryY,\n      overlayX: secondaryX,\n      overlayY: primaryY\n    }, {\n      originX: secondaryX,\n      originY: primaryY,\n      overlayX: secondaryX,\n      overlayY: secondaryY\n    }]);\n  }\n  /** Gets an observable that will emit when the overlay is supposed to be closed. */\n  _getCloseStream(overlayRef) {\n    const ctrlShiftMetaModifiers = ['ctrlKey', 'shiftKey', 'metaKey'];\n    return merge(overlayRef.backdropClick(), overlayRef.detachments(), overlayRef.keydownEvents().pipe(filter(event => {\n      // Closing on alt + up is only valid when there's an input associated with the datepicker.\n      return event.keyCode === ESCAPE && !hasModifierKey(event) || this.datepickerInput && hasModifierKey(event, 'altKey') && event.keyCode === UP_ARROW && ctrlShiftMetaModifiers.every(modifier => !hasModifierKey(event, modifier));\n    })));\n  }\n  static ɵfac = function MatDatepickerBase_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDatepickerBase)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDatepickerBase,\n    inputs: {\n      calendarHeaderComponent: \"calendarHeaderComponent\",\n      startAt: \"startAt\",\n      startView: \"startView\",\n      color: \"color\",\n      touchUi: [2, \"touchUi\", \"touchUi\", booleanAttribute],\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n      xPosition: \"xPosition\",\n      yPosition: \"yPosition\",\n      restoreFocus: [2, \"restoreFocus\", \"restoreFocus\", booleanAttribute],\n      dateClass: \"dateClass\",\n      panelClass: \"panelClass\",\n      opened: [2, \"opened\", \"opened\", booleanAttribute]\n    },\n    outputs: {\n      yearSelected: \"yearSelected\",\n      monthSelected: \"monthSelected\",\n      viewChanged: \"viewChanged\",\n      openedStream: \"opened\",\n      closedStream: \"closed\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDatepickerBase, [{\n    type: Directive\n  }], () => [], {\n    calendarHeaderComponent: [{\n      type: Input\n    }],\n    startAt: [{\n      type: Input\n    }],\n    startView: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    touchUi: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    xPosition: [{\n      type: Input\n    }],\n    yPosition: [{\n      type: Input\n    }],\n    restoreFocus: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    yearSelected: [{\n      type: Output\n    }],\n    monthSelected: [{\n      type: Output\n    }],\n    viewChanged: [{\n      type: Output\n    }],\n    dateClass: [{\n      type: Input\n    }],\n    openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    opened: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\nclass MatDatepicker extends MatDatepickerBase {\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatDatepicker_BaseFactory;\n    return function MatDatepicker_Factory(__ngFactoryType__) {\n      return (ɵMatDatepicker_BaseFactory || (ɵMatDatepicker_BaseFactory = i0.ɵɵgetInheritedFactory(MatDatepicker)))(__ngFactoryType__ || MatDatepicker);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatDatepicker,\n    selectors: [[\"mat-datepicker\"]],\n    exportAs: [\"matDatepicker\"],\n    features: [i0.ɵɵProvidersFeature([MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, {\n      provide: MatDatepickerBase,\n      useExisting: MatDatepicker\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function MatDatepicker_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDatepicker, [{\n    type: Component,\n    args: [{\n      selector: 'mat-datepicker',\n      template: '',\n      exportAs: 'matDatepicker',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, {\n        provide: MatDatepickerBase,\n        useExisting: MatDatepicker\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nclass MatDatepickerInputEvent {\n  target;\n  targetElement;\n  /** The new value for the target datepicker input. */\n  value;\n  constructor(/** Reference to the datepicker input component that emitted the event. */\n  target, /** Reference to the native input element associated with the datepicker input. */\n  targetElement) {\n    this.target = target;\n    this.targetElement = targetElement;\n    this.value = this.target.value;\n  }\n}\n/** Base class for datepicker inputs. */\nclass MatDatepickerInputBase {\n  _elementRef = inject(ElementRef);\n  _dateAdapter = inject(DateAdapter, {\n    optional: true\n  });\n  _dateFormats = inject(MAT_DATE_FORMATS, {\n    optional: true\n  });\n  /** Whether the component has been initialized. */\n  _isInitialized;\n  /** The value of the input. */\n  get value() {\n    return this._model ? this._getValueFromModel(this._model.selection) : this._pendingValue;\n  }\n  set value(value) {\n    this._assignValueProgrammatically(value);\n  }\n  _model;\n  /** Whether the datepicker-input is disabled. */\n  get disabled() {\n    return !!this._disabled || this._parentDisabled();\n  }\n  set disabled(value) {\n    const newValue = value;\n    const element = this._elementRef.nativeElement;\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this.stateChanges.next(undefined);\n    }\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.\n    // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the\n    // element has been inserted.\n    if (newValue && this._isInitialized && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  _disabled;\n  /** Emits when a `change` event is fired on this `<input>`. */\n  dateChange = new EventEmitter();\n  /** Emits when an `input` event is fired on this `<input>`. */\n  dateInput = new EventEmitter();\n  /** Emits when the internal state has changed */\n  stateChanges = new Subject();\n  _onTouched = () => {};\n  _validatorOnChange = () => {};\n  _cvaOnChange = () => {};\n  _valueChangesSubscription = Subscription.EMPTY;\n  _localeSubscription = Subscription.EMPTY;\n  /**\n   * Since the value is kept on the model which is assigned in an Input,\n   * we might get a value before we have a model. This property keeps track\n   * of the value until we have somewhere to assign it.\n   */\n  _pendingValue;\n  /** The form control validator for whether the input parses. */\n  _parseValidator = () => {\n    return this._lastValueValid ? null : {\n      'matDatepickerParse': {\n        'text': this._elementRef.nativeElement.value\n      }\n    };\n  };\n  /** The form control validator for the date filter. */\n  _filterValidator = control => {\n    const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !controlValue || this._matchesFilter(controlValue) ? null : {\n      'matDatepickerFilter': true\n    };\n  };\n  /** The form control validator for the min date. */\n  _minValidator = control => {\n    const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const min = this._getMinDate();\n    return !min || !controlValue || this._dateAdapter.compareDate(min, controlValue) <= 0 ? null : {\n      'matDatepickerMin': {\n        'min': min,\n        'actual': controlValue\n      }\n    };\n  };\n  /** The form control validator for the max date. */\n  _maxValidator = control => {\n    const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const max = this._getMaxDate();\n    return !max || !controlValue || this._dateAdapter.compareDate(max, controlValue) >= 0 ? null : {\n      'matDatepickerMax': {\n        'max': max,\n        'actual': controlValue\n      }\n    };\n  };\n  /** Gets the base validator functions. */\n  _getValidators() {\n    return [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator];\n  }\n  /** Registers a date selection model with the input. */\n  _registerModel(model) {\n    this._model = model;\n    this._valueChangesSubscription.unsubscribe();\n    if (this._pendingValue) {\n      this._assignValue(this._pendingValue);\n    }\n    this._valueChangesSubscription = this._model.selectionChanged.subscribe(event => {\n      if (this._shouldHandleChangeEvent(event)) {\n        const value = this._getValueFromModel(event.selection);\n        this._lastValueValid = this._isValidValue(value);\n        this._cvaOnChange(value);\n        this._onTouched();\n        this._formatValue(value);\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      }\n    });\n  }\n  /** Whether the last value set on the input was valid. */\n  _lastValueValid = false;\n  constructor() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = this._dateAdapter.localeChanges.subscribe(() => {\n      this._assignValueProgrammatically(this.value);\n    });\n  }\n  ngAfterViewInit() {\n    this._isInitialized = true;\n  }\n  ngOnChanges(changes) {\n    if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n      this.stateChanges.next(undefined);\n    }\n  }\n  ngOnDestroy() {\n    this._valueChangesSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this.stateChanges.complete();\n  }\n  /** @docs-private */\n  registerOnValidatorChange(fn) {\n    this._validatorOnChange = fn;\n  }\n  /** @docs-private */\n  validate(c) {\n    return this._validator ? this._validator(c) : null;\n  }\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value) {\n    this._assignValueProgrammatically(value);\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._cvaOnChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  _onKeydown(event) {\n    const ctrlShiftMetaModifiers = ['ctrlKey', 'shiftKey', 'metaKey'];\n    const isAltDownArrow = hasModifierKey(event, 'altKey') && event.keyCode === DOWN_ARROW && ctrlShiftMetaModifiers.every(modifier => !hasModifierKey(event, modifier));\n    if (isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._openPopup();\n      event.preventDefault();\n    }\n  }\n  _onInput(event) {\n    const value = event.target.value;\n    const lastValueWasValid = this._lastValueValid;\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = this._isValidValue(date);\n    date = this._dateAdapter.getValidDateOrNull(date);\n    const hasChanged = !this._dateAdapter.sameDate(date, this.value);\n    // We need to fire the CVA change event for all\n    // nulls, otherwise the validators won't run.\n    if (!date || hasChanged) {\n      this._cvaOnChange(date);\n    } else {\n      // Call the CVA change handler for invalid values\n      // since this is what marks the control as dirty.\n      if (value && !this.value) {\n        this._cvaOnChange(date);\n      }\n      if (lastValueWasValid !== this._lastValueValid) {\n        this._validatorOnChange();\n      }\n    }\n    if (hasChanged) {\n      this._assignValue(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n    this._onTouched();\n  }\n  /** Formats a value and sets it on the input element. */\n  _formatValue(value) {\n    this._elementRef.nativeElement.value = value != null ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n  /** Assigns a value to the model. */\n  _assignValue(value) {\n    // We may get some incoming values before the model was\n    // assigned. Save the value so that we can assign it later.\n    if (this._model) {\n      this._assignValueToModel(value);\n      this._pendingValue = null;\n    } else {\n      this._pendingValue = value;\n    }\n  }\n  /** Whether a value is considered valid. */\n  _isValidValue(value) {\n    return !value || this._dateAdapter.isValid(value);\n  }\n  /**\n   * Checks whether a parent control is disabled. This is in place so that it can be overridden\n   * by inputs extending this one which can be placed inside of a group that can be disabled.\n   */\n  _parentDisabled() {\n    return false;\n  }\n  /** Programmatically assigns a value to the input. */\n  _assignValueProgrammatically(value) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = this._isValidValue(value);\n    value = this._dateAdapter.getValidDateOrNull(value);\n    this._assignValue(value);\n    this._formatValue(value);\n  }\n  /** Gets whether a value matches the current date filter. */\n  _matchesFilter(value) {\n    const filter = this._getDateFilter();\n    return !filter || filter(value);\n  }\n  static ɵfac = function MatDatepickerInputBase_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDatepickerInputBase)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDatepickerInputBase,\n    inputs: {\n      value: \"value\",\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute]\n    },\n    outputs: {\n      dateChange: \"dateChange\",\n      dateInput: \"dateInput\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDatepickerInputBase, [{\n    type: Directive\n  }], () => [], {\n    value: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    dateChange: [{\n      type: Output\n    }],\n    dateInput: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Checks whether the `SimpleChanges` object from an `ngOnChanges`\n * callback has any changes, accounting for date objects.\n */\nfunction dateInputsHaveChanged(changes, adapter) {\n  const keys = Object.keys(changes);\n  for (let key of keys) {\n    const {\n      previousValue,\n      currentValue\n    } = changes[key];\n    if (adapter.isDateInstance(previousValue) && adapter.isDateInstance(currentValue)) {\n      if (!adapter.sameDate(previousValue, currentValue)) {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** @docs-private */\nconst MAT_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n/** @docs-private */\nconst MAT_DATEPICKER_VALIDATORS = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n/** Directive used to connect an input to a MatDatepicker. */\nclass MatDatepickerInput extends MatDatepickerInputBase {\n  _formField = inject(MAT_FORM_FIELD, {\n    optional: true\n  });\n  _closedSubscription = Subscription.EMPTY;\n  _openedSubscription = Subscription.EMPTY;\n  /** The datepicker that this input is associated with. */\n  set matDatepicker(datepicker) {\n    if (datepicker) {\n      this._datepicker = datepicker;\n      this._ariaOwns.set(datepicker.opened ? datepicker.id : null);\n      this._closedSubscription = datepicker.closedStream.subscribe(() => {\n        this._onTouched();\n        this._ariaOwns.set(null);\n      });\n      this._openedSubscription = datepicker.openedStream.subscribe(() => {\n        this._ariaOwns.set(datepicker.id);\n      });\n      this._registerModel(datepicker.registerInput(this));\n    }\n  }\n  _datepicker;\n  /** The id of the panel owned by this input. */\n  _ariaOwns = signal(null, ...(ngDevMode ? [{\n    debugName: \"_ariaOwns\"\n  }] : []));\n  /** The minimum valid date. */\n  get min() {\n    return this._min;\n  }\n  set min(value) {\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    if (!this._dateAdapter.sameDate(validValue, this._min)) {\n      this._min = validValue;\n      this._validatorOnChange();\n    }\n  }\n  _min;\n  /** The maximum valid date. */\n  get max() {\n    return this._max;\n  }\n  set max(value) {\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    if (!this._dateAdapter.sameDate(validValue, this._max)) {\n      this._max = validValue;\n      this._validatorOnChange();\n    }\n  }\n  _max;\n  /** Function that can be used to filter out dates within the datepicker. */\n  get dateFilter() {\n    return this._dateFilter;\n  }\n  set dateFilter(value) {\n    const wasMatchingValue = this._matchesFilter(this.value);\n    this._dateFilter = value;\n    if (this._matchesFilter(this.value) !== wasMatchingValue) {\n      this._validatorOnChange();\n    }\n  }\n  _dateFilter;\n  /** The combined form control validator for this input. */\n  _validator;\n  constructor() {\n    super();\n    this._validator = Validators.compose(super._getValidators());\n  }\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin() {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n  /** Gets the ID of an element that should be used a description for the calendar overlay. */\n  getOverlayLabelId() {\n    if (this._formField) {\n      return this._formField.getLabelId();\n    }\n    return this._elementRef.nativeElement.getAttribute('aria-labelledby');\n  }\n  /** Returns the palette used by the input's form field, if any. */\n  getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n  /** Gets the value at which the calendar should start. */\n  getStartValue() {\n    return this.value;\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._closedSubscription.unsubscribe();\n    this._openedSubscription.unsubscribe();\n  }\n  /** Opens the associated datepicker. */\n  _openPopup() {\n    if (this._datepicker) {\n      this._datepicker.open();\n    }\n  }\n  _getValueFromModel(modelValue) {\n    return modelValue;\n  }\n  _assignValueToModel(value) {\n    if (this._model) {\n      this._model.updateSelection(value, this);\n    }\n  }\n  /** Gets the input's minimum date. */\n  _getMinDate() {\n    return this._min;\n  }\n  /** Gets the input's maximum date. */\n  _getMaxDate() {\n    return this._max;\n  }\n  /** Gets the input's date filtering function. */\n  _getDateFilter() {\n    return this._dateFilter;\n  }\n  _shouldHandleChangeEvent(event) {\n    return event.source !== this;\n  }\n  static ɵfac = function MatDatepickerInput_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDatepickerInput)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDatepickerInput,\n    selectors: [[\"input\", \"matDatepicker\", \"\"]],\n    hostAttrs: [1, \"mat-datepicker-input\"],\n    hostVars: 6,\n    hostBindings: function MatDatepickerInput_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function MatDatepickerInput_input_HostBindingHandler($event) {\n          return ctx._onInput($event);\n        })(\"change\", function MatDatepickerInput_change_HostBindingHandler() {\n          return ctx._onChange();\n        })(\"blur\", function MatDatepickerInput_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        })(\"keydown\", function MatDatepickerInput_keydown_HostBindingHandler($event) {\n          return ctx._onKeydown($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵdomProperty(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"aria-haspopup\", ctx._datepicker ? \"dialog\" : null)(\"aria-owns\", ctx._ariaOwns())(\"min\", ctx.min ? ctx._dateAdapter.toIso8601(ctx.min) : null)(\"max\", ctx.max ? ctx._dateAdapter.toIso8601(ctx.max) : null)(\"data-mat-calendar\", ctx._datepicker ? ctx._datepicker.id : null);\n      }\n    },\n    inputs: {\n      matDatepicker: \"matDatepicker\",\n      min: \"min\",\n      max: \"max\",\n      dateFilter: [0, \"matDatepickerFilter\", \"dateFilter\"]\n    },\n    exportAs: [\"matDatepickerInput\"],\n    features: [i0.ɵɵProvidersFeature([MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, {\n      provide: MAT_INPUT_VALUE_ACCESSOR,\n      useExisting: MatDatepickerInput\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDatepickerInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matDatepicker]',\n      providers: [MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, {\n        provide: MAT_INPUT_VALUE_ACCESSOR,\n        useExisting: MatDatepickerInput\n      }],\n      host: {\n        'class': 'mat-datepicker-input',\n        '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n        '[attr.aria-owns]': '_ariaOwns()',\n        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n        // Used by the test harness to tie this input to its calendar. We can't depend on\n        // `aria-owns` for this, because it's only defined while the calendar is open.\n        '[attr.data-mat-calendar]': '_datepicker ? _datepicker.id : null',\n        '[disabled]': 'disabled',\n        '(input)': '_onInput($event)',\n        '(change)': '_onChange()',\n        '(blur)': '_onBlur()',\n        '(keydown)': '_onKeydown($event)'\n      },\n      exportAs: 'matDatepickerInput'\n    }]\n  }], () => [], {\n    matDatepicker: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input,\n      args: ['matDatepickerFilter']\n    }]\n  });\n})();\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\nclass MatDatepickerToggleIcon {\n  static ɵfac = function MatDatepickerToggleIcon_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDatepickerToggleIcon)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDatepickerToggleIcon,\n    selectors: [[\"\", \"matDatepickerToggleIcon\", \"\"]]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDatepickerToggleIcon, [{\n    type: Directive,\n    args: [{\n      selector: '[matDatepickerToggleIcon]'\n    }]\n  }], null, null);\n})();\nclass MatDatepickerToggle {\n  _intl = inject(MatDatepickerIntl);\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _stateChanges = Subscription.EMPTY;\n  /** Datepicker instance that the button will toggle. */\n  datepicker;\n  /** Tabindex for the toggle. */\n  tabIndex;\n  /** Screen-reader label for the button. */\n  ariaLabel;\n  /** Whether the toggle button is disabled. */\n  get disabled() {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n    return !!this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = value;\n  }\n  _disabled;\n  /** Whether ripples on the toggle should be disabled. */\n  disableRipple;\n  /** Custom icon set by the consumer. */\n  _customIcon;\n  /** Underlying button element. */\n  _button;\n  constructor() {\n    const defaultTabIndex = inject(new HostAttributeToken('tabindex'), {\n      optional: true\n    });\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n  }\n  ngOnChanges(changes) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n  _open(event) {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n  _watchStateChanges() {\n    const datepickerStateChanged = this.datepicker ? this.datepicker.stateChanges : of();\n    const inputStateChanged = this.datepicker && this.datepicker.datepickerInput ? this.datepicker.datepickerInput.stateChanges : of();\n    const datepickerToggled = this.datepicker ? merge(this.datepicker.openedStream, this.datepicker.closedStream) : of();\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(this._intl.changes, datepickerStateChanged, inputStateChanged, datepickerToggled).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n  static ɵfac = function MatDatepickerToggle_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDatepickerToggle)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatDatepickerToggle,\n    selectors: [[\"mat-datepicker-toggle\"]],\n    contentQueries: function MatDatepickerToggle_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatDatepickerToggleIcon, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._customIcon = _t.first);\n      }\n    },\n    viewQuery: function MatDatepickerToggle_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._button = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-datepicker-toggle\"],\n    hostVars: 8,\n    hostBindings: function MatDatepickerToggle_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MatDatepickerToggle_click_HostBindingHandler($event) {\n          return ctx._open($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", null)(\"data-mat-calendar\", ctx.datepicker ? ctx.datepicker.id : null);\n        i0.ɵɵclassProp(\"mat-datepicker-toggle-active\", ctx.datepicker && ctx.datepicker.opened)(\"mat-accent\", ctx.datepicker && ctx.datepicker.color === \"accent\")(\"mat-warn\", ctx.datepicker && ctx.datepicker.color === \"warn\");\n      }\n    },\n    inputs: {\n      datepicker: [0, \"for\", \"datepicker\"],\n      tabIndex: \"tabIndex\",\n      ariaLabel: [0, \"aria-label\", \"ariaLabel\"],\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n      disableRipple: \"disableRipple\"\n    },\n    exportAs: [\"matDatepickerToggle\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c4,\n    decls: 4,\n    vars: 7,\n    consts: [[\"button\", \"\"], [\"matIconButton\", \"\", \"type\", \"button\", 3, \"tabIndex\", \"disabled\", \"disableRipple\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"fill\", \"currentColor\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 1, \"mat-datepicker-toggle-default-icon\"], [\"d\", \"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"]],\n    template: function MatDatepickerToggle_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c3);\n        i0.ɵɵelementStart(0, \"button\", 1, 0);\n        i0.ɵɵconditionalCreate(2, MatDatepickerToggle_Conditional_2_Template, 2, 0, \":svg:svg\", 2);\n        i0.ɵɵprojection(3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"tabIndex\", ctx.disabled ? -1 : ctx.tabIndex)(\"disabled\", ctx.disabled)(\"disableRipple\", ctx.disableRipple);\n        i0.ɵɵattribute(\"aria-haspopup\", ctx.datepicker ? \"dialog\" : null)(\"aria-label\", ctx.ariaLabel || ctx._intl.openCalendarLabel)(\"aria-expanded\", ctx.datepicker ? ctx.datepicker.opened : null);\n        i0.ɵɵadvance(2);\n        i0.ɵɵconditional(!ctx._customIcon ? 2 : -1);\n      }\n    },\n    dependencies: [MatIconButton],\n    styles: [\".mat-datepicker-toggle{pointer-events:auto;color:var(--mat-datepicker-toggle-icon-color, var(--mat-sys-on-surface-variant))}.mat-datepicker-toggle button{color:inherit}.mat-datepicker-toggle-active{color:var(--mat-datepicker-toggle-active-state-icon-color, var(--mat-sys-primary))}@media(forced-colors: active){.mat-datepicker-toggle-default-icon{color:CanvasText}}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDatepickerToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-datepicker-toggle',\n      host: {\n        'class': 'mat-datepicker-toggle',\n        '[attr.tabindex]': 'null',\n        '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n        '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n        '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n        // Used by the test harness to tie this toggle to its datepicker.\n        '[attr.data-mat-calendar]': 'datepicker ? datepicker.id : null',\n        // Bind the `click` on the host, rather than the inner `button`, so that we can call\n        // `stopPropagation` on it without affecting the user's `click` handlers. We need to stop\n        // it so that the input doesn't get focused automatically by the form field (See #21836).\n        '(click)': '_open($event)'\n      },\n      exportAs: 'matDatepickerToggle',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      imports: [MatIconButton],\n      template: \"<button\\n  #button\\n  matIconButton\\n  type=\\\"button\\\"\\n  [attr.aria-haspopup]=\\\"datepicker ? 'dialog' : null\\\"\\n  [attr.aria-label]=\\\"ariaLabel || _intl.openCalendarLabel\\\"\\n  [tabIndex]=\\\"disabled ? -1 : tabIndex\\\"\\n  [attr.aria-expanded]=\\\"datepicker ? datepicker.opened : null\\\"\\n  [disabled]=\\\"disabled\\\"\\n  [disableRipple]=\\\"disableRipple\\\">\\n\\n  @if (!_customIcon) {\\n    <svg\\n      class=\\\"mat-datepicker-toggle-default-icon\\\"\\n      viewBox=\\\"0 0 24 24\\\"\\n      width=\\\"24px\\\"\\n      height=\\\"24px\\\"\\n      fill=\\\"currentColor\\\"\\n      focusable=\\\"false\\\"\\n      aria-hidden=\\\"true\\\">\\n      <path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/>\\n    </svg>\\n  }\\n\\n  <ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content>\\n</button>\\n\",\n      styles: [\".mat-datepicker-toggle{pointer-events:auto;color:var(--mat-datepicker-toggle-icon-color, var(--mat-sys-on-surface-variant))}.mat-datepicker-toggle button{color:inherit}.mat-datepicker-toggle-active{color:var(--mat-datepicker-toggle-active-state-icon-color, var(--mat-sys-primary))}@media(forced-colors: active){.mat-datepicker-toggle-default-icon{color:CanvasText}}\\n\"]\n    }]\n  }], () => [], {\n    datepicker: [{\n      type: Input,\n      args: ['for']\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    disableRipple: [{\n      type: Input\n    }],\n    _customIcon: [{\n      type: ContentChild,\n      args: [MatDatepickerToggleIcon]\n    }],\n    _button: [{\n      type: ViewChild,\n      args: ['button']\n    }]\n  });\n})();\nclass MatDateRangeInput {\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _elementRef = inject(ElementRef);\n  _dateAdapter = inject(DateAdapter, {\n    optional: true\n  });\n  _formField = inject(MAT_FORM_FIELD, {\n    optional: true\n  });\n  _closedSubscription = Subscription.EMPTY;\n  _openedSubscription = Subscription.EMPTY;\n  _startInput;\n  _endInput;\n  /** Current value of the range input. */\n  get value() {\n    return this._model ? this._model.selection : null;\n  }\n  /** Unique ID for the group. */\n  id = inject(_IdGenerator).getId('mat-date-range-input-');\n  /** Whether the control is focused. */\n  focused = false;\n  /** Whether the control's label should float. */\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n  /** Name of the form control. */\n  controlType = 'mat-date-range-input';\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * Set the placeholder attribute on `matStartDate` and `matEndDate`.\n   * @docs-private\n   */\n  get placeholder() {\n    const start = this._startInput?._getPlaceholder() || '';\n    const end = this._endInput?._getPlaceholder() || '';\n    return start || end ? `${start} ${this.separator} ${end}` : '';\n  }\n  /** The range picker that this input is associated with. */\n  get rangePicker() {\n    return this._rangePicker;\n  }\n  set rangePicker(rangePicker) {\n    if (rangePicker) {\n      this._model = rangePicker.registerInput(this);\n      this._rangePicker = rangePicker;\n      this._closedSubscription.unsubscribe();\n      this._openedSubscription.unsubscribe();\n      this._ariaOwns.set(this.rangePicker.opened ? rangePicker.id : null);\n      this._closedSubscription = rangePicker.closedStream.subscribe(() => {\n        this._startInput?._onTouched();\n        this._endInput?._onTouched();\n        this._ariaOwns.set(null);\n      });\n      this._openedSubscription = rangePicker.openedStream.subscribe(() => {\n        this._ariaOwns.set(rangePicker.id);\n      });\n      this._registerModel(this._model);\n    }\n  }\n  _rangePicker;\n  /** The id of the panel owned by this input. */\n  _ariaOwns = signal(null, ...(ngDevMode ? [{\n    debugName: \"_ariaOwns\"\n  }] : []));\n  /** Whether the input is required. */\n  get required() {\n    return this._required ?? (this._isTargetRequired(this) || this._isTargetRequired(this._startInput) || this._isTargetRequired(this._endInput)) ?? false;\n  }\n  set required(value) {\n    this._required = value;\n  }\n  _required;\n  /** Function that can be used to filter out dates within the date range picker. */\n  get dateFilter() {\n    return this._dateFilter;\n  }\n  set dateFilter(value) {\n    const start = this._startInput;\n    const end = this._endInput;\n    const wasMatchingStart = start && start._matchesFilter(start.value);\n    const wasMatchingEnd = end && end._matchesFilter(start.value);\n    this._dateFilter = value;\n    if (start && start._matchesFilter(start.value) !== wasMatchingStart) {\n      start._validatorOnChange();\n    }\n    if (end && end._matchesFilter(end.value) !== wasMatchingEnd) {\n      end._validatorOnChange();\n    }\n  }\n  _dateFilter;\n  /** The minimum valid date. */\n  get min() {\n    return this._min;\n  }\n  set min(value) {\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    if (!this._dateAdapter.sameDate(validValue, this._min)) {\n      this._min = validValue;\n      this._revalidate();\n    }\n  }\n  _min;\n  /** The maximum valid date. */\n  get max() {\n    return this._max;\n  }\n  set max(value) {\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    if (!this._dateAdapter.sameDate(validValue, this._max)) {\n      this._max = validValue;\n      this._revalidate();\n    }\n  }\n  _max;\n  /** Whether the input is disabled. */\n  get disabled() {\n    return this._startInput && this._endInput ? this._startInput.disabled && this._endInput.disabled : this._groupDisabled;\n  }\n  set disabled(value) {\n    if (value !== this._groupDisabled) {\n      this._groupDisabled = value;\n      this.stateChanges.next(undefined);\n    }\n  }\n  _groupDisabled = false;\n  /** Whether the input is in an error state. */\n  get errorState() {\n    if (this._startInput && this._endInput) {\n      return this._startInput.errorState || this._endInput.errorState;\n    }\n    return false;\n  }\n  /** Whether the datepicker input is empty. */\n  get empty() {\n    const startEmpty = this._startInput ? this._startInput.isEmpty() : false;\n    const endEmpty = this._endInput ? this._endInput.isEmpty() : false;\n    return startEmpty && endEmpty;\n  }\n  /** Value for the `aria-describedby` attribute of the inputs. */\n  _ariaDescribedBy = null;\n  /** Date selection model currently registered with the input. */\n  _model;\n  /** Separator text to be shown between the inputs. */\n  separator = '–';\n  /** Start of the comparison range that should be shown in the calendar. */\n  comparisonStart = null;\n  /** End of the comparison range that should be shown in the calendar. */\n  comparisonEnd = null;\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * TODO(crisbeto): change type to `AbstractControlDirective` after #18206 lands.\n   * @docs-private\n   */\n  ngControl;\n  /** Emits when the input's state has changed. */\n  stateChanges = new Subject();\n  /**\n   * Disable the automatic labeling to avoid issues like #27241.\n   * @docs-private\n   */\n  disableAutomaticLabeling = true;\n  constructor() {\n    if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    // The datepicker module can be used both with MDC and non-MDC form fields. We have\n    // to conditionally add the MDC input class so that the range picker looks correctly.\n    if (this._formField?._elementRef.nativeElement.classList.contains('mat-mdc-form-field')) {\n      this._elementRef.nativeElement.classList.add('mat-mdc-input-element', 'mat-mdc-form-field-input-control', 'mdc-text-field__input');\n    }\n    // TODO(crisbeto): remove `as any` after #18206 lands.\n    this.ngControl = inject(ControlContainer, {\n      optional: true,\n      self: true\n    });\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get describedByIds() {\n    const element = this._elementRef.nativeElement;\n    const existingDescribedBy = element.getAttribute('aria-describedby');\n    return existingDescribedBy?.split(' ') || [];\n  }\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  setDescribedByIds(ids) {\n    this._ariaDescribedBy = ids.length ? ids.join(' ') : null;\n  }\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  onContainerClick() {\n    if (!this.focused && !this.disabled) {\n      if (!this._model || !this._model.selection.start) {\n        this._startInput.focus();\n      } else {\n        this._endInput.focus();\n      }\n    }\n  }\n  ngAfterContentInit() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._startInput) {\n        throw Error('mat-date-range-input must contain a matStartDate input');\n      }\n      if (!this._endInput) {\n        throw Error('mat-date-range-input must contain a matEndDate input');\n      }\n    }\n    if (this._model) {\n      this._registerModel(this._model);\n    }\n    // We don't need to unsubscribe from this, because we\n    // know that the input streams will be completed on destroy.\n    merge(this._startInput.stateChanges, this._endInput.stateChanges).subscribe(() => {\n      this.stateChanges.next(undefined);\n    });\n  }\n  ngOnChanges(changes) {\n    if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n      this.stateChanges.next(undefined);\n    }\n  }\n  ngOnDestroy() {\n    this._closedSubscription.unsubscribe();\n    this._openedSubscription.unsubscribe();\n    this.stateChanges.complete();\n  }\n  /** Gets the date at which the calendar should start. */\n  getStartValue() {\n    return this.value ? this.value.start : null;\n  }\n  /** Gets the input's theme palette. */\n  getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n  /** Gets the element to which the calendar overlay should be attached. */\n  getConnectedOverlayOrigin() {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n  /** Gets the ID of an element that should be used a description for the calendar overlay. */\n  getOverlayLabelId() {\n    return this._formField ? this._formField.getLabelId() : null;\n  }\n  /** Gets the value that is used to mirror the state input. */\n  _getInputMirrorValue(part) {\n    const input = part === 'start' ? this._startInput : this._endInput;\n    return input ? input.getMirrorValue() : '';\n  }\n  /** Whether the input placeholders should be hidden. */\n  _shouldHidePlaceholders() {\n    return this._startInput ? !this._startInput.isEmpty() : false;\n  }\n  /** Handles the value in one of the child inputs changing. */\n  _handleChildValueChange() {\n    this.stateChanges.next(undefined);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Opens the date range picker associated with the input. */\n  _openDatepicker() {\n    if (this._rangePicker) {\n      this._rangePicker.open();\n    }\n  }\n  /** Whether the separate text should be hidden. */\n  _shouldHideSeparator() {\n    return (!this._formField || this._formField.getLabelId() && !this._formField._shouldLabelFloat()) && this.empty;\n  }\n  /** Gets the value for the `aria-labelledby` attribute of the inputs. */\n  _getAriaLabelledby() {\n    const formField = this._formField;\n    return formField && formField._hasFloatingLabel() ? formField._labelId : null;\n  }\n  _getStartDateAccessibleName() {\n    return this._startInput._getAccessibleName();\n  }\n  _getEndDateAccessibleName() {\n    return this._endInput._getAccessibleName();\n  }\n  /** Updates the focused state of the range input. */\n  _updateFocus(origin) {\n    this.focused = origin !== null;\n    this.stateChanges.next();\n  }\n  /** Re-runs the validators on the start/end inputs. */\n  _revalidate() {\n    if (this._startInput) {\n      this._startInput._validatorOnChange();\n    }\n    if (this._endInput) {\n      this._endInput._validatorOnChange();\n    }\n  }\n  /** Registers the current date selection model with the start/end inputs. */\n  _registerModel(model) {\n    if (this._startInput) {\n      this._startInput._registerModel(model);\n    }\n    if (this._endInput) {\n      this._endInput._registerModel(model);\n    }\n  }\n  /** Checks whether a specific range input directive is required. */\n  _isTargetRequired(target) {\n    return target?.ngControl?.control?.hasValidator(Validators.required);\n  }\n  static ɵfac = function MatDateRangeInput_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDateRangeInput)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatDateRangeInput,\n    selectors: [[\"mat-date-range-input\"]],\n    hostAttrs: [\"role\", \"group\", 1, \"mat-date-range-input\"],\n    hostVars: 8,\n    hostBindings: function MatDateRangeInput_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx.id)(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-describedby\", ctx._ariaDescribedBy)(\"data-mat-calendar\", ctx.rangePicker ? ctx.rangePicker.id : null);\n        i0.ɵɵclassProp(\"mat-date-range-input-hide-placeholders\", ctx._shouldHidePlaceholders())(\"mat-date-range-input-required\", ctx.required);\n      }\n    },\n    inputs: {\n      rangePicker: \"rangePicker\",\n      required: [2, \"required\", \"required\", booleanAttribute],\n      dateFilter: \"dateFilter\",\n      min: \"min\",\n      max: \"max\",\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n      separator: \"separator\",\n      comparisonStart: \"comparisonStart\",\n      comparisonEnd: \"comparisonEnd\"\n    },\n    exportAs: [\"matDateRangeInput\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatDateRangeInput\n    }]), i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c6,\n    decls: 11,\n    vars: 5,\n    consts: [[\"cdkMonitorSubtreeFocus\", \"\", 1, \"mat-date-range-input-container\", 3, \"cdkFocusChange\"], [1, \"mat-date-range-input-wrapper\"], [\"aria-hidden\", \"true\", 1, \"mat-date-range-input-mirror\"], [1, \"mat-date-range-input-separator\"], [1, \"mat-date-range-input-wrapper\", \"mat-date-range-input-end-wrapper\"]],\n    template: function MatDateRangeInput_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c5);\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"cdkFocusChange\", function MatDateRangeInput_Template_div_cdkFocusChange_0_listener($event) {\n          return ctx._updateFocus($event);\n        });\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelementStart(3, \"span\", 2);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"span\", 3);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵprojection(8, 1);\n        i0.ɵɵelementStart(9, \"span\", 2);\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx._getInputMirrorValue(\"start\"));\n        i0.ɵɵadvance();\n        i0.ɵɵclassProp(\"mat-date-range-input-separator-hidden\", ctx._shouldHideSeparator());\n        i0.ɵɵadvance();\n        i0.ɵɵtextInterpolate(ctx.separator);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx._getInputMirrorValue(\"end\"));\n      }\n    },\n    dependencies: [CdkMonitorFocus],\n    styles: [\".mat-date-range-input{display:block;width:100%}.mat-date-range-input-container{display:flex;align-items:center}.mat-date-range-input-separator{transition:opacity 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);margin:0 4px;color:var(--mat-datepicker-range-input-separator-color, var(--mat-sys-on-surface))}.mat-form-field-disabled .mat-date-range-input-separator{color:var(--mat-datepicker-range-input-disabled-state-separator-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}._mat-animation-noopable .mat-date-range-input-separator{transition:none}.mat-date-range-input-separator-hidden{-webkit-user-select:none;user-select:none;opacity:0;transition:none}.mat-date-range-input-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px)}.mat-date-range-input-end-wrapper{flex-grow:1}.mat-date-range-input-inner{position:absolute;top:0;left:0;font:inherit;background:rgba(0,0,0,0);color:currentColor;border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%;height:100%}.mat-date-range-input-inner:-moz-ui-invalid{box-shadow:none}.mat-date-range-input-inner::placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-moz-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-webkit-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner:-ms-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner[disabled]{color:var(--mat-datepicker-range-input-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{opacity:0}}._mat-animation-noopable .mat-date-range-input-inner::placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner::-moz-placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner::-webkit-input-placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner:-ms-input-placeholder{transition:none}.mat-date-range-input-mirror{-webkit-user-select:none;user-select:none;visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.mat-mdc-form-field-type-mat-date-range-input .mat-mdc-form-field-infix{width:200px}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDateRangeInput, [{\n    type: Component,\n    args: [{\n      selector: 'mat-date-range-input',\n      exportAs: 'matDateRangeInput',\n      host: {\n        'class': 'mat-date-range-input',\n        '[class.mat-date-range-input-hide-placeholders]': '_shouldHidePlaceholders()',\n        '[class.mat-date-range-input-required]': 'required',\n        '[attr.id]': 'id',\n        'role': 'group',\n        '[attr.aria-labelledby]': '_getAriaLabelledby()',\n        '[attr.aria-describedby]': '_ariaDescribedBy',\n        // Used by the test harness to tie this input to its calendar. We can't depend on\n        // `aria-owns` for this, because it's only defined while the calendar is open.\n        '[attr.data-mat-calendar]': 'rangePicker ? rangePicker.id : null'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatDateRangeInput\n      }],\n      imports: [CdkMonitorFocus],\n      template: \"<div\\n  class=\\\"mat-date-range-input-container\\\"\\n  cdkMonitorSubtreeFocus\\n  (cdkFocusChange)=\\\"_updateFocus($event)\\\">\\n  <div class=\\\"mat-date-range-input-wrapper\\\">\\n    <ng-content select=\\\"input[matStartDate]\\\"></ng-content>\\n    <span\\n      class=\\\"mat-date-range-input-mirror\\\"\\n      aria-hidden=\\\"true\\\">{{_getInputMirrorValue('start')}}</span>\\n  </div>\\n\\n  <span\\n    class=\\\"mat-date-range-input-separator\\\"\\n    [class.mat-date-range-input-separator-hidden]=\\\"_shouldHideSeparator()\\\">{{separator}}</span>\\n\\n  <div class=\\\"mat-date-range-input-wrapper mat-date-range-input-end-wrapper\\\">\\n    <ng-content select=\\\"input[matEndDate]\\\"></ng-content>\\n    <span\\n      class=\\\"mat-date-range-input-mirror\\\"\\n      aria-hidden=\\\"true\\\">{{_getInputMirrorValue('end')}}</span>\\n  </div>\\n</div>\\n\\n\",\n      styles: [\".mat-date-range-input{display:block;width:100%}.mat-date-range-input-container{display:flex;align-items:center}.mat-date-range-input-separator{transition:opacity 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);margin:0 4px;color:var(--mat-datepicker-range-input-separator-color, var(--mat-sys-on-surface))}.mat-form-field-disabled .mat-date-range-input-separator{color:var(--mat-datepicker-range-input-disabled-state-separator-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}._mat-animation-noopable .mat-date-range-input-separator{transition:none}.mat-date-range-input-separator-hidden{-webkit-user-select:none;user-select:none;opacity:0;transition:none}.mat-date-range-input-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px)}.mat-date-range-input-end-wrapper{flex-grow:1}.mat-date-range-input-inner{position:absolute;top:0;left:0;font:inherit;background:rgba(0,0,0,0);color:currentColor;border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%;height:100%}.mat-date-range-input-inner:-moz-ui-invalid{box-shadow:none}.mat-date-range-input-inner::placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-moz-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-webkit-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner:-ms-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner[disabled]{color:var(--mat-datepicker-range-input-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{opacity:0}}._mat-animation-noopable .mat-date-range-input-inner::placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner::-moz-placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner::-webkit-input-placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner:-ms-input-placeholder{transition:none}.mat-date-range-input-mirror{-webkit-user-select:none;user-select:none;visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.mat-mdc-form-field-type-mat-date-range-input .mat-mdc-form-field-infix{width:200px}\\n\"]\n    }]\n  }], () => [], {\n    rangePicker: [{\n      type: Input\n    }],\n    required: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    separator: [{\n      type: Input\n    }],\n    comparisonStart: [{\n      type: Input\n    }],\n    comparisonEnd: [{\n      type: Input\n    }]\n  });\n})();\n\n// This file contains the `_computeAriaAccessibleName` function, which computes what the *expected*\n// ARIA accessible name would be for a given element. Implements a subset of ARIA specification\n// [Accessible Name and Description Computation 1.2](https://www.w3.org/TR/accname-1.2/).\n//\n// Specification accname-1.2 can be summarized by returning the result of the first method\n// available.\n//\n//  1. `aria-labelledby` attribute\n//     ```\n//       <!-- example using aria-labelledby-->\n//       <label id='label-id'>Start Date</label>\n//       <input aria-labelledby='label-id'/>\n//     ```\n//  2. `aria-label` attribute (e.g. `<input aria-label=\"Departure\"/>`)\n//  3. Label with `for`/`id`\n//     ```\n//       <!-- example using for/id -->\n//       <label for=\"current-node\">Label</label>\n//       <input id=\"current-node\"/>\n//     ```\n//  4. `placeholder` attribute (e.g. `<input placeholder=\"06/03/1990\"/>`)\n//  5. `title` attribute (e.g. `<input title=\"Check-In\"/>`)\n//  6. text content\n//     ```\n//       <!-- example using text content -->\n//       <label for=\"current-node\"><span>Departure</span> Date</label>\n//       <input id=\"current-node\"/>\n//     ```\n/**\n * Computes the *expected* ARIA accessible name for argument element based on [accname-1.2\n * specification](https://www.w3.org/TR/accname-1.2/). Implements a subset of accname-1.2,\n * and should only be used for the Datepicker's specific use case.\n *\n * Intended use:\n * This is not a general use implementation. Only implements the parts of accname-1.2 that are\n * required for the Datepicker's specific use case. This function is not intended for any other\n * use.\n *\n * Limitations:\n *  - Only covers the needs of `matStartDate` and `matEndDate`. Does not support other use cases.\n *  - See NOTES's in implementation for specific details on what parts of the accname-1.2\n *  specification are not implemented.\n *\n *  @param element {HTMLInputElement} native &lt;input/&gt; element of `matStartDate` or\n *  `matEndDate` component. Corresponds to the 'Root Element' from accname-1.2\n *\n *  @return expected ARIA accessible name of argument &lt;input/&gt;\n */\nfunction _computeAriaAccessibleName(element) {\n  return _computeAriaAccessibleNameInternal(element, true);\n}\n/**\n * Determine if argument node is an Element based on `nodeType` property. This function is safe to\n * use with server-side rendering.\n */\nfunction ssrSafeIsElement(node) {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Determine if argument node is an HTMLInputElement based on `nodeName` property. This funciton is\n * safe to use with server-side rendering.\n */\nfunction ssrSafeIsHTMLInputElement(node) {\n  return node.nodeName === 'INPUT';\n}\n/**\n * Determine if argument node is an HTMLTextAreaElement based on `nodeName` property. This\n * funciton is safe to use with server-side rendering.\n */\nfunction ssrSafeIsHTMLTextAreaElement(node) {\n  return node.nodeName === 'TEXTAREA';\n}\n/**\n * Calculate the expected ARIA accessible name for given DOM Node. Given DOM Node may be either the\n * \"Root node\" passed to `_computeAriaAccessibleName` or \"Current node\" as result of recursion.\n *\n * @return the accessible name of argument DOM Node\n *\n * @param currentNode node to determine accessible name of\n * @param isDirectlyReferenced true if `currentNode` is the root node to calculate ARIA accessible\n * name of. False if it is a result of recursion.\n */\nfunction _computeAriaAccessibleNameInternal(currentNode, isDirectlyReferenced) {\n  // NOTE: this differs from accname-1.2 specification.\n  //  - Does not implement Step 1. of accname-1.2: '''If `currentNode`'s role prohibits naming,\n  //    return the empty string (\"\")'''.\n  //  - Does not implement Step 2.A. of accname-1.2: '''if current node is hidden and not directly\n  //    referenced by aria-labelledby... return the empty string.'''\n  // acc-name-1.2 Step 2.B.: aria-labelledby\n  if (ssrSafeIsElement(currentNode) && isDirectlyReferenced) {\n    const labelledbyIds = currentNode.getAttribute?.('aria-labelledby')?.split(/\\s+/g) || [];\n    const validIdRefs = labelledbyIds.reduce((validIds, id) => {\n      const elem = document.getElementById(id);\n      if (elem) {\n        validIds.push(elem);\n      }\n      return validIds;\n    }, []);\n    if (validIdRefs.length) {\n      return validIdRefs.map(idRef => {\n        return _computeAriaAccessibleNameInternal(idRef, false);\n      }).join(' ');\n    }\n  }\n  // acc-name-1.2 Step 2.C.: aria-label\n  if (ssrSafeIsElement(currentNode)) {\n    const ariaLabel = currentNode.getAttribute('aria-label')?.trim();\n    if (ariaLabel) {\n      return ariaLabel;\n    }\n  }\n  // acc-name-1.2 Step 2.D. attribute or element that defines a text alternative\n  //\n  // NOTE: this differs from accname-1.2 specification.\n  // Only implements Step 2.D. for `<label>`,`<input/>`, and `<textarea/>` element. Does not\n  // implement other elements that have an attribute or element that defines a text alternative.\n  if (ssrSafeIsHTMLInputElement(currentNode) || ssrSafeIsHTMLTextAreaElement(currentNode)) {\n    // use label with a `for` attribute referencing the current node\n    if (currentNode.labels?.length) {\n      return Array.from(currentNode.labels).map(x => _computeAriaAccessibleNameInternal(x, false)).join(' ');\n    }\n    // use placeholder if available\n    const placeholder = currentNode.getAttribute('placeholder')?.trim();\n    if (placeholder) {\n      return placeholder;\n    }\n    // use title if available\n    const title = currentNode.getAttribute('title')?.trim();\n    if (title) {\n      return title;\n    }\n  }\n  // NOTE: this differs from accname-1.2 specification.\n  //  - does not implement acc-name-1.2 Step 2.E.: '''if the current node is a control embedded\n  //     within the label... then include the embedded control as part of the text alternative in\n  //     the following manner...'''. Step 2E applies to embedded controls such as textbox, listbox,\n  //     range, etc.\n  //  - does not implement acc-name-1.2 step 2.F.: check that '''role allows name from content''',\n  //    which applies to `currentNode` and its children.\n  //  - does not implement acc-name-1.2 Step 2.F.ii.: '''Check for CSS generated textual content'''\n  //    (e.g. :before and :after).\n  //  - does not implement acc-name-1.2 Step 2.I.: '''if the current node has a Tooltip attribute,\n  //    return its value'''\n  // Return text content with whitespace collapsed into a single space character. Accomplish\n  // acc-name-1.2 steps 2F, 2G, and 2H.\n  return (currentNode.textContent || '').replace(/\\s+/g, ' ').trim();\n}\n\n/**\n * Base class for the individual inputs that can be projected inside a `mat-date-range-input`.\n */\nclass MatDateRangeInputPartBase extends MatDatepickerInputBase {\n  _rangeInput = inject(MatDateRangeInput);\n  _elementRef = inject(ElementRef);\n  _defaultErrorStateMatcher = inject(ErrorStateMatcher);\n  _injector = inject(Injector);\n  _rawValue = signal('', ...(ngDevMode ? [{\n    debugName: \"_rawValue\"\n  }] : []));\n  _parentForm = inject(NgForm, {\n    optional: true\n  });\n  _parentFormGroup = inject(FormGroupDirective, {\n    optional: true\n  });\n  /**\n   * Form control bound to this input part.\n   * @docs-private\n   */\n  ngControl;\n  _dir = inject(Directionality, {\n    optional: true\n  });\n  _errorStateTracker;\n  /** Object used to control when error messages are shown. */\n  get errorStateMatcher() {\n    return this._errorStateTracker.matcher;\n  }\n  set errorStateMatcher(value) {\n    this._errorStateTracker.matcher = value;\n  }\n  /** Whether the input is in an error state. */\n  get errorState() {\n    return this._errorStateTracker.errorState;\n  }\n  set errorState(value) {\n    this._errorStateTracker.errorState = value;\n  }\n  constructor() {\n    super();\n    this._errorStateTracker = new _ErrorStateTracker(this._defaultErrorStateMatcher, null, this._parentFormGroup, this._parentForm, this.stateChanges);\n  }\n  ngOnInit() {\n    // We need the date input to provide itself as a `ControlValueAccessor` and a `Validator`, while\n    // injecting its `NgControl` so that the error state is handled correctly. This introduces a\n    // circular dependency, because both `ControlValueAccessor` and `Validator` depend on the input\n    // itself. Usually we can work around it for the CVA, but there's no API to do it for the\n    // validator. We work around it here by injecting the `NgControl` in `ngOnInit`, after\n    // everything has been resolved.\n    const ngControl = this._injector.get(NgControl, null, {\n      optional: true,\n      self: true\n    });\n    if (ngControl) {\n      this.ngControl = ngControl;\n      this._errorStateTracker.ngControl = ngControl;\n    }\n  }\n  ngAfterContentInit() {\n    this._register();\n  }\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n    this._rawValue.set(this._elementRef.nativeElement.value);\n  }\n  /** Gets whether the input is empty. */\n  isEmpty() {\n    return this._rawValue().length === 0;\n  }\n  /** Gets the placeholder of the input. */\n  _getPlaceholder() {\n    return this._elementRef.nativeElement.placeholder;\n  }\n  /** Focuses the input. */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n  /** Gets the value that should be used when mirroring the input's size. */\n  getMirrorValue() {\n    const value = this._rawValue();\n    return value.length > 0 ? value : this._getPlaceholder();\n  }\n  /** Refreshes the error state of the input. */\n  updateErrorState() {\n    this._errorStateTracker.updateErrorState();\n  }\n  /** Handles `input` events on the input element. */\n  _onInput(event) {\n    super._onInput(event);\n    this._rangeInput._handleChildValueChange();\n  }\n  /** Opens the datepicker associated with the input. */\n  _openPopup() {\n    this._rangeInput._openDatepicker();\n  }\n  /** Gets the minimum date from the range input. */\n  _getMinDate() {\n    return this._rangeInput.min;\n  }\n  /** Gets the maximum date from the range input. */\n  _getMaxDate() {\n    return this._rangeInput.max;\n  }\n  /** Gets the date filter function from the range input. */\n  _getDateFilter() {\n    return this._rangeInput.dateFilter;\n  }\n  _parentDisabled() {\n    return this._rangeInput._groupDisabled;\n  }\n  _shouldHandleChangeEvent({\n    source\n  }) {\n    return source !== this._rangeInput._startInput && source !== this._rangeInput._endInput;\n  }\n  _assignValueProgrammatically(value) {\n    super._assignValueProgrammatically(value);\n    const opposite = this === this._rangeInput._startInput ? this._rangeInput._endInput : this._rangeInput._startInput;\n    opposite?._validatorOnChange();\n    this._rawValue.set(this._elementRef.nativeElement.value);\n  }\n  _formatValue(value) {\n    super._formatValue(value);\n    // Any time the input value is reformatted we need to tell the parent.\n    this._rangeInput._handleChildValueChange();\n  }\n  /** return the ARIA accessible name of the input element */\n  _getAccessibleName() {\n    return _computeAriaAccessibleName(this._elementRef.nativeElement);\n  }\n  static ɵfac = function MatDateRangeInputPartBase_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDateRangeInputPartBase)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDateRangeInputPartBase,\n    inputs: {\n      errorStateMatcher: \"errorStateMatcher\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDateRangeInputPartBase, [{\n    type: Directive\n  }], () => [], {\n    errorStateMatcher: [{\n      type: Input\n    }]\n  });\n})();\n/** Input for entering the start date in a `mat-date-range-input`. */\nclass MatStartDate extends MatDateRangeInputPartBase {\n  /** Validator that checks that the start date isn't after the end date. */\n  _startValidator = control => {\n    const start = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const end = this._model ? this._model.selection.end : null;\n    return !start || !end || this._dateAdapter.compareDate(start, end) <= 0 ? null : {\n      'matStartDateInvalid': {\n        'end': end,\n        'actual': start\n      }\n    };\n  };\n  _validator = Validators.compose([...super._getValidators(), this._startValidator]);\n  _register() {\n    this._rangeInput._startInput = this;\n  }\n  _getValueFromModel(modelValue) {\n    return modelValue.start;\n  }\n  _shouldHandleChangeEvent(change) {\n    if (!super._shouldHandleChangeEvent(change)) {\n      return false;\n    } else {\n      return !change.oldValue?.start ? !!change.selection.start : !change.selection.start || !!this._dateAdapter.compareDate(change.oldValue.start, change.selection.start);\n    }\n  }\n  _assignValueToModel(value) {\n    if (this._model) {\n      const range = new DateRange(value, this._model.selection.end);\n      this._model.updateSelection(range, this);\n      this._rangeInput._handleChildValueChange();\n    }\n  }\n  _onKeydown(event) {\n    const endInput = this._rangeInput._endInput;\n    const element = this._elementRef.nativeElement;\n    const isLtr = this._dir?.value !== 'rtl';\n    // If the user hits RIGHT (LTR) when at the end of the input (and no\n    // selection), move the cursor to the start of the end input.\n    if ((event.keyCode === RIGHT_ARROW && isLtr || event.keyCode === LEFT_ARROW && !isLtr) && element.selectionStart === element.value.length && element.selectionEnd === element.value.length) {\n      event.preventDefault();\n      endInput._elementRef.nativeElement.setSelectionRange(0, 0);\n      endInput.focus();\n    } else {\n      super._onKeydown(event);\n    }\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatStartDate_BaseFactory;\n    return function MatStartDate_Factory(__ngFactoryType__) {\n      return (ɵMatStartDate_BaseFactory || (ɵMatStartDate_BaseFactory = i0.ɵɵgetInheritedFactory(MatStartDate)))(__ngFactoryType__ || MatStartDate);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatStartDate,\n    selectors: [[\"input\", \"matStartDate\", \"\"]],\n    hostAttrs: [\"type\", \"text\", 1, \"mat-start-date\", \"mat-date-range-input-inner\"],\n    hostVars: 5,\n    hostBindings: function MatStartDate_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function MatStartDate_input_HostBindingHandler($event) {\n          return ctx._onInput($event);\n        })(\"change\", function MatStartDate_change_HostBindingHandler() {\n          return ctx._onChange();\n        })(\"keydown\", function MatStartDate_keydown_HostBindingHandler($event) {\n          return ctx._onKeydown($event);\n        })(\"blur\", function MatStartDate_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵdomProperty(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"aria-haspopup\", ctx._rangeInput.rangePicker ? \"dialog\" : null)(\"aria-owns\", ctx._rangeInput._ariaOwns() || null)(\"min\", ctx._getMinDate() ? ctx._dateAdapter.toIso8601(ctx._getMinDate()) : null)(\"max\", ctx._getMaxDate() ? ctx._dateAdapter.toIso8601(ctx._getMaxDate()) : null);\n      }\n    },\n    outputs: {\n      dateChange: \"dateChange\",\n      dateInput: \"dateInput\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: MatStartDate,\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: MatStartDate,\n      multi: true\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatStartDate, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matStartDate]',\n      host: {\n        'class': 'mat-start-date mat-date-range-input-inner',\n        '[disabled]': 'disabled',\n        '(input)': '_onInput($event)',\n        '(change)': '_onChange()',\n        '(keydown)': '_onKeydown($event)',\n        '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n        '[attr.aria-owns]': '_rangeInput._ariaOwns() || null',\n        '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()!) : null',\n        '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()!) : null',\n        '(blur)': '_onBlur()',\n        'type': 'text'\n      },\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: MatStartDate,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: MatStartDate,\n        multi: true\n      }],\n      // These need to be specified explicitly, because some tooling doesn't\n      // seem to pick them up from the base class. See #20932.\n      outputs: ['dateChange', 'dateInput']\n    }]\n  }], null, null);\n})();\n/** Input for entering the end date in a `mat-date-range-input`. */\nclass MatEndDate extends MatDateRangeInputPartBase {\n  /** Validator that checks that the end date isn't before the start date. */\n  _endValidator = control => {\n    const end = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const start = this._model ? this._model.selection.start : null;\n    return !end || !start || this._dateAdapter.compareDate(end, start) >= 0 ? null : {\n      'matEndDateInvalid': {\n        'start': start,\n        'actual': end\n      }\n    };\n  };\n  _register() {\n    this._rangeInput._endInput = this;\n  }\n  _validator = Validators.compose([...super._getValidators(), this._endValidator]);\n  _getValueFromModel(modelValue) {\n    return modelValue.end;\n  }\n  _shouldHandleChangeEvent(change) {\n    if (!super._shouldHandleChangeEvent(change)) {\n      return false;\n    } else {\n      return !change.oldValue?.end ? !!change.selection.end : !change.selection.end || !!this._dateAdapter.compareDate(change.oldValue.end, change.selection.end);\n    }\n  }\n  _assignValueToModel(value) {\n    if (this._model) {\n      const range = new DateRange(this._model.selection.start, value);\n      this._model.updateSelection(range, this);\n    }\n  }\n  _moveCaretToEndOfStartInput() {\n    const startInput = this._rangeInput._startInput._elementRef.nativeElement;\n    const value = startInput.value;\n    if (value.length > 0) {\n      startInput.setSelectionRange(value.length, value.length);\n    }\n    startInput.focus();\n  }\n  _onKeydown(event) {\n    const element = this._elementRef.nativeElement;\n    const isLtr = this._dir?.value !== 'rtl';\n    // If the user is pressing backspace on an empty end input, move focus back to the start.\n    if (event.keyCode === BACKSPACE && !element.value) {\n      this._moveCaretToEndOfStartInput();\n    }\n    // If the user hits LEFT (LTR) when at the start of the input (and no\n    // selection), move the cursor to the end of the start input.\n    else if ((event.keyCode === LEFT_ARROW && isLtr || event.keyCode === RIGHT_ARROW && !isLtr) && element.selectionStart === 0 && element.selectionEnd === 0) {\n      event.preventDefault();\n      this._moveCaretToEndOfStartInput();\n    } else {\n      super._onKeydown(event);\n    }\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatEndDate_BaseFactory;\n    return function MatEndDate_Factory(__ngFactoryType__) {\n      return (ɵMatEndDate_BaseFactory || (ɵMatEndDate_BaseFactory = i0.ɵɵgetInheritedFactory(MatEndDate)))(__ngFactoryType__ || MatEndDate);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatEndDate,\n    selectors: [[\"input\", \"matEndDate\", \"\"]],\n    hostAttrs: [\"type\", \"text\", 1, \"mat-end-date\", \"mat-date-range-input-inner\"],\n    hostVars: 5,\n    hostBindings: function MatEndDate_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function MatEndDate_input_HostBindingHandler($event) {\n          return ctx._onInput($event);\n        })(\"change\", function MatEndDate_change_HostBindingHandler() {\n          return ctx._onChange();\n        })(\"keydown\", function MatEndDate_keydown_HostBindingHandler($event) {\n          return ctx._onKeydown($event);\n        })(\"blur\", function MatEndDate_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵdomProperty(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"aria-haspopup\", ctx._rangeInput.rangePicker ? \"dialog\" : null)(\"aria-owns\", ctx._rangeInput._ariaOwns() || null)(\"min\", ctx._getMinDate() ? ctx._dateAdapter.toIso8601(ctx._getMinDate()) : null)(\"max\", ctx._getMaxDate() ? ctx._dateAdapter.toIso8601(ctx._getMaxDate()) : null);\n      }\n    },\n    outputs: {\n      dateChange: \"dateChange\",\n      dateInput: \"dateInput\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: MatEndDate,\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: MatEndDate,\n      multi: true\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatEndDate, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matEndDate]',\n      host: {\n        'class': 'mat-end-date mat-date-range-input-inner',\n        '[disabled]': 'disabled',\n        '(input)': '_onInput($event)',\n        '(change)': '_onChange()',\n        '(keydown)': '_onKeydown($event)',\n        '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n        '[attr.aria-owns]': '_rangeInput._ariaOwns() || null',\n        '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()!) : null',\n        '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()!) : null',\n        '(blur)': '_onBlur()',\n        'type': 'text'\n      },\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: MatEndDate,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: MatEndDate,\n        multi: true\n      }],\n      // These need to be specified explicitly, because some tooling doesn't\n      // seem to pick them up from the base class. See #20932.\n      outputs: ['dateChange', 'dateInput']\n    }]\n  }], null, null);\n})();\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDateRangePicker\"). We can change this to a\n// directive if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the date range picker popup/dialog. */\nclass MatDateRangePicker extends MatDatepickerBase {\n  _forwardContentValues(instance) {\n    super._forwardContentValues(instance);\n    const input = this.datepickerInput;\n    if (input) {\n      instance.comparisonStart = input.comparisonStart;\n      instance.comparisonEnd = input.comparisonEnd;\n      instance.startDateAccessibleName = input._getStartDateAccessibleName();\n      instance.endDateAccessibleName = input._getEndDateAccessibleName();\n    }\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatDateRangePicker_BaseFactory;\n    return function MatDateRangePicker_Factory(__ngFactoryType__) {\n      return (ɵMatDateRangePicker_BaseFactory || (ɵMatDateRangePicker_BaseFactory = i0.ɵɵgetInheritedFactory(MatDateRangePicker)))(__ngFactoryType__ || MatDateRangePicker);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatDateRangePicker,\n    selectors: [[\"mat-date-range-picker\"]],\n    exportAs: [\"matDateRangePicker\"],\n    features: [i0.ɵɵProvidersFeature([MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, MAT_CALENDAR_RANGE_STRATEGY_PROVIDER, {\n      provide: MatDatepickerBase,\n      useExisting: MatDateRangePicker\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function MatDateRangePicker_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDateRangePicker, [{\n    type: Component,\n    args: [{\n      selector: 'mat-date-range-picker',\n      template: '',\n      exportAs: 'matDateRangePicker',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, MAT_CALENDAR_RANGE_STRATEGY_PROVIDER, {\n        provide: MatDatepickerBase,\n        useExisting: MatDateRangePicker\n      }]\n    }]\n  }], null, null);\n})();\n\n/** Button that will close the datepicker and assign the current selection to the data model. */\nclass MatDatepickerApply {\n  _datepicker = inject(MatDatepickerBase);\n  constructor() {}\n  _applySelection() {\n    this._datepicker._applyPendingSelection();\n    this._datepicker.close();\n  }\n  static ɵfac = function MatDatepickerApply_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDatepickerApply)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDatepickerApply,\n    selectors: [[\"\", \"matDatepickerApply\", \"\"], [\"\", \"matDateRangePickerApply\", \"\"]],\n    hostBindings: function MatDatepickerApply_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MatDatepickerApply_click_HostBindingHandler() {\n          return ctx._applySelection();\n        });\n      }\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDatepickerApply, [{\n    type: Directive,\n    args: [{\n      selector: '[matDatepickerApply], [matDateRangePickerApply]',\n      host: {\n        '(click)': '_applySelection()'\n      }\n    }]\n  }], () => [], null);\n})();\n/** Button that will close the datepicker and discard the current selection. */\nclass MatDatepickerCancel {\n  _datepicker = inject(MatDatepickerBase);\n  constructor() {}\n  static ɵfac = function MatDatepickerCancel_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDatepickerCancel)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDatepickerCancel,\n    selectors: [[\"\", \"matDatepickerCancel\", \"\"], [\"\", \"matDateRangePickerCancel\", \"\"]],\n    hostBindings: function MatDatepickerCancel_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MatDatepickerCancel_click_HostBindingHandler() {\n          return ctx._datepicker.close();\n        });\n      }\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDatepickerCancel, [{\n    type: Directive,\n    args: [{\n      selector: '[matDatepickerCancel], [matDateRangePickerCancel]',\n      host: {\n        '(click)': '_datepicker.close()'\n      }\n    }]\n  }], () => [], null);\n})();\n/**\n * Container that can be used to project a row of action buttons\n * to the bottom of a datepicker or date range picker.\n */\nclass MatDatepickerActions {\n  _datepicker = inject(MatDatepickerBase);\n  _viewContainerRef = inject(ViewContainerRef);\n  _template;\n  _portal;\n  constructor() {}\n  ngAfterViewInit() {\n    this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    this._datepicker.registerActions(this._portal);\n  }\n  ngOnDestroy() {\n    this._datepicker.removeActions(this._portal);\n    // Needs to be null checked since we initialize it in `ngAfterViewInit`.\n    if (this._portal && this._portal.isAttached) {\n      this._portal?.detach();\n    }\n  }\n  static ɵfac = function MatDatepickerActions_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDatepickerActions)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatDatepickerActions,\n    selectors: [[\"mat-datepicker-actions\"], [\"mat-date-range-picker-actions\"]],\n    viewQuery: function MatDatepickerActions_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TemplateRef, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._template = _t.first);\n      }\n    },\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    consts: [[1, \"mat-datepicker-actions\"]],\n    template: function MatDatepickerActions_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵdomTemplate(0, MatDatepickerActions_ng_template_0_Template, 2, 0, \"ng-template\");\n      }\n    },\n    styles: [\".mat-datepicker-actions{display:flex;justify-content:flex-end;align-items:center;padding:0 8px 8px 8px}.mat-datepicker-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-datepicker-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDatepickerActions, [{\n    type: Component,\n    args: [{\n      selector: 'mat-datepicker-actions, mat-date-range-picker-actions',\n      template: `\n    <ng-template>\n      <div class=\"mat-datepicker-actions\">\n        <ng-content></ng-content>\n      </div>\n    </ng-template>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".mat-datepicker-actions{display:flex;justify-content:flex-end;align-items:center;padding:0 8px 8px 8px}.mat-datepicker-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-datepicker-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n    }]\n  }], () => [], {\n    _template: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }]\n  });\n})();\nclass MatDatepickerModule {\n  static ɵfac = function MatDatepickerModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDatepickerModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatDatepickerModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [MatButtonModule, OverlayModule, A11yModule, PortalModule, MatCommonModule, MatDatepickerContent, MatDatepickerToggle, MatCalendarHeader, CdkScrollableModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDatepickerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatButtonModule, OverlayModule, A11yModule, PortalModule, MatCommonModule, MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader, MatDateRangeInput, MatStartDate, MatEndDate, MatDateRangePicker, MatDatepickerActions, MatDatepickerCancel, MatDatepickerApply],\n      exports: [CdkScrollableModule, MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader, MatDateRangeInput, MatStartDate, MatEndDate, MatDateRangePicker, MatDatepickerActions, MatDatepickerCancel, MatDatepickerApply],\n      providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst matDatepickerAnimations = {\n  // Represents:\n  // trigger('transformPanel', [\n  //   transition(\n  //     'void => enter-dropdown',\n  //     animate(\n  //       '120ms cubic-bezier(0, 0, 0.2, 1)',\n  //       keyframes([\n  //         style({opacity: 0, transform: 'scale(1, 0.8)'}),\n  //         style({opacity: 1, transform: 'scale(1, 1)'}),\n  //       ]),\n  //     ),\n  //   ),\n  //   transition(\n  //     'void => enter-dialog',\n  //     animate(\n  //       '150ms cubic-bezier(0, 0, 0.2, 1)',\n  //       keyframes([\n  //         style({opacity: 0, transform: 'scale(0.7)'}),\n  //         style({transform: 'none', opacity: 1}),\n  //       ]),\n  //     ),\n  //   ),\n  //   transition('* => void', animate('100ms linear', style({opacity: 0}))),\n  // ])\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: {\n    type: 7,\n    name: 'transformPanel',\n    definitions: [{\n      type: 1,\n      expr: 'void => enter-dropdown',\n      animation: {\n        type: 4,\n        styles: {\n          type: 5,\n          steps: [{\n            type: 6,\n            styles: {\n              opacity: 0,\n              transform: 'scale(1, 0.8)'\n            },\n            offset: null\n          }, {\n            type: 6,\n            styles: {\n              opacity: 1,\n              transform: 'scale(1, 1)'\n            },\n            offset: null\n          }]\n        },\n        timings: '120ms cubic-bezier(0, 0, 0.2, 1)'\n      },\n      options: null\n    }, {\n      type: 1,\n      expr: 'void => enter-dialog',\n      animation: {\n        type: 4,\n        styles: {\n          type: 5,\n          steps: [{\n            type: 6,\n            styles: {\n              opacity: 0,\n              transform: 'scale(0.7)'\n            },\n            offset: null\n          }, {\n            type: 6,\n            styles: {\n              transform: 'none',\n              opacity: 1\n            },\n            offset: null\n          }]\n        },\n        timings: '150ms cubic-bezier(0, 0, 0.2, 1)'\n      },\n      options: null\n    }, {\n      type: 1,\n      expr: '* => void',\n      animation: {\n        type: 4,\n        styles: {\n          type: 6,\n          styles: {\n            opacity: 0\n          },\n          offset: null\n        },\n        timings: '100ms linear'\n      },\n      options: null\n    }],\n    options: {}\n  },\n  // Represents:\n  // trigger('fadeInCalendar', [\n  //   state('void', style({opacity: 0})),\n  //   state('enter', style({opacity: 1})),\n  //   // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n  //   // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n  //   transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')),\n  // ])\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: {\n    type: 7,\n    name: 'fadeInCalendar',\n    definitions: [{\n      type: 0,\n      name: 'void',\n      styles: {\n        type: 6,\n        styles: {\n          opacity: 0\n        },\n        offset: null\n      }\n    }, {\n      type: 0,\n      name: 'enter',\n      styles: {\n        type: 6,\n        styles: {\n          opacity: 1\n        },\n        offset: null\n      }\n    }, {\n      type: 1,\n      expr: 'void => *',\n      animation: {\n        type: 4,\n        styles: null,\n        timings: '120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'\n      },\n      options: null\n    }],\n    options: {}\n  }\n};\nexport { DateRange, DefaultMatCalendarRangeStrategy, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_DATEPICKER_VALIDATORS, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATE_RANGE_SELECTION_STRATEGY, MAT_RANGE_DATE_SELECTION_MODEL_FACTORY, MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY, MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, MatCalendar, MatCalendarBody, MatCalendarCell, MatCalendarHeader, MatDateRangeInput, MatDateRangePicker, MatDateSelectionModel, MatDatepicker, MatDatepickerActions, MatDatepickerApply, MatDatepickerCancel, MatDatepickerContent, MatDatepickerInput, MatDatepickerInputEvent, MatDatepickerIntl, MatDatepickerModule, MatDatepickerToggle, MatDatepickerToggleIcon, MatEndDate, MatMonthView, MatMultiYearView, MatRangeDateSelectionModel, MatSingleDateSelectionModel, MatStartDate, MatYearView, matDatepickerAnimations, yearsPerPage, yearsPerRow };","map":{"version":3,"names":["i0","Injectable","inject","ElementRef","NgZone","EventEmitter","Injector","Renderer2","afterNextRender","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","Output","Optional","SkipSelf","InjectionToken","ChangeDetectorRef","ViewChild","ViewContainerRef","DOCUMENT","booleanAttribute","Directive","forwardRef","signal","HostAttributeToken","ContentChild","TemplateRef","NgModule","Subject","Subscription","merge","of","DateAdapter","MAT_DATE_FORMATS","_IdGenerator","CdkMonitorFocus","CdkTrapFocus","A11yModule","Directionality","coerceStringArray","ESCAPE","hasModifierKey","SPACE","ENTER","PAGE_DOWN","PAGE_UP","END","HOME","DOWN_ARROW","UP_ARROW","RIGHT_ARROW","LEFT_ARROW","BACKSPACE","createRepositionScrollStrategy","FlexibleConnectedPositionStrategy","createOverlayRef","OverlayConfig","createBlockScrollStrategy","createGlobalPositionStrategy","createFlexibleConnectedPositionStrategy","OverlayModule","Platform","_getFocusedElementPierceShadowDom","ComponentPortal","CdkPortalOutlet","TemplatePortal","PortalModule","startWith","take","filter","NgClass","_CdkPrivateStyleLoader","_VisuallyHiddenLoader","_StructuralStylesLoader","MatButton","MatButtonModule","MatIconButton","_animationsDisabled","NG_VALUE_ACCESSOR","NG_VALIDATORS","Validators","ControlContainer","NgForm","FormGroupDirective","NgControl","MAT_INPUT_VALUE_ACCESSOR","MAT_FORM_FIELD","MatFormFieldControl","ErrorStateMatcher","_ErrorStateTracker","CdkScrollableModule","MatCommonModule","_c0","_forTrack0","$index","$item","this","_trackRow","_forTrack1","id","MatCalendarBody_Conditional_0_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵadvance","ɵɵstyleProp","_cellPadding","ɵɵattribute","numCols","ɵɵtextInterpolate1","label","MatCalendarBody_For_2_Conditional_1_Template","_firstRowOffset","labelMinRequiredCells","MatCalendarBody_For_2_For_3_Template","_r2","ɵɵgetCurrentView","ɵɵlistener","MatCalendarBody_For_2_For_3_Template_button_click_1_listener","$event","item_r3","ɵɵrestoreView","$implicit","ɵɵresetView","_cellClicked","MatCalendarBody_For_2_For_3_Template_button_focus_1_listener","_emitActiveDateChange","ɵɵelement","ɵ$index_14_r4","ɵ$index_7_r5","_cellWidth","ɵɵclassProp","enabled","_isActiveCell","_isRangeStart","compareValue","_isRangeEnd","_isInRange","_isComparisonBridgeStart","_isComparisonBridgeEnd","_isComparisonStart","_isComparisonEnd","_isInComparisonRange","_isPreviewStart","_isPreviewEnd","_isInPreview","ɵɵproperty","cssClasses","ariaLabel","_isSelected","todayValue","_getDescribedby","_isComparisonIdentical","displayValue","MatCalendarBody_For_2_Template","ɵɵconditionalCreate","ɵɵrepeaterCreate","row_r6","ɵɵconditional","ɵɵrepeater","MatMonthView_For_4_Template","day_r1","ɵɵtextInterpolate","long","narrow","_c1","MatCalendar_ng_template_0_Template","MatCalendar_Case_2_Template","_r1","ɵɵtwoWayListener","MatCalendar_Case_2_Template_mat_month_view_activeDateChange_0_listener","ctx_r1","ɵɵtwoWayBindingSet","activeDate","MatCalendar_Case_2_Template_mat_month_view__userSelection_0_listener","_dateSelected","MatCalendar_Case_2_Template_mat_month_view_dragStarted_0_listener","_dragStarted","MatCalendar_Case_2_Template_mat_month_view_dragEnded_0_listener","_dragEnded","ɵɵtwoWayProperty","selected","dateFilter","maxDate","minDate","dateClass","comparisonStart","comparisonEnd","startDateAccessibleName","endDateAccessibleName","_activeDrag","MatCalendar_Case_3_Template","_r3","MatCalendar_Case_3_Template_mat_year_view_activeDateChange_0_listener","MatCalendar_Case_3_Template_mat_year_view_monthSelected_0_listener","_monthSelectedInYearView","MatCalendar_Case_3_Template_mat_year_view_selectedChange_0_listener","_goToDateInView","MatCalendar_Case_4_Template","_r4","MatCalendar_Case_4_Template_mat_multi_year_view_activeDateChange_0_listener","MatCalendar_Case_4_Template_mat_multi_year_view_yearSelected_0_listener","_yearSelectedInMultiYearView","MatCalendar_Case_4_Template_mat_multi_year_view_selectedChange_0_listener","MatDatepickerContent_ng_template_2_Template","_c2","_c3","_c4","MatDatepickerToggle_Conditional_2_Template","ɵɵnamespaceSVG","_c5","_c6","MatDatepickerActions_ng_template_0_Template","ɵɵdomElementStart","ɵɵprojection","ɵɵdomElementEnd","createMissingDateImplError","provider","Error","MatDatepickerIntl","changes","calendarLabel","openCalendarLabel","closeCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","startDateLabel","endDateLabel","comparisonDateLabel","formatYearRange","start","end","formatYearRangeLabel","ɵfac","MatDatepickerIntl_Factory","__ngFactoryType__","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","uniqueIdCounter$1","MatCalendarCell","value","rawValue","constructor","activeCapturingEventOptions","passive","capture","passiveCapturingEventOptions","passiveEventOptions","MatCalendarBody","_elementRef","_ngZone","_platform","_intl","_eventCleanups","_skipNextFocus","_focusActiveCellAfterViewChecked","rows","startValue","endValue","activeCell","ngAfterViewChecked","_focusActiveCell","isRange","cellAspectRatio","previewStart","previewEnd","selectedValueChange","previewChange","activeDateChange","dragStarted","dragEnded","_startDateLabelId","_endDateLabelId","_comparisonStartDateLabelId","_comparisonEndDateLabelId","_didDragSinceMouseDown","_injector","comparisonDateAccessibleName","row","renderer","idGenerator","getId","load","runOutsideAngular","element","nativeElement","cleanups","listen","_touchmoveHandler","_enterHandler","_leaveHandler","_mousedownHandler","isBrowser","push","_mouseupHandler","_touchendHandler","cell","event","emit","ngOnChanges","columnChanges","length","ngOnDestroy","forEach","cleanup","rowIndex","colIndex","cellNumber","movePreview","setTimeout","querySelector","focus","injector","_scheduleFocusActiveCellAfterViewChecked","isStart","isEnd","isInRange","previousCell","previousRow","nextCell","nextRow","target","_getCellFromElement","run","getActualTouchTarget","getCellElement","preventDefault","relatedTarget","cellElement","closest","getAttribute","col","parseInt","MatCalendarBody_Factory","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","inputs","outputs","exportAs","features","ɵɵNgOnChangesFeature","attrs","decls","vars","consts","template","MatCalendarBody_Template","ɵɵtextInterpolate2","dependencies","styles","encapsulation","changeDetection","selector","host","None","OnPush","imports","isTableCell","node","nodeName","parentNode","rangeEnabled","touchLocation","changedTouches","document","elementFromPoint","clientX","clientY","DateRange","_disableStructuralEquivalency","MatDateSelectionModel","selection","_adapter","_selectionChanged","selectionChanged","updateSelection","source","oldValue","next","complete","_isValidDateInstance","date","isDateInstance","isValid","MatDateSelectionModel_Factory","ɵɵinvalidFactory","undefined","MatSingleDateSelectionModel","adapter","add","isComplete","clone","MatSingleDateSelectionModel_Factory","ɵɵinject","MatRangeDateSelectionModel","compareDate","MatRangeDateSelectionModel_Factory","MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY","parent","MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER","provide","deps","useFactory","MAT_RANGE_DATE_SELECTION_MODEL_FACTORY","MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER","MAT_DATE_RANGE_SELECTION_STRATEGY","DefaultMatCalendarRangeStrategy","_dateAdapter","selectionFinished","currentRange","createPreview","createDrag","dragOrigin","originalRange","newDate","diffYears","getYear","diffMonths","getMonth","diffDays","getDate","sameDate","addCalendarYears","addCalendarMonths","addCalendarDays","DefaultMatCalendarRangeStrategy_Factory","MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY","MAT_CALENDAR_RANGE_STRATEGY_PROVIDER","DAYS_PER_WEEK","uniqueIdCounter","MatMonthView","_changeDetectorRef","_dateFormats","optional","_dir","_rangeStrategy","_rerenderSubscription","EMPTY","_selectionKeyPressed","_activeDate","oldActiveDate","validDate","getValidDateOrNull","deserialize","today","clampDate","_hasSameMonthAndYear","_init","_selected","_setRanges","_minDate","_maxDate","activeDrag","selectedChange","_userSelection","_matCalendarBody","_monthLabel","_weeks","_firstWeekOffset","_rangeStart","_rangeEnd","_comparisonRangeStart","_comparisonRangeEnd","_previewStart","_previewEnd","_isRange","_todayDate","_weekdays","ngAfterContentInit","localeChanges","pipe","subscribe","comparisonChange","firstChange","_clearPreview","unsubscribe","selectedDate","_getDateFromDayOfMonth","rangeStartDate","rangeEndDate","_getDateInCurrentMonth","markForCheck","_updateActiveDate","month","_handleCalendarBodyKeydown","isRtl","_isRtl","keyCode","getNumDaysInMonth","altKey","_canSelect","stopPropagation","_handleCalendarBodyKeyup","_getCellCompareValue","display","monthLabel","format","getMonthNames","toLocaleUpperCase","firstOfMonth","createDate","getDayOfWeek","getFirstDayOfWeek","_initWeekdays","_createWeekCells","_previewChanged","previewRange","dragRange","detectChanges","dragDropResult","dayOfMonth","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","i","slice","concat","daysInMonth","dateNames","getDateNames","_shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","year","day","Date","getTime","selectedValue","MatMonthView_Factory","viewQuery","MatMonthView_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","MatMonthView_Template","MatMonthView_Template_tbody_selectedValueChange_7_listener","MatMonthView_Template_tbody_activeDateChange_7_listener","MatMonthView_Template_tbody_previewChange_7_listener","MatMonthView_Template_tbody_dragStarted_7_listener","MatMonthView_Template_tbody_dragEnded_7_listener","MatMonthView_Template_tbody_keyup_7_listener","MatMonthView_Template_tbody_keydown_7_listener","yearsPerPage","yearsPerRow","MatMultiYearView","isSameMultiYearView","_setSelectedYear","yearSelected","_years","_todayYear","_selectedYear","activeYear","minYearOfPage","getActiveOffset","_createCellForYear","_yearSelected","selectedYear","_getDateFromYear","_getActiveCell","activeMonth","normalizedDate","Math","min","yearName","getYearName","_shouldEnableYear","firstOfYear","MatMultiYearView_Factory","MatMultiYearView_Query","MatMultiYearView_Template","MatMultiYearView_Template_tbody_selectedValueChange_4_listener","MatMultiYearView_Template_tbody_activeDateChange_4_listener","MatMultiYearView_Template_tbody_keyup_4_listener","MatMultiYearView_Template_tbody_keydown_4_listener","dateAdapter","date1","date2","year1","year2","startingYear","getStartingYear","floor","euclideanModulo","maxYear","a","b","MatYearView","_setSelectedMonth","monthSelected","_months","_yearLabel","_todayMonth","_selectedMonth","_monthSelected","selectedMonth","_getDateFromMonth","_getMonthInCurrentYear","monthNames","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxMonth","minYear","minMonth","MatYearView_Factory","MatYearView_Query","MatYearView_Template","MatYearView_Template_tbody_selectedValueChange_4_listener","MatYearView_Template_tbody_activeDateChange_4_listener","MatYearView_Template_tbody_keyup_4_listener","MatYearView_Template_tbody_keydown_4_listener","MatCalendarHeader","calendar","MatCalendar","_periodButtonText","_periodButtonDescription","_periodButtonLabel","_prevButtonLabel","_nextButtonLabel","changeDetectorRef","_updateLabels","stateChanges","periodButtonText","periodButtonDescription","periodButtonLabel","prevButtonLabel","nextButtonLabel","currentPeriodClicked","currentView","previousClicked","previousEnabled","nextClicked","nextEnabled","_isSameView","intl","monthYearLabel","_formatMinAndMaxYearLabels","maxYearOfPage","minYearLabel","maxYearLabel","_periodButtonLabelId","MatCalendarHeader_Factory","ngContentSelectors","MatCalendarHeader_Template","ɵɵprojectionDef","MatCalendarHeader_Template_button_click_4_listener","ɵɵnamespaceHTML","MatCalendarHeader_Template_button_click_11_listener","MatCalendarHeader_Template_button_click_14_listener","headerComponent","_calendarHeaderPortal","_intlChanges","_moveFocusOnNextTick","startAt","_startAt","startView","viewChanged","_userDragDrop","monthView","yearView","multiYearView","_clampedActiveDate","_currentView","viewChangedResult","focusActiveCell","minDateChange","previousValue","currentValue","maxDateChange","changeRequiringRerender","view","_getCurrentViewComponent","contains","updateTodaysDate","normalizedYear","normalizedMonth","MatCalendar_Factory","MatCalendar_Query","ɵɵProvidersFeature","MatCalendar_Template","ɵɵtemplate","tmp_1_0","providers","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","_overlay","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerContent","_globalModel","_rangeSelectionStrategy","_stateChanges","_model","_animationFallback","_calendar","color","datepicker","_isAbove","_animationDone","_isAnimating","_closeButtonText","_closeButtonFocused","_actionsPortal","_dialogLabelId","_handleAnimationEvent","ngAfterViewInit","clearTimeout","_handleUserSelection","newSelection","close","_handleUserDragDrop","_startExitAnimation","classList","animationName","startsWith","toggle","_getSelected","_applyPendingSelection","_assignActions","portal","forceRerender","MatDatepickerContent_Factory","MatDatepickerContent_Query","hostVars","hostBindings","MatDatepickerContent_HostBindings","ɵɵclassMap","touchUi","MatDatepickerContent_Template","MatDatepickerContent_Template_mat_calendar_yearSelected_1_listener","_selectYear","MatDatepickerContent_Template_mat_calendar_monthSelected_1_listener","_selectMonth","MatDatepickerContent_Template_mat_calendar_viewChanged_1_listener","_viewChanged","MatDatepickerContent_Template_mat_calendar__userSelection_1_listener","MatDatepickerContent_Template_mat_calendar__userDragDrop_1_listener","MatDatepickerContent_Template_button_focus_3_listener","MatDatepickerContent_Template_button_blur_3_listener","MatDatepickerContent_Template_button_click_3_listener","calendarHeaderComponent","panelClass","_getMinDate","_getMaxDate","_getDateFilter","MatDatepickerBase","_viewContainerRef","_scrollStrategy","_inputStateChanges","_document","datepickerInput","getStartValue","_color","getThemePalette","disabled","_disabled","xPosition","yPosition","restoreFocus","openedStream","closedStream","_panelClass","opened","_opened","open","max","_overlayRef","_componentRef","_focusedElementBeforeOpen","_backdropHarnessClass","positionChange","positionStrategy","getConfig","_setConnectedPositions","updatePosition","_destroyOverlay","select","registerInput","input","registerActions","instance","removeActions","_openOverlay","canRestoreFocus","completeClose","location","activeElement","_forwardContentValues","getOverlayLabelId","isDialog","overlayRef","_getDialogStrategy","_getDropdownStrategy","hasBackdrop","backdropClass","direction","scrollStrategy","disableAnimations","_getCloseStream","keydownEvents","attach","dispose","centerHorizontally","centerVertically","strategy","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","primaryX","secondaryX","primaryY","secondaryY","withPositions","originX","originY","overlayX","overlayY","ctrlShiftMetaModifiers","backdropClick","detachments","every","modifier","MatDatepickerBase_Factory","ɵdir","ɵɵdefineDirective","transform","MatDatepicker","ɵMatDatepicker_BaseFactory","MatDatepicker_Factory","ɵɵgetInheritedFactory","useExisting","ɵɵInheritDefinitionFeature","MatDatepicker_Template","MatDatepickerInputEvent","targetElement","MatDatepickerInputBase","_isInitialized","_getValueFromModel","_pendingValue","_assignValueProgrammatically","_parentDisabled","newValue","blur","dateChange","dateInput","_onTouched","_validatorOnChange","_cvaOnChange","_valueChangesSubscription","_localeSubscription","_parseValidator","_lastValueValid","_filterValidator","control","controlValue","_matchesFilter","_minValidator","_maxValidator","_getValidators","_registerModel","model","_assignValue","_shouldHandleChangeEvent","_isValidValue","_formatValue","dateInputsHaveChanged","registerOnValidatorChange","fn","validate","c","_validator","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","isAltDownArrow","readOnly","_openPopup","_onInput","lastValueWasValid","parse","hasChanged","_onChange","_onBlur","_assignValueToModel","MatDatepickerInputBase_Factory","keys","Object","key","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","_formField","_closedSubscription","_openedSubscription","matDatepicker","_datepicker","_ariaOwns","set","debugName","_min","validValue","_max","_dateFilter","wasMatchingValue","compose","getLabelId","modelValue","MatDatepickerInput_Factory","MatDatepickerInput_HostBindings","MatDatepickerInput_input_HostBindingHandler","MatDatepickerInput_change_HostBindingHandler","MatDatepickerInput_blur_HostBindingHandler","MatDatepickerInput_keydown_HostBindingHandler","ɵɵdomProperty","toIso8601","MatDatepickerToggleIcon","MatDatepickerToggleIcon_Factory","MatDatepickerToggle","tabIndex","disableRipple","_customIcon","_button","defaultTabIndex","parsedTabIndex","Number","_watchStateChanges","_open","datepickerStateChanged","inputStateChanged","datepickerToggled","MatDatepickerToggle_Factory","contentQueries","MatDatepickerToggle_ContentQueries","dirIndex","ɵɵcontentQuery","MatDatepickerToggle_Query","MatDatepickerToggle_HostBindings","MatDatepickerToggle_click_HostBindingHandler","MatDatepickerToggle_Template","MatDateRangeInput","_startInput","_endInput","focused","shouldLabelFloat","empty","controlType","placeholder","_getPlaceholder","separator","rangePicker","_rangePicker","required","_required","_isTargetRequired","wasMatchingStart","wasMatchingEnd","_revalidate","_groupDisabled","errorState","startEmpty","isEmpty","endEmpty","_ariaDescribedBy","ngControl","disableAutomaticLabeling","self","describedByIds","existingDescribedBy","split","setDescribedByIds","ids","join","onContainerClick","_getInputMirrorValue","part","getMirrorValue","_shouldHidePlaceholders","_handleChildValueChange","_openDatepicker","_shouldHideSeparator","_shouldLabelFloat","_getAriaLabelledby","formField","_hasFloatingLabel","_labelId","_getStartDateAccessibleName","_getAccessibleName","_getEndDateAccessibleName","_updateFocus","origin","hasValidator","MatDateRangeInput_Factory","MatDateRangeInput_HostBindings","MatDateRangeInput_Template","MatDateRangeInput_Template_div_cdkFocusChange_0_listener","_computeAriaAccessibleName","_computeAriaAccessibleNameInternal","ssrSafeIsElement","nodeType","Node","ELEMENT_NODE","ssrSafeIsHTMLInputElement","ssrSafeIsHTMLTextAreaElement","currentNode","isDirectlyReferenced","labelledbyIds","validIdRefs","reduce","validIds","elem","getElementById","idRef","trim","labels","Array","from","x","title","textContent","replace","MatDateRangeInputPartBase","_rangeInput","_defaultErrorStateMatcher","_rawValue","_parentForm","_parentFormGroup","_errorStateTracker","errorStateMatcher","matcher","ngOnInit","get","_register","ngDoCheck","updateErrorState","opposite","MatDateRangeInputPartBase_Factory","MatStartDate","_startValidator","change","range","endInput","isLtr","selectionStart","selectionEnd","setSelectionRange","ɵMatStartDate_BaseFactory","MatStartDate_Factory","MatStartDate_HostBindings","MatStartDate_input_HostBindingHandler","MatStartDate_change_HostBindingHandler","MatStartDate_keydown_HostBindingHandler","MatStartDate_blur_HostBindingHandler","MatEndDate","_endValidator","_moveCaretToEndOfStartInput","startInput","ɵMatEndDate_BaseFactory","MatEndDate_Factory","MatEndDate_HostBindings","MatEndDate_input_HostBindingHandler","MatEndDate_change_HostBindingHandler","MatEndDate_keydown_HostBindingHandler","MatEndDate_blur_HostBindingHandler","MatDateRangePicker","ɵMatDateRangePicker_BaseFactory","MatDateRangePicker_Factory","MatDateRangePicker_Template","MatDatepickerApply","_applySelection","MatDatepickerApply_Factory","MatDatepickerApply_HostBindings","MatDatepickerApply_click_HostBindingHandler","MatDatepickerCancel","MatDatepickerCancel_Factory","MatDatepickerCancel_HostBindings","MatDatepickerCancel_click_HostBindingHandler","MatDatepickerActions","_template","_portal","isAttached","detach","MatDatepickerActions_Factory","MatDatepickerActions_Query","MatDatepickerActions_Template","ɵɵdomTemplate","MatDatepickerModule","MatDatepickerModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","matDatepickerAnimations","transformPanel","name","definitions","expr","animation","steps","opacity","offset","timings","options","fadeInCalendar"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/node_modules/@angular/material/fesm2022/datepicker.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, inject, ElementRef, NgZone, EventEmitter, Injector, Renderer2, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, Optional, SkipSelf, InjectionToken, ChangeDetectorRef, ViewChild, ViewContainerRef, DOCUMENT, booleanAttribute, Directive, forwardRef, signal, HostAttributeToken, ContentChild, TemplateRef, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of } from 'rxjs';\nimport { DateAdapter, MAT_DATE_FORMATS } from './date-formats.mjs';\nimport { _IdGenerator, CdkMonitorFocus, CdkTrapFocus, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceStringArray } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey, SPACE, ENTER, PAGE_DOWN, PAGE_UP, END, HOME, DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW, BACKSPACE } from '@angular/cdk/keycodes';\nimport { createRepositionScrollStrategy, FlexibleConnectedPositionStrategy, createOverlayRef, OverlayConfig, createBlockScrollStrategy, createGlobalPositionStrategy, createFlexibleConnectedPositionStrategy, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform, _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { ComponentPortal, CdkPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { startWith, take, filter } from 'rxjs/operators';\nimport { NgClass } from '@angular/common';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { _StructuralStylesLoader } from './structural-styles.mjs';\nimport { MatButton, MatButtonModule } from './button.mjs';\nimport { MatIconButton } from './icon-button.mjs';\nimport { _animationsDisabled } from './animation.mjs';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators, ControlContainer, NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MAT_INPUT_VALUE_ACCESSOR } from './input-value-accessor.mjs';\nimport { MAT_FORM_FIELD, MatFormFieldControl } from './form-field2.mjs';\nimport { ErrorStateMatcher } from './error-options.mjs';\nimport { _ErrorStateTracker } from './error-state.mjs';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from './common-module.mjs';\nimport './ripple-module.mjs';\nimport './ripple.mjs';\nimport './ripple-loader.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/observers/private';\n\n/** @docs-private */\nfunction createMissingDateImplError(provider) {\n    return Error(`MatDatepicker: No provider found for ${provider}. You must add one of the following ` +\n        `to your app config: provideNativeDateAdapter, provideDateFnsAdapter, ` +\n        `provideLuxonDateAdapter, provideMomentDateAdapter, or provide a custom implementation.`);\n}\n\n/** Datepicker data that requires internationalization. */\nclass MatDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    changes = new Subject();\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel = 'Calendar';\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel = 'Open calendar';\n    /** Label for the button used to close the calendar popup. */\n    closeCalendarLabel = 'Close calendar';\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel = 'Previous month';\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel = 'Next month';\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel = 'Previous year';\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel = 'Next year';\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel = 'Previous 24 years';\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel = 'Next 24 years';\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel = 'Choose date';\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel = 'Choose month and year';\n    /**\n     * A label for the first date of a range of dates (used by screen readers).\n     * @deprecated Provide your own internationalization string.\n     * @breaking-change 17.0.0\n     */\n    startDateLabel = 'Start date';\n    /**\n     * A label for the last date of a range of dates (used by screen readers).\n     * @deprecated Provide your own internationalization string.\n     * @breaking-change 17.0.0\n     */\n    endDateLabel = 'End date';\n    /**\n     * A label for the Comparison date of a range of dates (used by screen readers).\n     */\n    comparisonDateLabel = 'Comparison range';\n    /** Formats a range of years (used for visuals). */\n    formatYearRange(start, end) {\n        return `${start} \\u2013 ${end}`;\n    }\n    /** Formats a label for a range of years (used by screen readers). */\n    formatYearRangeLabel(start, end) {\n        return `${start} to ${end}`;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerIntl, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nlet uniqueIdCounter$1 = 0;\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nclass MatCalendarCell {\n    value;\n    displayValue;\n    ariaLabel;\n    enabled;\n    cssClasses;\n    compareValue;\n    rawValue;\n    id = uniqueIdCounter$1++;\n    constructor(value, displayValue, ariaLabel, enabled, cssClasses = {}, compareValue = value, rawValue) {\n        this.value = value;\n        this.displayValue = displayValue;\n        this.ariaLabel = ariaLabel;\n        this.enabled = enabled;\n        this.cssClasses = cssClasses;\n        this.compareValue = compareValue;\n        this.rawValue = rawValue;\n    }\n}\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n    passive: false,\n    capture: true,\n};\n/** Event options that can be used to bind a passive, capturing event. */\nconst passiveCapturingEventOptions = {\n    passive: true,\n    capture: true,\n};\n/** Event options that can be used to bind a passive, non-capturing event. */\nconst passiveEventOptions = { passive: true };\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\nclass MatCalendarBody {\n    _elementRef = inject(ElementRef);\n    _ngZone = inject(NgZone);\n    _platform = inject(Platform);\n    _intl = inject(MatDatepickerIntl);\n    _eventCleanups;\n    /**\n     * Used to skip the next focus event when rendering the preview range.\n     * We need a flag like this, because some browsers fire focus events asynchronously.\n     */\n    _skipNextFocus;\n    /**\n     * Used to focus the active cell after change detection has run.\n     */\n    _focusActiveCellAfterViewChecked = false;\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    label;\n    /** The cells to display in the table. */\n    rows;\n    /** The value in the table that corresponds to today. */\n    todayValue;\n    /** Start value of the selected date range. */\n    startValue;\n    /** End value of the selected date range. */\n    endValue;\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    labelMinRequiredCells;\n    /** The number of columns in the table. */\n    numCols = 7;\n    /** The cell number of the active cell in the table. */\n    activeCell = 0;\n    ngAfterViewChecked() {\n        if (this._focusActiveCellAfterViewChecked) {\n            this._focusActiveCell();\n            this._focusActiveCellAfterViewChecked = false;\n        }\n    }\n    /** Whether a range is being selected. */\n    isRange = false;\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    cellAspectRatio = 1;\n    /** Start of the comparison range. */\n    comparisonStart;\n    /** End of the comparison range. */\n    comparisonEnd;\n    /** Start of the preview range. */\n    previewStart = null;\n    /** End of the preview range. */\n    previewEnd = null;\n    /** ARIA Accessible name of the `<input matStartDate/>` */\n    startDateAccessibleName;\n    /** ARIA Accessible name of the `<input matEndDate/>` */\n    endDateAccessibleName;\n    /** Emits when a new value is selected. */\n    selectedValueChange = new EventEmitter();\n    /** Emits when the preview has changed as a result of a user action. */\n    previewChange = new EventEmitter();\n    activeDateChange = new EventEmitter();\n    /** Emits the date at the possible start of a drag event. */\n    dragStarted = new EventEmitter();\n    /** Emits the date at the conclusion of a drag, or null if mouse was not released on a date. */\n    dragEnded = new EventEmitter();\n    /** The number of blank cells to put at the beginning for the first row. */\n    _firstRowOffset;\n    /** Padding for the individual date cells. */\n    _cellPadding;\n    /** Width of an individual cell. */\n    _cellWidth;\n    /** ID for the start date label. */\n    _startDateLabelId;\n    /** ID for the end date label. */\n    _endDateLabelId;\n    /** ID for the comparison start date label. */\n    _comparisonStartDateLabelId;\n    /** ID for the comparison end date label. */\n    _comparisonEndDateLabelId;\n    _didDragSinceMouseDown = false;\n    _injector = inject(Injector);\n    comparisonDateAccessibleName = this._intl.comparisonDateLabel;\n    /**\n     * Tracking function for rows based on their identity. Ideally we would use some sort of\n     * key on the row, but that would require a breaking change for the `rows` input. We don't\n     * use the built-in identity tracking, because it logs warnings.\n     */\n    _trackRow = (row) => row;\n    constructor() {\n        const renderer = inject(Renderer2);\n        const idGenerator = inject(_IdGenerator);\n        this._startDateLabelId = idGenerator.getId('mat-calendar-body-start-');\n        this._endDateLabelId = idGenerator.getId('mat-calendar-body-end-');\n        this._comparisonStartDateLabelId = idGenerator.getId('mat-calendar-body-comparison-start-');\n        this._comparisonEndDateLabelId = idGenerator.getId('mat-calendar-body-comparison-end-');\n        inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n        this._ngZone.runOutsideAngular(() => {\n            const element = this._elementRef.nativeElement;\n            const cleanups = [\n                // `touchmove` is active since we need to call `preventDefault`.\n                renderer.listen(element, 'touchmove', this._touchmoveHandler, activeCapturingEventOptions),\n                renderer.listen(element, 'mouseenter', this._enterHandler, passiveCapturingEventOptions),\n                renderer.listen(element, 'focus', this._enterHandler, passiveCapturingEventOptions),\n                renderer.listen(element, 'mouseleave', this._leaveHandler, passiveCapturingEventOptions),\n                renderer.listen(element, 'blur', this._leaveHandler, passiveCapturingEventOptions),\n                renderer.listen(element, 'mousedown', this._mousedownHandler, passiveEventOptions),\n                renderer.listen(element, 'touchstart', this._mousedownHandler, passiveEventOptions),\n            ];\n            if (this._platform.isBrowser) {\n                cleanups.push(renderer.listen('window', 'mouseup', this._mouseupHandler), renderer.listen('window', 'touchend', this._touchendHandler));\n            }\n            this._eventCleanups = cleanups;\n        });\n    }\n    /** Called when a cell is clicked. */\n    _cellClicked(cell, event) {\n        // Ignore \"clicks\" that are actually canceled drags (eg the user dragged\n        // off and then went back to this cell to undo).\n        if (this._didDragSinceMouseDown) {\n            return;\n        }\n        if (cell.enabled) {\n            this.selectedValueChange.emit({ value: cell.value, event });\n        }\n    }\n    _emitActiveDateChange(cell, event) {\n        if (cell.enabled) {\n            this.activeDateChange.emit({ value: cell.value, event });\n        }\n    }\n    /** Returns whether a cell should be marked as selected. */\n    _isSelected(value) {\n        return this.startValue === value || this.endValue === value;\n    }\n    ngOnChanges(changes) {\n        const columnChanges = changes['numCols'];\n        const { rows, numCols } = this;\n        if (changes['rows'] || columnChanges) {\n            this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n        if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n            this._cellPadding = `${(50 * this.cellAspectRatio) / numCols}%`;\n        }\n        if (columnChanges || !this._cellWidth) {\n            this._cellWidth = `${100 / numCols}%`;\n        }\n    }\n    ngOnDestroy() {\n        this._eventCleanups.forEach(cleanup => cleanup());\n    }\n    /** Returns whether a cell is active. */\n    _isActiveCell(rowIndex, colIndex) {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this._firstRowOffset;\n        }\n        return cellNumber == this.activeCell;\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     *\n     * Adding a 0ms setTimeout seems to fix Voiceover losing focus when pressing PageUp/PageDown\n     * (issue #24330).\n     *\n     * Determined a 0ms by gradually increasing duration from 0 and testing two use cases with screen\n     * reader enabled:\n     *\n     * 1. Pressing PageUp/PageDown repeatedly with pausing between each key press.\n     * 2. Pressing and holding the PageDown key with repeated keys enabled.\n     *\n     * Test 1 worked roughly 95-99% of the time with 0ms and got a little bit better as the duration\n     * increased. Test 2 got slightly better until the duration was long enough to interfere with\n     * repeated keys. If the repeated key speed was faster than the timeout duration, then pressing\n     * and holding pagedown caused the entire page to scroll.\n     *\n     * Since repeated key speed can verify across machines, determined that any duration could\n     * potentially interfere with repeated keys. 0ms would be best because it almost entirely\n     * eliminates the focus being lost in Voiceover (#24330) without causing unintended side effects.\n     * Adding delay also complicates writing tests.\n     */\n    _focusActiveCell(movePreview = true) {\n        afterNextRender(() => {\n            setTimeout(() => {\n                const activeCell = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n                if (activeCell) {\n                    if (!movePreview) {\n                        this._skipNextFocus = true;\n                    }\n                    activeCell.focus();\n                }\n            });\n        }, { injector: this._injector });\n    }\n    /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n    _scheduleFocusActiveCellAfterViewChecked() {\n        this._focusActiveCellAfterViewChecked = true;\n    }\n    /** Gets whether a value is the start of the main range. */\n    _isRangeStart(value) {\n        return isStart(value, this.startValue, this.endValue);\n    }\n    /** Gets whether a value is the end of the main range. */\n    _isRangeEnd(value) {\n        return isEnd(value, this.startValue, this.endValue);\n    }\n    /** Gets whether a value is within the currently-selected range. */\n    _isInRange(value) {\n        return isInRange(value, this.startValue, this.endValue, this.isRange);\n    }\n    /** Gets whether a value is the start of the comparison range. */\n    _isComparisonStart(value) {\n        return isStart(value, this.comparisonStart, this.comparisonEnd);\n    }\n    /** Whether the cell is a start bridge cell between the main and comparison ranges. */\n    _isComparisonBridgeStart(value, rowIndex, colIndex) {\n        if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\n            return false;\n        }\n        let previousCell = this.rows[rowIndex][colIndex - 1];\n        if (!previousCell) {\n            const previousRow = this.rows[rowIndex - 1];\n            previousCell = previousRow && previousRow[previousRow.length - 1];\n        }\n        return previousCell && !this._isRangeEnd(previousCell.compareValue);\n    }\n    /** Whether the cell is an end bridge cell between the main and comparison ranges. */\n    _isComparisonBridgeEnd(value, rowIndex, colIndex) {\n        if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\n            return false;\n        }\n        let nextCell = this.rows[rowIndex][colIndex + 1];\n        if (!nextCell) {\n            const nextRow = this.rows[rowIndex + 1];\n            nextCell = nextRow && nextRow[0];\n        }\n        return nextCell && !this._isRangeStart(nextCell.compareValue);\n    }\n    /** Gets whether a value is the end of the comparison range. */\n    _isComparisonEnd(value) {\n        return isEnd(value, this.comparisonStart, this.comparisonEnd);\n    }\n    /** Gets whether a value is within the current comparison range. */\n    _isInComparisonRange(value) {\n        return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\n    }\n    /**\n     * Gets whether a value is the same as the start and end of the comparison range.\n     * For context, the functions that we use to determine whether something is the start/end of\n     * a range don't allow for the start and end to be on the same day, because we'd have to use\n     * much more specific CSS selectors to style them correctly in all scenarios. This is fine for\n     * the regular range, because when it happens, the selected styles take over and still show where\n     * the range would've been, however we don't have these selected styles for a comparison range.\n     * This function is used to apply a class that serves the same purpose as the one for selected\n     * dates, but it only applies in the context of a comparison range.\n     */\n    _isComparisonIdentical(value) {\n        // Note that we don't need to null check the start/end\n        // here, because the `value` will always be defined.\n        return this.comparisonStart === this.comparisonEnd && value === this.comparisonStart;\n    }\n    /** Gets whether a value is the start of the preview range. */\n    _isPreviewStart(value) {\n        return isStart(value, this.previewStart, this.previewEnd);\n    }\n    /** Gets whether a value is the end of the preview range. */\n    _isPreviewEnd(value) {\n        return isEnd(value, this.previewStart, this.previewEnd);\n    }\n    /** Gets whether a value is inside the preview range. */\n    _isInPreview(value) {\n        return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\n    }\n    /** Gets ids of aria descriptions for the start and end of a date range. */\n    _getDescribedby(value) {\n        if (!this.isRange) {\n            return null;\n        }\n        if (this.startValue === value && this.endValue === value) {\n            return `${this._startDateLabelId} ${this._endDateLabelId}`;\n        }\n        else if (this.startValue === value) {\n            return this._startDateLabelId;\n        }\n        else if (this.endValue === value) {\n            return this._endDateLabelId;\n        }\n        if (this.comparisonStart !== null && this.comparisonEnd !== null) {\n            if (value === this.comparisonStart && value === this.comparisonEnd) {\n                return `${this._comparisonStartDateLabelId} ${this._comparisonEndDateLabelId}`;\n            }\n            else if (value === this.comparisonStart) {\n                return this._comparisonStartDateLabelId;\n            }\n            else if (value === this.comparisonEnd) {\n                return this._comparisonEndDateLabelId;\n            }\n        }\n        return null;\n    }\n    /**\n     * Event handler for when the user enters an element\n     * inside the calendar body (e.g. by hovering in or focus).\n     */\n    _enterHandler = (event) => {\n        if (this._skipNextFocus && event.type === 'focus') {\n            this._skipNextFocus = false;\n            return;\n        }\n        // We only need to hit the zone when we're selecting a range.\n        if (event.target && this.isRange) {\n            const cell = this._getCellFromElement(event.target);\n            if (cell) {\n                this._ngZone.run(() => this.previewChange.emit({ value: cell.enabled ? cell : null, event }));\n            }\n        }\n    };\n    _touchmoveHandler = (event) => {\n        if (!this.isRange)\n            return;\n        const target = getActualTouchTarget(event);\n        const cell = target ? this._getCellFromElement(target) : null;\n        if (target !== event.target) {\n            this._didDragSinceMouseDown = true;\n        }\n        // If the initial target of the touch is a date cell, prevent default so\n        // that the move is not handled as a scroll.\n        if (getCellElement(event.target)) {\n            event.preventDefault();\n        }\n        this._ngZone.run(() => this.previewChange.emit({ value: cell?.enabled ? cell : null, event }));\n    };\n    /**\n     * Event handler for when the user's pointer leaves an element\n     * inside the calendar body (e.g. by hovering out or blurring).\n     */\n    _leaveHandler = (event) => {\n        // We only need to hit the zone when we're selecting a range.\n        if (this.previewEnd !== null && this.isRange) {\n            if (event.type !== 'blur') {\n                this._didDragSinceMouseDown = true;\n            }\n            // Only reset the preview end value when leaving cells. This looks better, because\n            // we have a gap between the cells and the rows and we don't want to remove the\n            // range just for it to show up again when the user moves a few pixels to the side.\n            if (event.target &&\n                this._getCellFromElement(event.target) &&\n                !(event.relatedTarget &&\n                    this._getCellFromElement(event.relatedTarget))) {\n                this._ngZone.run(() => this.previewChange.emit({ value: null, event }));\n            }\n        }\n    };\n    /**\n     * Triggered on mousedown or touchstart on a date cell.\n     * Respsonsible for starting a drag sequence.\n     */\n    _mousedownHandler = (event) => {\n        if (!this.isRange)\n            return;\n        this._didDragSinceMouseDown = false;\n        // Begin a drag if a cell within the current range was targeted.\n        const cell = event.target && this._getCellFromElement(event.target);\n        if (!cell || !this._isInRange(cell.compareValue)) {\n            return;\n        }\n        this._ngZone.run(() => {\n            this.dragStarted.emit({\n                value: cell.rawValue,\n                event,\n            });\n        });\n    };\n    /** Triggered on mouseup anywhere. Respsonsible for ending a drag sequence. */\n    _mouseupHandler = (event) => {\n        if (!this.isRange)\n            return;\n        const cellElement = getCellElement(event.target);\n        if (!cellElement) {\n            // Mouseup happened outside of datepicker. Cancel drag.\n            this._ngZone.run(() => {\n                this.dragEnded.emit({ value: null, event });\n            });\n            return;\n        }\n        if (cellElement.closest('.mat-calendar-body') !== this._elementRef.nativeElement) {\n            // Mouseup happened inside a different month instance.\n            // Allow it to handle the event.\n            return;\n        }\n        this._ngZone.run(() => {\n            const cell = this._getCellFromElement(cellElement);\n            this.dragEnded.emit({ value: cell?.rawValue ?? null, event });\n        });\n    };\n    /** Triggered on touchend anywhere. Respsonsible for ending a drag sequence. */\n    _touchendHandler = (event) => {\n        const target = getActualTouchTarget(event);\n        if (target) {\n            this._mouseupHandler({ target });\n        }\n    };\n    /** Finds the MatCalendarCell that corresponds to a DOM node. */\n    _getCellFromElement(element) {\n        const cell = getCellElement(element);\n        if (cell) {\n            const row = cell.getAttribute('data-mat-row');\n            const col = cell.getAttribute('data-mat-col');\n            if (row && col) {\n                return this.rows[parseInt(row)][parseInt(col)];\n            }\n        }\n        return null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatCalendarBody, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.2.0-rc.1\", type: MatCalendarBody, isStandalone: true, selector: \"[mat-calendar-body]\", inputs: { label: \"label\", rows: \"rows\", todayValue: \"todayValue\", startValue: \"startValue\", endValue: \"endValue\", labelMinRequiredCells: \"labelMinRequiredCells\", numCols: \"numCols\", activeCell: \"activeCell\", isRange: \"isRange\", cellAspectRatio: \"cellAspectRatio\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\", previewStart: \"previewStart\", previewEnd: \"previewEnd\", startDateAccessibleName: \"startDateAccessibleName\", endDateAccessibleName: \"endDateAccessibleName\" }, outputs: { selectedValueChange: \"selectedValueChange\", previewChange: \"previewChange\", activeDateChange: \"activeDateChange\", dragStarted: \"dragStarted\", dragEnded: \"dragEnded\" }, host: { classAttribute: \"mat-calendar-body\" }, exportAs: [\"matCalendarBody\"], usesOnChanges: true, ngImport: i0, template: \"<!--\\n  If there's not enough space in the first row, create a separate label row. We mark this row as\\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\\n-->\\n@if (_firstRowOffset < labelMinRequiredCells) {\\n  <tr aria-hidden=\\\"true\\\">\\n    <td class=\\\"mat-calendar-body-label\\\"\\n        [attr.colspan]=\\\"numCols\\\"\\n        [style.paddingTop]=\\\"_cellPadding\\\"\\n        [style.paddingBottom]=\\\"_cellPadding\\\">\\n      {{label}}\\n    </td>\\n  </tr>\\n}\\n\\n<!-- Create the first row separately so we can include a special spacer cell. -->\\n@for (row of rows; track _trackRow(row); let rowIndex = $index) {\\n  <tr role=\\\"row\\\">\\n    <!--\\n      This cell is purely decorative, but we can't put `aria-hidden` or `role=\\\"presentation\\\"` on it,\\n      because it throws off the week days for the rest of the row on NVDA. The aspect ratio of the\\n      table cells is maintained by setting the top and bottom padding as a percentage of the width\\n      (a variant of the trick described here: https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\\n    -->\\n    @if (rowIndex === 0 && _firstRowOffset) {\\n      <td\\n        class=\\\"mat-calendar-body-label\\\"\\n        [attr.colspan]=\\\"_firstRowOffset\\\"\\n        [style.paddingTop]=\\\"_cellPadding\\\"\\n        [style.paddingBottom]=\\\"_cellPadding\\\">\\n        {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\\n      </td>\\n    }\\n    <!--\\n      Each gridcell in the calendar contains a button, which signals to assistive technology that the\\n      cell is interactable, as well as the selection state via `aria-pressed`. See #23476 for\\n      background.\\n    -->\\n    @for (item of row; track item.id; let colIndex = $index) {\\n      <td\\n        role=\\\"gridcell\\\"\\n        class=\\\"mat-calendar-body-cell-container\\\"\\n        [style.width]=\\\"_cellWidth\\\"\\n        [style.paddingTop]=\\\"_cellPadding\\\"\\n        [style.paddingBottom]=\\\"_cellPadding\\\"\\n        [attr.data-mat-row]=\\\"rowIndex\\\"\\n        [attr.data-mat-col]=\\\"colIndex\\\"\\n      >\\n        <button\\n            type=\\\"button\\\"\\n            class=\\\"mat-calendar-body-cell\\\"\\n            [ngClass]=\\\"item.cssClasses\\\"\\n            [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\"\\n            [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\"\\n            [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\"\\n            [class.mat-calendar-body-range-start]=\\\"_isRangeStart(item.compareValue)\\\"\\n            [class.mat-calendar-body-range-end]=\\\"_isRangeEnd(item.compareValue)\\\"\\n            [class.mat-calendar-body-in-range]=\\\"_isInRange(item.compareValue)\\\"\\n            [class.mat-calendar-body-comparison-bridge-start]=\\\"_isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\\\"\\n            [class.mat-calendar-body-comparison-bridge-end]=\\\"_isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\\\"\\n            [class.mat-calendar-body-comparison-start]=\\\"_isComparisonStart(item.compareValue)\\\"\\n            [class.mat-calendar-body-comparison-end]=\\\"_isComparisonEnd(item.compareValue)\\\"\\n            [class.mat-calendar-body-in-comparison-range]=\\\"_isInComparisonRange(item.compareValue)\\\"\\n            [class.mat-calendar-body-preview-start]=\\\"_isPreviewStart(item.compareValue)\\\"\\n            [class.mat-calendar-body-preview-end]=\\\"_isPreviewEnd(item.compareValue)\\\"\\n            [class.mat-calendar-body-in-preview]=\\\"_isInPreview(item.compareValue)\\\"\\n            [attr.aria-label]=\\\"item.ariaLabel\\\"\\n            [attr.aria-disabled]=\\\"!item.enabled || null\\\"\\n            [attr.aria-pressed]=\\\"_isSelected(item.compareValue)\\\"\\n            [attr.aria-current]=\\\"todayValue === item.compareValue ? 'date' : null\\\"\\n            [attr.aria-describedby]=\\\"_getDescribedby(item.compareValue)\\\"\\n            (click)=\\\"_cellClicked(item, $event)\\\"\\n            (focus)=\\\"_emitActiveDateChange(item, $event)\\\">\\n            <span class=\\\"mat-calendar-body-cell-content mat-focus-indicator\\\"\\n              [class.mat-calendar-body-selected]=\\\"_isSelected(item.compareValue)\\\"\\n              [class.mat-calendar-body-comparison-identical]=\\\"_isComparisonIdentical(item.compareValue)\\\"\\n              [class.mat-calendar-body-today]=\\\"todayValue === item.compareValue\\\">\\n              {{item.displayValue}}\\n            </span>\\n            <span class=\\\"mat-calendar-body-cell-preview\\\" aria-hidden=\\\"true\\\"></span>\\n        </button>\\n      </td>\\n    }\\n  </tr>\\n}\\n\\n<span [id]=\\\"_startDateLabelId\\\" class=\\\"mat-calendar-body-hidden-label\\\">\\n  {{startDateAccessibleName}}\\n</span>\\n<span [id]=\\\"_endDateLabelId\\\" class=\\\"mat-calendar-body-hidden-label\\\">\\n  {{endDateAccessibleName}}\\n</span>\\n<span [id]=\\\"_comparisonStartDateLabelId\\\" class=\\\"mat-calendar-body-hidden-label\\\">\\n  {{comparisonDateAccessibleName}} {{startDateAccessibleName}}\\n</span>\\n<span [id]=\\\"_comparisonEndDateLabelId\\\" class=\\\"mat-calendar-body-hidden-label\\\">\\n  {{comparisonDateAccessibleName}} {{endDateAccessibleName}}\\n</span>\\n\", styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:var(--mat-datepicker-calendar-date-today-outline-color, var(--mat-sys-primary))}.mat-calendar-body-label{height:0;line-height:0;text-align:start;padding-left:4.7142857143%;padding-right:4.7142857143%;font-size:var(--mat-datepicker-calendar-body-label-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-body-label-text-weight, var(--mat-sys-title-small-weight));color:var(--mat-datepicker-calendar-body-label-text-color, var(--mat-sys-on-surface))}.mat-calendar-body-hidden-label{display:none}.mat-calendar-body-cell-container{position:relative;height:0;line-height:0}.mat-calendar-body-cell{position:absolute;top:0;left:0;width:100%;height:100%;background:none;text-align:center;outline:none;margin:0;font-family:var(--mat-datepicker-calendar-text-font, var(--mat-sys-body-medium-font));font-size:var(--mat-datepicker-calendar-text-size, var(--mat-sys-body-medium-size));-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-calendar-body-cell::-moz-focus-inner{border:0}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;display:block;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-start::after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,.mat-calendar-body-comparison-start::after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,[dir=rtl] .mat-calendar-body-comparison-start::after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,.mat-calendar-body-comparison-end::after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,[dir=rtl] .mat-calendar-body-comparison-end::after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:0;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start::after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start::after{width:90%}.mat-calendar-body-in-preview{color:var(--mat-datepicker-calendar-date-preview-state-outline-color, var(--mat-sys-primary))}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-disabled>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){color:var(--mat-datepicker-calendar-date-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-calendar-body-disabled>.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:var(--mat-datepicker-calendar-date-today-disabled-state-outline-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}@media(forced-colors: active){.mat-calendar-body-disabled{opacity:.5}}.mat-calendar-body-cell-content{top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px;color:var(--mat-datepicker-calendar-date-text-color, var(--mat-sys-on-surface));border-color:var(--mat-datepicker-calendar-date-outline-color, transparent)}.mat-calendar-body-cell-content.mat-focus-indicator{position:absolute}@media(forced-colors: active){.mat-calendar-body-cell-content{border:none}}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:var(--mat-datepicker-calendar-date-focus-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(hover: hover){.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:var(--mat-datepicker-calendar-date-hover-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}}.mat-calendar-body-selected{background-color:var(--mat-datepicker-calendar-date-selected-state-background-color, var(--mat-sys-primary));color:var(--mat-datepicker-calendar-date-selected-state-text-color, var(--mat-sys-on-primary))}.mat-calendar-body-disabled>.mat-calendar-body-selected{background-color:var(--mat-datepicker-calendar-date-selected-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-calendar-body-selected.mat-calendar-body-today{box-shadow:inset 0 0 0 1px var(--mat-datepicker-calendar-date-today-selected-state-outline-color, var(--mat-sys-primary))}.mat-calendar-body-in-range::before{background:var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container))}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range::before{background:var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container))}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range::before{background:var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container))}.mat-calendar-body-comparison-bridge-start::before,[dir=rtl] .mat-calendar-body-comparison-bridge-end::before{background:linear-gradient(to right, var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container)) 50%, var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container)) 50%)}.mat-calendar-body-comparison-bridge-end::before,[dir=rtl] .mat-calendar-body-comparison-bridge-start::before{background:linear-gradient(to left, var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container)) 50%, var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container)) 50%)}.mat-calendar-body-in-range>.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after{background:var(--mat-datepicker-calendar-date-in-overlap-range-state-background-color, var(--mat-sys-secondary-container))}.mat-calendar-body-comparison-identical.mat-calendar-body-selected,.mat-calendar-body-in-comparison-range>.mat-calendar-body-selected{background:var(--mat-datepicker-calendar-date-in-overlap-range-selected-state-background-color, var(--mat-sys-secondary))}@media(forced-colors: active){.mat-datepicker-popup:not(:empty),.mat-calendar-body-cell:not(.mat-calendar-body-in-range) .mat-calendar-body-selected{outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-selected{background:none}.mat-calendar-body-in-range::before,.mat-calendar-body-comparison-bridge-start::before,.mat-calendar-body-comparison-bridge-end::before{border-top:solid 1px;border-bottom:solid 1px}.mat-calendar-body-range-start::before{border-left:solid 1px}[dir=rtl] .mat-calendar-body-range-start::before{border-left:0;border-right:solid 1px}.mat-calendar-body-range-end::before{border-right:solid 1px}[dir=rtl] .mat-calendar-body-range-end::before{border-right:0;border-left:solid 1px}.mat-calendar-body-in-comparison-range::before{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-comparison-start::before{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-comparison-start::before{border-left:0;border-right:dashed 1px}.mat-calendar-body-comparison-end::before{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-comparison-end::before{border-right:0;border-left:dashed 1px}}\\n\"], dependencies: [{ kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatCalendarBody, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-calendar-body]', host: {\n                        'class': 'mat-calendar-body',\n                    }, exportAs: 'matCalendarBody', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [NgClass], template: \"<!--\\n  If there's not enough space in the first row, create a separate label row. We mark this row as\\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\\n-->\\n@if (_firstRowOffset < labelMinRequiredCells) {\\n  <tr aria-hidden=\\\"true\\\">\\n    <td class=\\\"mat-calendar-body-label\\\"\\n        [attr.colspan]=\\\"numCols\\\"\\n        [style.paddingTop]=\\\"_cellPadding\\\"\\n        [style.paddingBottom]=\\\"_cellPadding\\\">\\n      {{label}}\\n    </td>\\n  </tr>\\n}\\n\\n<!-- Create the first row separately so we can include a special spacer cell. -->\\n@for (row of rows; track _trackRow(row); let rowIndex = $index) {\\n  <tr role=\\\"row\\\">\\n    <!--\\n      This cell is purely decorative, but we can't put `aria-hidden` or `role=\\\"presentation\\\"` on it,\\n      because it throws off the week days for the rest of the row on NVDA. The aspect ratio of the\\n      table cells is maintained by setting the top and bottom padding as a percentage of the width\\n      (a variant of the trick described here: https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\\n    -->\\n    @if (rowIndex === 0 && _firstRowOffset) {\\n      <td\\n        class=\\\"mat-calendar-body-label\\\"\\n        [attr.colspan]=\\\"_firstRowOffset\\\"\\n        [style.paddingTop]=\\\"_cellPadding\\\"\\n        [style.paddingBottom]=\\\"_cellPadding\\\">\\n        {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\\n      </td>\\n    }\\n    <!--\\n      Each gridcell in the calendar contains a button, which signals to assistive technology that the\\n      cell is interactable, as well as the selection state via `aria-pressed`. See #23476 for\\n      background.\\n    -->\\n    @for (item of row; track item.id; let colIndex = $index) {\\n      <td\\n        role=\\\"gridcell\\\"\\n        class=\\\"mat-calendar-body-cell-container\\\"\\n        [style.width]=\\\"_cellWidth\\\"\\n        [style.paddingTop]=\\\"_cellPadding\\\"\\n        [style.paddingBottom]=\\\"_cellPadding\\\"\\n        [attr.data-mat-row]=\\\"rowIndex\\\"\\n        [attr.data-mat-col]=\\\"colIndex\\\"\\n      >\\n        <button\\n            type=\\\"button\\\"\\n            class=\\\"mat-calendar-body-cell\\\"\\n            [ngClass]=\\\"item.cssClasses\\\"\\n            [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\"\\n            [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\"\\n            [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\"\\n            [class.mat-calendar-body-range-start]=\\\"_isRangeStart(item.compareValue)\\\"\\n            [class.mat-calendar-body-range-end]=\\\"_isRangeEnd(item.compareValue)\\\"\\n            [class.mat-calendar-body-in-range]=\\\"_isInRange(item.compareValue)\\\"\\n            [class.mat-calendar-body-comparison-bridge-start]=\\\"_isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\\\"\\n            [class.mat-calendar-body-comparison-bridge-end]=\\\"_isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\\\"\\n            [class.mat-calendar-body-comparison-start]=\\\"_isComparisonStart(item.compareValue)\\\"\\n            [class.mat-calendar-body-comparison-end]=\\\"_isComparisonEnd(item.compareValue)\\\"\\n            [class.mat-calendar-body-in-comparison-range]=\\\"_isInComparisonRange(item.compareValue)\\\"\\n            [class.mat-calendar-body-preview-start]=\\\"_isPreviewStart(item.compareValue)\\\"\\n            [class.mat-calendar-body-preview-end]=\\\"_isPreviewEnd(item.compareValue)\\\"\\n            [class.mat-calendar-body-in-preview]=\\\"_isInPreview(item.compareValue)\\\"\\n            [attr.aria-label]=\\\"item.ariaLabel\\\"\\n            [attr.aria-disabled]=\\\"!item.enabled || null\\\"\\n            [attr.aria-pressed]=\\\"_isSelected(item.compareValue)\\\"\\n            [attr.aria-current]=\\\"todayValue === item.compareValue ? 'date' : null\\\"\\n            [attr.aria-describedby]=\\\"_getDescribedby(item.compareValue)\\\"\\n            (click)=\\\"_cellClicked(item, $event)\\\"\\n            (focus)=\\\"_emitActiveDateChange(item, $event)\\\">\\n            <span class=\\\"mat-calendar-body-cell-content mat-focus-indicator\\\"\\n              [class.mat-calendar-body-selected]=\\\"_isSelected(item.compareValue)\\\"\\n              [class.mat-calendar-body-comparison-identical]=\\\"_isComparisonIdentical(item.compareValue)\\\"\\n              [class.mat-calendar-body-today]=\\\"todayValue === item.compareValue\\\">\\n              {{item.displayValue}}\\n            </span>\\n            <span class=\\\"mat-calendar-body-cell-preview\\\" aria-hidden=\\\"true\\\"></span>\\n        </button>\\n      </td>\\n    }\\n  </tr>\\n}\\n\\n<span [id]=\\\"_startDateLabelId\\\" class=\\\"mat-calendar-body-hidden-label\\\">\\n  {{startDateAccessibleName}}\\n</span>\\n<span [id]=\\\"_endDateLabelId\\\" class=\\\"mat-calendar-body-hidden-label\\\">\\n  {{endDateAccessibleName}}\\n</span>\\n<span [id]=\\\"_comparisonStartDateLabelId\\\" class=\\\"mat-calendar-body-hidden-label\\\">\\n  {{comparisonDateAccessibleName}} {{startDateAccessibleName}}\\n</span>\\n<span [id]=\\\"_comparisonEndDateLabelId\\\" class=\\\"mat-calendar-body-hidden-label\\\">\\n  {{comparisonDateAccessibleName}} {{endDateAccessibleName}}\\n</span>\\n\", styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:var(--mat-datepicker-calendar-date-today-outline-color, var(--mat-sys-primary))}.mat-calendar-body-label{height:0;line-height:0;text-align:start;padding-left:4.7142857143%;padding-right:4.7142857143%;font-size:var(--mat-datepicker-calendar-body-label-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-body-label-text-weight, var(--mat-sys-title-small-weight));color:var(--mat-datepicker-calendar-body-label-text-color, var(--mat-sys-on-surface))}.mat-calendar-body-hidden-label{display:none}.mat-calendar-body-cell-container{position:relative;height:0;line-height:0}.mat-calendar-body-cell{position:absolute;top:0;left:0;width:100%;height:100%;background:none;text-align:center;outline:none;margin:0;font-family:var(--mat-datepicker-calendar-text-font, var(--mat-sys-body-medium-font));font-size:var(--mat-datepicker-calendar-text-size, var(--mat-sys-body-medium-size));-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-calendar-body-cell::-moz-focus-inner{border:0}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;display:block;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-start::after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,.mat-calendar-body-comparison-start::after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,[dir=rtl] .mat-calendar-body-comparison-start::after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,.mat-calendar-body-comparison-end::after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,[dir=rtl] .mat-calendar-body-comparison-end::after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:0;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start::after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start::after{width:90%}.mat-calendar-body-in-preview{color:var(--mat-datepicker-calendar-date-preview-state-outline-color, var(--mat-sys-primary))}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-disabled>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){color:var(--mat-datepicker-calendar-date-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-calendar-body-disabled>.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:var(--mat-datepicker-calendar-date-today-disabled-state-outline-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}@media(forced-colors: active){.mat-calendar-body-disabled{opacity:.5}}.mat-calendar-body-cell-content{top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px;color:var(--mat-datepicker-calendar-date-text-color, var(--mat-sys-on-surface));border-color:var(--mat-datepicker-calendar-date-outline-color, transparent)}.mat-calendar-body-cell-content.mat-focus-indicator{position:absolute}@media(forced-colors: active){.mat-calendar-body-cell-content{border:none}}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:var(--mat-datepicker-calendar-date-focus-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(hover: hover){.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:var(--mat-datepicker-calendar-date-hover-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}}.mat-calendar-body-selected{background-color:var(--mat-datepicker-calendar-date-selected-state-background-color, var(--mat-sys-primary));color:var(--mat-datepicker-calendar-date-selected-state-text-color, var(--mat-sys-on-primary))}.mat-calendar-body-disabled>.mat-calendar-body-selected{background-color:var(--mat-datepicker-calendar-date-selected-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-calendar-body-selected.mat-calendar-body-today{box-shadow:inset 0 0 0 1px var(--mat-datepicker-calendar-date-today-selected-state-outline-color, var(--mat-sys-primary))}.mat-calendar-body-in-range::before{background:var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container))}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range::before{background:var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container))}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range::before{background:var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container))}.mat-calendar-body-comparison-bridge-start::before,[dir=rtl] .mat-calendar-body-comparison-bridge-end::before{background:linear-gradient(to right, var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container)) 50%, var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container)) 50%)}.mat-calendar-body-comparison-bridge-end::before,[dir=rtl] .mat-calendar-body-comparison-bridge-start::before{background:linear-gradient(to left, var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container)) 50%, var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container)) 50%)}.mat-calendar-body-in-range>.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after{background:var(--mat-datepicker-calendar-date-in-overlap-range-state-background-color, var(--mat-sys-secondary-container))}.mat-calendar-body-comparison-identical.mat-calendar-body-selected,.mat-calendar-body-in-comparison-range>.mat-calendar-body-selected{background:var(--mat-datepicker-calendar-date-in-overlap-range-selected-state-background-color, var(--mat-sys-secondary))}@media(forced-colors: active){.mat-datepicker-popup:not(:empty),.mat-calendar-body-cell:not(.mat-calendar-body-in-range) .mat-calendar-body-selected{outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-selected{background:none}.mat-calendar-body-in-range::before,.mat-calendar-body-comparison-bridge-start::before,.mat-calendar-body-comparison-bridge-end::before{border-top:solid 1px;border-bottom:solid 1px}.mat-calendar-body-range-start::before{border-left:solid 1px}[dir=rtl] .mat-calendar-body-range-start::before{border-left:0;border-right:solid 1px}.mat-calendar-body-range-end::before{border-right:solid 1px}[dir=rtl] .mat-calendar-body-range-end::before{border-right:0;border-left:solid 1px}.mat-calendar-body-in-comparison-range::before{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-comparison-start::before{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-comparison-start::before{border-left:0;border-right:dashed 1px}.mat-calendar-body-comparison-end::before{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-comparison-end::before{border-right:0;border-left:dashed 1px}}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { label: [{\n                type: Input\n            }], rows: [{\n                type: Input\n            }], todayValue: [{\n                type: Input\n            }], startValue: [{\n                type: Input\n            }], endValue: [{\n                type: Input\n            }], labelMinRequiredCells: [{\n                type: Input\n            }], numCols: [{\n                type: Input\n            }], activeCell: [{\n                type: Input\n            }], isRange: [{\n                type: Input\n            }], cellAspectRatio: [{\n                type: Input\n            }], comparisonStart: [{\n                type: Input\n            }], comparisonEnd: [{\n                type: Input\n            }], previewStart: [{\n                type: Input\n            }], previewEnd: [{\n                type: Input\n            }], startDateAccessibleName: [{\n                type: Input\n            }], endDateAccessibleName: [{\n                type: Input\n            }], selectedValueChange: [{\n                type: Output\n            }], previewChange: [{\n                type: Output\n            }], activeDateChange: [{\n                type: Output\n            }], dragStarted: [{\n                type: Output\n            }], dragEnded: [{\n                type: Output\n            }] } });\n/** Checks whether a node is a table cell element. */\nfunction isTableCell(node) {\n    return node?.nodeName === 'TD';\n}\n/**\n * Gets the date table cell element that is or contains the specified element.\n * Or returns null if element is not part of a date cell.\n */\nfunction getCellElement(element) {\n    let cell;\n    if (isTableCell(element)) {\n        cell = element;\n    }\n    else if (isTableCell(element.parentNode)) {\n        cell = element.parentNode;\n    }\n    else if (isTableCell(element.parentNode?.parentNode)) {\n        cell = element.parentNode.parentNode;\n    }\n    return cell?.getAttribute('data-mat-row') != null ? cell : null;\n}\n/** Checks whether a value is the start of a range. */\nfunction isStart(value, start, end) {\n    return end !== null && start !== end && value < end && value === start;\n}\n/** Checks whether a value is the end of a range. */\nfunction isEnd(value, start, end) {\n    return start !== null && start !== end && value >= start && value === end;\n}\n/** Checks whether a value is inside of a range. */\nfunction isInRange(value, start, end, rangeEnabled) {\n    return (rangeEnabled &&\n        start !== null &&\n        end !== null &&\n        start !== end &&\n        value >= start &&\n        value <= end);\n}\n/**\n * Extracts the element that actually corresponds to a touch event's location\n * (rather than the element that initiated the sequence of touch events).\n */\nfunction getActualTouchTarget(event) {\n    const touchLocation = event.changedTouches[0];\n    return document.elementFromPoint(touchLocation.clientX, touchLocation.clientY);\n}\n\n/** A class representing a range of dates. */\nclass DateRange {\n    start;\n    end;\n    /**\n     * Ensures that objects with a `start` and `end` property can't be assigned to a variable that\n     * expects a `DateRange`\n     */\n    // tslint:disable-next-line:no-unused-variable\n    _disableStructuralEquivalency;\n    constructor(\n    /** The start date of the range. */\n    start, \n    /** The end date of the range. */\n    end) {\n        this.start = start;\n        this.end = end;\n    }\n}\n/**\n * A selection model containing a date selection.\n * @docs-private\n */\nclass MatDateSelectionModel {\n    selection;\n    _adapter;\n    _selectionChanged = new Subject();\n    /** Emits when the selection has changed. */\n    selectionChanged = this._selectionChanged;\n    constructor(\n    /** The current selection. */\n    selection, _adapter) {\n        this.selection = selection;\n        this._adapter = _adapter;\n        this.selection = selection;\n    }\n    /**\n     * Updates the current selection in the model.\n     * @param value New selection that should be assigned.\n     * @param source Object that triggered the selection change.\n     */\n    updateSelection(value, source) {\n        const oldValue = this.selection;\n        this.selection = value;\n        this._selectionChanged.next({ selection: value, source, oldValue });\n    }\n    ngOnDestroy() {\n        this._selectionChanged.complete();\n    }\n    _isValidDateInstance(date) {\n        return this._adapter.isDateInstance(date) && this._adapter.isValid(date);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDateSelectionModel, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDateSelectionModel });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDateSelectionModel, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: undefined }, { type: DateAdapter }] });\n/**\n * A selection model that contains a single date.\n * @docs-private\n */\nclass MatSingleDateSelectionModel extends MatDateSelectionModel {\n    constructor(adapter) {\n        super(null, adapter);\n    }\n    /**\n     * Adds a date to the current selection. In the case of a single date selection, the added date\n     * simply overwrites the previous selection\n     */\n    add(date) {\n        super.updateSelection(date, this);\n    }\n    /** Checks whether the current selection is valid. */\n    isValid() {\n        return this.selection != null && this._isValidDateInstance(this.selection);\n    }\n    /**\n     * Checks whether the current selection is complete. In the case of a single date selection, this\n     * is true if the current selection is not null.\n     */\n    isComplete() {\n        return this.selection != null;\n    }\n    /** Clones the selection model. */\n    clone() {\n        const clone = new MatSingleDateSelectionModel(this._adapter);\n        clone.updateSelection(this.selection, this);\n        return clone;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSingleDateSelectionModel, deps: [{ token: DateAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSingleDateSelectionModel });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSingleDateSelectionModel, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: DateAdapter }] });\n/**\n * A selection model that contains a date range.\n * @docs-private\n */\nclass MatRangeDateSelectionModel extends MatDateSelectionModel {\n    constructor(adapter) {\n        super(new DateRange(null, null), adapter);\n    }\n    /**\n     * Adds a date to the current selection. In the case of a date range selection, the added date\n     * fills in the next `null` value in the range. If both the start and the end already have a date,\n     * the selection is reset so that the given date is the new `start` and the `end` is null.\n     */\n    add(date) {\n        let { start, end } = this.selection;\n        if (start == null) {\n            start = date;\n        }\n        else if (end == null) {\n            end = date;\n        }\n        else {\n            start = date;\n            end = null;\n        }\n        super.updateSelection(new DateRange(start, end), this);\n    }\n    /** Checks whether the current selection is valid. */\n    isValid() {\n        const { start, end } = this.selection;\n        // Empty ranges are valid.\n        if (start == null && end == null) {\n            return true;\n        }\n        // Complete ranges are only valid if both dates are valid and the start is before the end.\n        if (start != null && end != null) {\n            return (this._isValidDateInstance(start) &&\n                this._isValidDateInstance(end) &&\n                this._adapter.compareDate(start, end) <= 0);\n        }\n        // Partial ranges are valid if the start/end is valid.\n        return ((start == null || this._isValidDateInstance(start)) &&\n            (end == null || this._isValidDateInstance(end)));\n    }\n    /**\n     * Checks whether the current selection is complete. In the case of a date range selection, this\n     * is true if the current selection has a non-null `start` and `end`.\n     */\n    isComplete() {\n        return this.selection.start != null && this.selection.end != null;\n    }\n    /** Clones the selection model. */\n    clone() {\n        const clone = new MatRangeDateSelectionModel(this._adapter);\n        clone.updateSelection(this.selection, this);\n        return clone;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatRangeDateSelectionModel, deps: [{ token: DateAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatRangeDateSelectionModel });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatRangeDateSelectionModel, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: DateAdapter }] });\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n    return parent || new MatSingleDateSelectionModel(adapter);\n}\n/**\n * Used to provide a single selection model to a component.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER = {\n    provide: MatDateSelectionModel,\n    deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n    useFactory: MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY,\n};\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n    return parent || new MatRangeDateSelectionModel(adapter);\n}\n/**\n * Used to provide a range selection model to a component.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER = {\n    provide: MatDateSelectionModel,\n    deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n    useFactory: MAT_RANGE_DATE_SELECTION_MODEL_FACTORY,\n};\n\n/** Injection token used to customize the date range selection behavior. */\nconst MAT_DATE_RANGE_SELECTION_STRATEGY = new InjectionToken('MAT_DATE_RANGE_SELECTION_STRATEGY');\n/** Provides the default date range selection behavior. */\nclass DefaultMatCalendarRangeStrategy {\n    _dateAdapter;\n    constructor(_dateAdapter) {\n        this._dateAdapter = _dateAdapter;\n    }\n    selectionFinished(date, currentRange) {\n        let { start, end } = currentRange;\n        if (start == null) {\n            start = date;\n        }\n        else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\n            end = date;\n        }\n        else {\n            start = date;\n            end = null;\n        }\n        return new DateRange(start, end);\n    }\n    createPreview(activeDate, currentRange) {\n        let start = null;\n        let end = null;\n        if (currentRange.start && !currentRange.end && activeDate) {\n            start = currentRange.start;\n            end = activeDate;\n        }\n        return new DateRange(start, end);\n    }\n    createDrag(dragOrigin, originalRange, newDate) {\n        let start = originalRange.start;\n        let end = originalRange.end;\n        if (!start || !end) {\n            // Can't drag from an incomplete range.\n            return null;\n        }\n        const adapter = this._dateAdapter;\n        const isRange = adapter.compareDate(start, end) !== 0;\n        const diffYears = adapter.getYear(newDate) - adapter.getYear(dragOrigin);\n        const diffMonths = adapter.getMonth(newDate) - adapter.getMonth(dragOrigin);\n        const diffDays = adapter.getDate(newDate) - adapter.getDate(dragOrigin);\n        if (isRange && adapter.sameDate(dragOrigin, originalRange.start)) {\n            start = newDate;\n            if (adapter.compareDate(newDate, end) > 0) {\n                end = adapter.addCalendarYears(end, diffYears);\n                end = adapter.addCalendarMonths(end, diffMonths);\n                end = adapter.addCalendarDays(end, diffDays);\n            }\n        }\n        else if (isRange && adapter.sameDate(dragOrigin, originalRange.end)) {\n            end = newDate;\n            if (adapter.compareDate(newDate, start) < 0) {\n                start = adapter.addCalendarYears(start, diffYears);\n                start = adapter.addCalendarMonths(start, diffMonths);\n                start = adapter.addCalendarDays(start, diffDays);\n            }\n        }\n        else {\n            start = adapter.addCalendarYears(start, diffYears);\n            start = adapter.addCalendarMonths(start, diffMonths);\n            start = adapter.addCalendarDays(start, diffDays);\n            end = adapter.addCalendarYears(end, diffYears);\n            end = adapter.addCalendarMonths(end, diffMonths);\n            end = adapter.addCalendarDays(end, diffDays);\n        }\n        return new DateRange(start, end);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: DefaultMatCalendarRangeStrategy, deps: [{ token: DateAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: DefaultMatCalendarRangeStrategy });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: DefaultMatCalendarRangeStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: DateAdapter }] });\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY(parent, adapter) {\n    return parent || new DefaultMatCalendarRangeStrategy(adapter);\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_CALENDAR_RANGE_STRATEGY_PROVIDER = {\n    provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n    deps: [[new Optional(), new SkipSelf(), MAT_DATE_RANGE_SELECTION_STRATEGY], DateAdapter],\n    useFactory: MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY,\n};\n\nconst DAYS_PER_WEEK = 7;\nlet uniqueIdCounter = 0;\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\nclass MatMonthView {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dateFormats = inject(MAT_DATE_FORMATS, { optional: true });\n    _dateAdapter = inject(DateAdapter, { optional: true });\n    _dir = inject(Directionality, { optional: true });\n    _rangeStrategy = inject(MAT_DATE_RANGE_SELECTION_STRATEGY, { optional: true });\n    _rerenderSubscription = Subscription.EMPTY;\n    /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n    _selectionKeyPressed;\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    get activeDate() {\n        return this._activeDate;\n    }\n    set activeDate(value) {\n        const oldActiveDate = this._activeDate;\n        const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) ||\n            this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this._init();\n        }\n    }\n    _activeDate;\n    /** The currently selected date. */\n    get selected() {\n        return this._selected;\n    }\n    set selected(value) {\n        if (value instanceof DateRange) {\n            this._selected = value;\n        }\n        else {\n            this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        this._setRanges(this._selected);\n    }\n    _selected;\n    /** The minimum selectable date. */\n    get minDate() {\n        return this._minDate;\n    }\n    set minDate(value) {\n        this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _minDate;\n    /** The maximum selectable date. */\n    get maxDate() {\n        return this._maxDate;\n    }\n    set maxDate(value) {\n        this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass;\n    /** Start of the comparison range. */\n    comparisonStart;\n    /** End of the comparison range. */\n    comparisonEnd;\n    /** ARIA Accessible name of the `<input matStartDate/>` */\n    startDateAccessibleName;\n    /** ARIA Accessible name of the `<input matEndDate/>` */\n    endDateAccessibleName;\n    /** Origin of active drag, or null when dragging is not active. */\n    activeDrag = null;\n    /** Emits when a new date is selected. */\n    selectedChange = new EventEmitter();\n    /** Emits when any date is selected. */\n    _userSelection = new EventEmitter();\n    /** Emits when the user initiates a date range drag via mouse or touch. */\n    dragStarted = new EventEmitter();\n    /**\n     * Emits when the user completes or cancels a date range drag.\n     * Emits null when the drag was canceled or the newly selected date range if completed.\n     */\n    dragEnded = new EventEmitter();\n    /** Emits when any date is activated. */\n    activeDateChange = new EventEmitter();\n    /** The body of calendar table */\n    _matCalendarBody;\n    /** The label for this month (e.g. \"January 2017\"). */\n    _monthLabel;\n    /** Grid of calendar cells representing the dates of the month. */\n    _weeks;\n    /** The number of blank cells in the first row before the 1st of the month. */\n    _firstWeekOffset;\n    /** Start value of the currently-shown date range. */\n    _rangeStart;\n    /** End value of the currently-shown date range. */\n    _rangeEnd;\n    /** Start value of the currently-shown comparison date range. */\n    _comparisonRangeStart;\n    /** End value of the currently-shown comparison date range. */\n    _comparisonRangeEnd;\n    /** Start of the preview range. */\n    _previewStart;\n    /** End of the preview range. */\n    _previewEnd;\n    /** Whether the user is currently selecting a range of dates. */\n    _isRange;\n    /** The date of the month that today falls on. Null if today is in another month. */\n    _todayDate;\n    /** The names of the weekdays. */\n    _weekdays;\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            if (!this._dateFormats) {\n                throw createMissingDateImplError('MAT_DATE_FORMATS');\n            }\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    ngAfterContentInit() {\n        this._rerenderSubscription = this._dateAdapter.localeChanges\n            .pipe(startWith(null))\n            .subscribe(() => this._init());\n    }\n    ngOnChanges(changes) {\n        const comparisonChange = changes['comparisonStart'] || changes['comparisonEnd'];\n        if (comparisonChange && !comparisonChange.firstChange) {\n            this._setRanges(this.selected);\n        }\n        if (changes['activeDrag'] && !this.activeDrag) {\n            this._clearPreview();\n        }\n    }\n    ngOnDestroy() {\n        this._rerenderSubscription.unsubscribe();\n    }\n    /** Handles when a new date is selected. */\n    _dateSelected(event) {\n        const date = event.value;\n        const selectedDate = this._getDateFromDayOfMonth(date);\n        let rangeStartDate;\n        let rangeEndDate;\n        if (this._selected instanceof DateRange) {\n            rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\n            rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\n        }\n        else {\n            rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\n        }\n        if (rangeStartDate !== date || rangeEndDate !== date) {\n            this.selectedChange.emit(selectedDate);\n        }\n        this._userSelection.emit({ value: selectedDate, event: event.event });\n        this._clearPreview();\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Takes the index of a calendar body cell wrapped in an event as argument. For the date that\n     * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n     * that date.\n     *\n     * This function is used to match each component's model of the active date with the calendar\n     * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n     * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n     * updated value asynchronously via the `activeCell` Input.\n     */\n    _updateActiveDate(event) {\n        const month = event.value;\n        const oldActiveDate = this._activeDate;\n        this.activeDate = this._getDateFromDayOfMonth(month);\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this._activeDate);\n        }\n    }\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeydown(event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        const oldActiveDate = this._activeDate;\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n                    this._dateAdapter.getDate(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey\n                    ? this._dateAdapter.addCalendarYears(this._activeDate, -1)\n                    : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey\n                    ? this._dateAdapter.addCalendarYears(this._activeDate, 1)\n                    : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this._selectionKeyPressed = true;\n                if (this._canSelect(this._activeDate)) {\n                    // Prevent unexpected default actions such as form submission.\n                    // Note that we only prevent the default action here while the selection happens in\n                    // `keyup` below. We can't do the selection here, because it can cause the calendar to\n                    // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n                    // because it's too late (see #23305).\n                    event.preventDefault();\n                }\n                return;\n            case ESCAPE:\n                // Abort the current range selection if the user presses escape mid-selection.\n                if (this._previewEnd != null && !hasModifierKey(event)) {\n                    this._clearPreview();\n                    // If a drag is in progress, cancel the drag without changing the\n                    // current selection.\n                    if (this.activeDrag) {\n                        this.dragEnded.emit({ value: null, event });\n                    }\n                    else {\n                        this.selectedChange.emit(null);\n                        this._userSelection.emit({ value: null, event });\n                    }\n                    event.preventDefault();\n                    event.stopPropagation(); // Prevents the overlay from closing.\n                }\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n            this._focusActiveCellAfterViewChecked();\n        }\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /** Handles keyup events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeyup(event) {\n        if (event.keyCode === SPACE || event.keyCode === ENTER) {\n            if (this._selectionKeyPressed && this._canSelect(this._activeDate)) {\n                this._dateSelected({ value: this._dateAdapter.getDate(this._activeDate), event });\n            }\n            this._selectionKeyPressed = false;\n        }\n    }\n    /** Initializes this month view. */\n    _init() {\n        this._setRanges(this.selected);\n        this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\n        this._monthLabel = this._dateFormats.display.monthLabel\n            ? this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthLabel)\n            : this._dateAdapter\n                .getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\n        let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n        this._firstWeekOffset =\n            (DAYS_PER_WEEK +\n                this._dateAdapter.getDayOfWeek(firstOfMonth) -\n                this._dateAdapter.getFirstDayOfWeek()) %\n                DAYS_PER_WEEK;\n        this._initWeekdays();\n        this._createWeekCells();\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(movePreview) {\n        this._matCalendarBody._focusActiveCell(movePreview);\n    }\n    /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n    _focusActiveCellAfterViewChecked() {\n        this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n    }\n    /** Called when the user has activated a new cell and the preview needs to be updated. */\n    _previewChanged({ event, value: cell }) {\n        if (this._rangeStrategy) {\n            // We can assume that this will be a range, because preview\n            // events aren't fired for single date selections.\n            const value = cell ? cell.rawValue : null;\n            const previewRange = this._rangeStrategy.createPreview(value, this.selected, event);\n            this._previewStart = this._getCellCompareValue(previewRange.start);\n            this._previewEnd = this._getCellCompareValue(previewRange.end);\n            if (this.activeDrag && value) {\n                const dragRange = this._rangeStrategy.createDrag?.(this.activeDrag.value, this.selected, value, event);\n                if (dragRange) {\n                    this._previewStart = this._getCellCompareValue(dragRange.start);\n                    this._previewEnd = this._getCellCompareValue(dragRange.end);\n                }\n            }\n            // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\n            // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\n            // when navigating one month back using the keyboard which will cause this handler\n            // to throw a \"changed after checked\" error when updating the preview state.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Called when the user has ended a drag. If the drag/drop was successful,\n     * computes and emits the new range selection.\n     */\n    _dragEnded(event) {\n        if (!this.activeDrag)\n            return;\n        if (event.value) {\n            // Propagate drag effect\n            const dragDropResult = this._rangeStrategy?.createDrag?.(this.activeDrag.value, this.selected, event.value, event.event);\n            this.dragEnded.emit({ value: dragDropResult ?? null, event: event.event });\n        }\n        else {\n            this.dragEnded.emit({ value: null, event: event.event });\n        }\n    }\n    /**\n     * Takes a day of the month and returns a new date in the same month and year as the currently\n     *  active date. The returned date will have the same day of the month as the argument date.\n     */\n    _getDateFromDayOfMonth(dayOfMonth) {\n        return this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), dayOfMonth);\n    }\n    /** Initializes the weekdays. */\n    _initWeekdays() {\n        const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        let weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i], id: uniqueIdCounter++ };\n        });\n        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n    }\n    /** Creates MatCalendarCells for the dates in this month. */\n    _createWeekCells() {\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this._dateAdapter.getDateNames();\n        this._weeks = [[]];\n        for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell == DAYS_PER_WEEK) {\n                this._weeks.push([]);\n                cell = 0;\n            }\n            const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this._shouldEnableDate(date);\n            const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date, 'month') : undefined;\n            this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses, this._getCellCompareValue(date), date));\n        }\n    }\n    /** Date filter for the month */\n    _shouldEnableDate(date) {\n        return (!!date &&\n            (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) &&\n            (!this.dateFilter || this.dateFilter(date)));\n    }\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    _getDateInCurrentMonth(date) {\n        return date && this._hasSameMonthAndYear(date, this.activeDate)\n            ? this._dateAdapter.getDate(date)\n            : null;\n    }\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    _hasSameMonthAndYear(d1, d2) {\n        return !!(d1 &&\n            d2 &&\n            this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n            this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    }\n    /** Gets the value that will be used to one cell to another. */\n    _getCellCompareValue(date) {\n        if (date) {\n            // We use the time since the Unix epoch to compare dates in this view, rather than the\n            // cell values, because we need to support ranges that span across multiple months/years.\n            const year = this._dateAdapter.getYear(date);\n            const month = this._dateAdapter.getMonth(date);\n            const day = this._dateAdapter.getDate(date);\n            return new Date(year, month, day).getTime();\n        }\n        return null;\n    }\n    /** Determines whether the user has the RTL layout direction. */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n    /** Sets the current range based on a model value. */\n    _setRanges(selectedValue) {\n        if (selectedValue instanceof DateRange) {\n            this._rangeStart = this._getCellCompareValue(selectedValue.start);\n            this._rangeEnd = this._getCellCompareValue(selectedValue.end);\n            this._isRange = true;\n        }\n        else {\n            this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\n            this._isRange = false;\n        }\n        this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\n        this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\n    }\n    /** Gets whether a date can be selected in the month view. */\n    _canSelect(date) {\n        return !this.dateFilter || this.dateFilter(date);\n    }\n    /** Clears out preview state. */\n    _clearPreview() {\n        this._previewStart = this._previewEnd = null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatMonthView, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.2.0-rc.1\", type: MatMonthView, isStandalone: true, selector: \"mat-month-view\", inputs: { activeDate: \"activeDate\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\", dateClass: \"dateClass\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\", startDateAccessibleName: \"startDateAccessibleName\", endDateAccessibleName: \"endDateAccessibleName\", activeDrag: \"activeDrag\" }, outputs: { selectedChange: \"selectedChange\", _userSelection: \"_userSelection\", dragStarted: \"dragStarted\", dragEnded: \"dragEnded\", activeDateChange: \"activeDateChange\" }, viewQueries: [{ propertyName: \"_matCalendarBody\", first: true, predicate: MatCalendarBody, descendants: true }], exportAs: [\"matMonthView\"], usesOnChanges: true, ngImport: i0, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead class=\\\"mat-calendar-table-header\\\">\\n    <tr>\\n      @for (day of _weekdays; track day.id) {\\n        <th scope=\\\"col\\\">\\n          <span class=\\\"cdk-visually-hidden\\\">{{day.long}}</span>\\n          <span aria-hidden=\\\"true\\\">{{day.narrow}}</span>\\n        </th>\\n      }\\n    </tr>\\n    <tr aria-hidden=\\\"true\\\"><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_monthLabel\\\"\\n         [rows]=\\\"_weeks\\\"\\n         [todayValue]=\\\"_todayDate!\\\"\\n         [startValue]=\\\"_rangeStart!\\\"\\n         [endValue]=\\\"_rangeEnd!\\\"\\n         [comparisonStart]=\\\"_comparisonRangeStart\\\"\\n         [comparisonEnd]=\\\"_comparisonRangeEnd\\\"\\n         [previewStart]=\\\"_previewStart\\\"\\n         [previewEnd]=\\\"_previewEnd\\\"\\n         [isRange]=\\\"_isRange\\\"\\n         [labelMinRequiredCells]=\\\"3\\\"\\n         [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\"\\n         [startDateAccessibleName]=\\\"startDateAccessibleName\\\"\\n         [endDateAccessibleName]=\\\"endDateAccessibleName\\\"\\n         (selectedValueChange)=\\\"_dateSelected($event)\\\"\\n         (activeDateChange)=\\\"_updateActiveDate($event)\\\"\\n         (previewChange)=\\\"_previewChanged($event)\\\"\\n         (dragStarted)=\\\"dragStarted.emit($event)\\\"\\n         (dragEnded)=\\\"_dragEnded($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\", dependencies: [{ kind: \"component\", type: MatCalendarBody, selector: \"[mat-calendar-body]\", inputs: [\"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"activeCell\", \"isRange\", \"cellAspectRatio\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\"], outputs: [\"selectedValueChange\", \"previewChange\", \"activeDateChange\", \"dragStarted\", \"dragEnded\"], exportAs: [\"matCalendarBody\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatMonthView, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-month-view', exportAs: 'matMonthView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [MatCalendarBody], template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead class=\\\"mat-calendar-table-header\\\">\\n    <tr>\\n      @for (day of _weekdays; track day.id) {\\n        <th scope=\\\"col\\\">\\n          <span class=\\\"cdk-visually-hidden\\\">{{day.long}}</span>\\n          <span aria-hidden=\\\"true\\\">{{day.narrow}}</span>\\n        </th>\\n      }\\n    </tr>\\n    <tr aria-hidden=\\\"true\\\"><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_monthLabel\\\"\\n         [rows]=\\\"_weeks\\\"\\n         [todayValue]=\\\"_todayDate!\\\"\\n         [startValue]=\\\"_rangeStart!\\\"\\n         [endValue]=\\\"_rangeEnd!\\\"\\n         [comparisonStart]=\\\"_comparisonRangeStart\\\"\\n         [comparisonEnd]=\\\"_comparisonRangeEnd\\\"\\n         [previewStart]=\\\"_previewStart\\\"\\n         [previewEnd]=\\\"_previewEnd\\\"\\n         [isRange]=\\\"_isRange\\\"\\n         [labelMinRequiredCells]=\\\"3\\\"\\n         [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\"\\n         [startDateAccessibleName]=\\\"startDateAccessibleName\\\"\\n         [endDateAccessibleName]=\\\"endDateAccessibleName\\\"\\n         (selectedValueChange)=\\\"_dateSelected($event)\\\"\\n         (activeDateChange)=\\\"_updateActiveDate($event)\\\"\\n         (previewChange)=\\\"_previewChanged($event)\\\"\\n         (dragStarted)=\\\"dragStarted.emit($event)\\\"\\n         (dragEnded)=\\\"_dragEnded($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { activeDate: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], minDate: [{\n                type: Input\n            }], maxDate: [{\n                type: Input\n            }], dateFilter: [{\n                type: Input\n            }], dateClass: [{\n                type: Input\n            }], comparisonStart: [{\n                type: Input\n            }], comparisonEnd: [{\n                type: Input\n            }], startDateAccessibleName: [{\n                type: Input\n            }], endDateAccessibleName: [{\n                type: Input\n            }], activeDrag: [{\n                type: Input\n            }], selectedChange: [{\n                type: Output\n            }], _userSelection: [{\n                type: Output\n            }], dragStarted: [{\n                type: Output\n            }], dragEnded: [{\n                type: Output\n            }], activeDateChange: [{\n                type: Output\n            }], _matCalendarBody: [{\n                type: ViewChild,\n                args: [MatCalendarBody]\n            }] } });\n\nconst yearsPerPage = 24;\nconst yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\nclass MatMultiYearView {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dateAdapter = inject(DateAdapter, { optional: true });\n    _dir = inject(Directionality, { optional: true });\n    _rerenderSubscription = Subscription.EMPTY;\n    /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n    _selectionKeyPressed;\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    get activeDate() {\n        return this._activeDate;\n    }\n    set activeDate(value) {\n        let oldActiveDate = this._activeDate;\n        const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) ||\n            this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (!isSameMultiYearView(this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n            this._init();\n        }\n    }\n    _activeDate;\n    /** The currently selected date. */\n    get selected() {\n        return this._selected;\n    }\n    set selected(value) {\n        if (value instanceof DateRange) {\n            this._selected = value;\n        }\n        else {\n            this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        this._setSelectedYear(value);\n    }\n    _selected;\n    /** The minimum selectable date. */\n    get minDate() {\n        return this._minDate;\n    }\n    set minDate(value) {\n        this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _minDate;\n    /** The maximum selectable date. */\n    get maxDate() {\n        return this._maxDate;\n    }\n    set maxDate(value) {\n        this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter;\n    /** Function that can be used to add custom CSS classes to date cells. */\n    dateClass;\n    /** Emits when a new year is selected. */\n    selectedChange = new EventEmitter();\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    yearSelected = new EventEmitter();\n    /** Emits when any date is activated. */\n    activeDateChange = new EventEmitter();\n    /** The body of calendar table */\n    _matCalendarBody;\n    /** Grid of calendar cells representing the currently displayed years. */\n    _years;\n    /** The year that today falls on. */\n    _todayYear;\n    /** The year of the selected date. Null if the selected date is null. */\n    _selectedYear;\n    constructor() {\n        if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    ngAfterContentInit() {\n        this._rerenderSubscription = this._dateAdapter.localeChanges\n            .pipe(startWith(null))\n            .subscribe(() => this._init());\n    }\n    ngOnDestroy() {\n        this._rerenderSubscription.unsubscribe();\n    }\n    /** Initializes this multi-year view. */\n    _init() {\n        this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n        // We want a range years such that we maximize the number of\n        // enabled dates visible at once. This prevents issues where the minimum year\n        // is the last item of a page OR the maximum year is the first item of a page.\n        // The offset from the active year to the \"slot\" for the starting year is the\n        // *actual* first rendered year in the multi-year view.\n        const activeYear = this._dateAdapter.getYear(this._activeDate);\n        const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n        this._years = [];\n        for (let i = 0, row = []; i < yearsPerPage; i++) {\n            row.push(minYearOfPage + i);\n            if (row.length == yearsPerRow) {\n                this._years.push(row.map(year => this._createCellForYear(year)));\n                row = [];\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Handles when a new year is selected. */\n    _yearSelected(event) {\n        const year = event.value;\n        const selectedYear = this._dateAdapter.createDate(year, 0, 1);\n        const selectedDate = this._getDateFromYear(year);\n        this.yearSelected.emit(selectedYear);\n        this.selectedChange.emit(selectedDate);\n    }\n    /**\n     * Takes the index of a calendar body cell wrapped in an event as argument. For the date that\n     * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n     * that date.\n     *\n     * This function is used to match each component's model of the active date with the calendar\n     * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n     * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n     * updated value asynchronously via the `activeCell` Input.\n     */\n    _updateActiveDate(event) {\n        const year = event.value;\n        const oldActiveDate = this._activeDate;\n        this.activeDate = this._getDateFromYear(year);\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n    }\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    _handleCalendarBodyKeydown(event) {\n        const oldActiveDate = this._activeDate;\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage -\n                    getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) -\n                    1);\n                break;\n            case PAGE_UP:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                // Note that we only prevent the default action here while the selection happens in\n                // `keyup` below. We can't do the selection here, because it can cause the calendar to\n                // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n                // because it's too late (see #23305).\n                this._selectionKeyPressed = true;\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCellAfterViewChecked();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /** Handles keyup events on the calendar body when calendar is in multi-year view. */\n    _handleCalendarBodyKeyup(event) {\n        if (event.keyCode === SPACE || event.keyCode === ENTER) {\n            if (this._selectionKeyPressed) {\n                this._yearSelected({ value: this._dateAdapter.getYear(this._activeDate), event });\n            }\n            this._selectionKeyPressed = false;\n        }\n    }\n    _getActiveCell() {\n        return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n    }\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n    _focusActiveCellAfterViewChecked() {\n        this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n    }\n    /**\n     * Takes a year and returns a new date on the same day and month as the currently active date\n     *  The returned date will have the same year as the argument date.\n     */\n    _getDateFromYear(year) {\n        const activeMonth = this._dateAdapter.getMonth(this.activeDate);\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, activeMonth, 1));\n        const normalizedDate = this._dateAdapter.createDate(year, activeMonth, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth));\n        return normalizedDate;\n    }\n    /** Creates an MatCalendarCell for the given year. */\n    _createCellForYear(year) {\n        const date = this._dateAdapter.createDate(year, 0, 1);\n        const yearName = this._dateAdapter.getYearName(date);\n        const cellClasses = this.dateClass ? this.dateClass(date, 'multi-year') : undefined;\n        return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year), cellClasses);\n    }\n    /** Whether the given year is enabled. */\n    _shouldEnableYear(year) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined ||\n            year === null ||\n            (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n        const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /** Determines whether the user has the RTL layout direction. */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n    /** Sets the currently-highlighted year based on a model value. */\n    _setSelectedYear(value) {\n        this._selectedYear = null;\n        if (value instanceof DateRange) {\n            const displayValue = value.start || value.end;\n            if (displayValue) {\n                this._selectedYear = this._dateAdapter.getYear(displayValue);\n            }\n        }\n        else if (value) {\n            this._selectedYear = this._dateAdapter.getYear(value);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatMultiYearView, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatMultiYearView, isStandalone: true, selector: \"mat-multi-year-view\", inputs: { activeDate: \"activeDate\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\", dateClass: \"dateClass\" }, outputs: { selectedChange: \"selectedChange\", yearSelected: \"yearSelected\", activeDateChange: \"activeDateChange\" }, viewQueries: [{ propertyName: \"_matCalendarBody\", first: true, predicate: MatCalendarBody, descendants: true }], exportAs: [\"matMultiYearView\"], ngImport: i0, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead aria-hidden=\\\"true\\\" class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [rows]=\\\"_years\\\"\\n         [todayValue]=\\\"_todayYear\\\"\\n         [startValue]=\\\"_selectedYear!\\\"\\n         [endValue]=\\\"_selectedYear!\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_getActiveCell()\\\"\\n         (selectedValueChange)=\\\"_yearSelected($event)\\\"\\n         (activeDateChange)=\\\"_updateActiveDate($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\", dependencies: [{ kind: \"component\", type: MatCalendarBody, selector: \"[mat-calendar-body]\", inputs: [\"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"activeCell\", \"isRange\", \"cellAspectRatio\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\"], outputs: [\"selectedValueChange\", \"previewChange\", \"activeDateChange\", \"dragStarted\", \"dragEnded\"], exportAs: [\"matCalendarBody\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatMultiYearView, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-multi-year-view', exportAs: 'matMultiYearView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [MatCalendarBody], template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead aria-hidden=\\\"true\\\" class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [rows]=\\\"_years\\\"\\n         [todayValue]=\\\"_todayYear\\\"\\n         [startValue]=\\\"_selectedYear!\\\"\\n         [endValue]=\\\"_selectedYear!\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_getActiveCell()\\\"\\n         (selectedValueChange)=\\\"_yearSelected($event)\\\"\\n         (activeDateChange)=\\\"_updateActiveDate($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { activeDate: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], minDate: [{\n                type: Input\n            }], maxDate: [{\n                type: Input\n            }], dateFilter: [{\n                type: Input\n            }], dateClass: [{\n                type: Input\n            }], selectedChange: [{\n                type: Output\n            }], yearSelected: [{\n                type: Output\n            }], activeDateChange: [{\n                type: Output\n            }], _matCalendarBody: [{\n                type: ViewChild,\n                args: [MatCalendarBody]\n            }] } });\nfunction isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {\n    const year1 = dateAdapter.getYear(date1);\n    const year2 = dateAdapter.getYear(date2);\n    const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n    return (Math.floor((year1 - startingYear) / yearsPerPage) ===\n        Math.floor((year2 - startingYear) / yearsPerPage));\n}\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nfunction getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {\n    const activeYear = dateAdapter.getYear(activeDate);\n    return euclideanModulo(activeYear - getStartingYear(dateAdapter, minDate, maxDate), yearsPerPage);\n}\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear(dateAdapter, minDate, maxDate) {\n    let startingYear = 0;\n    if (maxDate) {\n        const maxYear = dateAdapter.getYear(maxDate);\n        startingYear = maxYear - yearsPerPage + 1;\n    }\n    else if (minDate) {\n        startingYear = dateAdapter.getYear(minDate);\n    }\n    return startingYear;\n}\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo(a, b) {\n    return ((a % b) + b) % b;\n}\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\nclass MatYearView {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dateFormats = inject(MAT_DATE_FORMATS, { optional: true });\n    _dateAdapter = inject(DateAdapter, { optional: true });\n    _dir = inject(Directionality, { optional: true });\n    _rerenderSubscription = Subscription.EMPTY;\n    /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n    _selectionKeyPressed;\n    /** The date to display in this year view (everything other than the year is ignored). */\n    get activeDate() {\n        return this._activeDate;\n    }\n    set activeDate(value) {\n        let oldActiveDate = this._activeDate;\n        const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) ||\n            this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n            this._init();\n        }\n    }\n    _activeDate;\n    /** The currently selected date. */\n    get selected() {\n        return this._selected;\n    }\n    set selected(value) {\n        if (value instanceof DateRange) {\n            this._selected = value;\n        }\n        else {\n            this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        this._setSelectedMonth(value);\n    }\n    _selected;\n    /** The minimum selectable date. */\n    get minDate() {\n        return this._minDate;\n    }\n    set minDate(value) {\n        this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _minDate;\n    /** The maximum selectable date. */\n    get maxDate() {\n        return this._maxDate;\n    }\n    set maxDate(value) {\n        this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter;\n    /** Function that can be used to add custom CSS classes to date cells. */\n    dateClass;\n    /** Emits when a new month is selected. */\n    selectedChange = new EventEmitter();\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    monthSelected = new EventEmitter();\n    /** Emits when any date is activated. */\n    activeDateChange = new EventEmitter();\n    /** The body of calendar table */\n    _matCalendarBody;\n    /** Grid of calendar cells representing the months of the year. */\n    _months;\n    /** The label for this year (e.g. \"2017\"). */\n    _yearLabel;\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    _todayMonth;\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    _selectedMonth;\n    constructor() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            if (!this._dateFormats) {\n                throw createMissingDateImplError('MAT_DATE_FORMATS');\n            }\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    ngAfterContentInit() {\n        this._rerenderSubscription = this._dateAdapter.localeChanges\n            .pipe(startWith(null))\n            .subscribe(() => this._init());\n    }\n    ngOnDestroy() {\n        this._rerenderSubscription.unsubscribe();\n    }\n    /** Handles when a new month is selected. */\n    _monthSelected(event) {\n        const month = event.value;\n        const selectedMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n        this.monthSelected.emit(selectedMonth);\n        const selectedDate = this._getDateFromMonth(month);\n        this.selectedChange.emit(selectedDate);\n    }\n    /**\n     * Takes the index of a calendar body cell wrapped in an event as argument. For the date that\n     * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n     * that date.\n     *\n     * This function is used to match each component's model of the active date with the calendar\n     * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n     * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n     * updated value asynchronously via the `activeCell` Input.\n     */\n    _updateActiveDate(event) {\n        const month = event.value;\n        const oldActiveDate = this._activeDate;\n        this.activeDate = this._getDateFromMonth(month);\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n    }\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    _handleCalendarBodyKeydown(event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        const oldActiveDate = this._activeDate;\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                // Note that we only prevent the default action here while the selection happens in\n                // `keyup` below. We can't do the selection here, because it can cause the calendar to\n                // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n                // because it's too late (see #23305).\n                this._selectionKeyPressed = true;\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n            this._focusActiveCellAfterViewChecked();\n        }\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /** Handles keyup events on the calendar body when calendar is in year view. */\n    _handleCalendarBodyKeyup(event) {\n        if (event.keyCode === SPACE || event.keyCode === ENTER) {\n            if (this._selectionKeyPressed) {\n                this._monthSelected({ value: this._dateAdapter.getMonth(this._activeDate), event });\n            }\n            this._selectionKeyPressed = false;\n        }\n    }\n    /** Initializes this year view. */\n    _init() {\n        this._setSelectedMonth(this.selected);\n        this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n        this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n        let monthNames = this._dateAdapter.getMonthNames('short');\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        this._months = [\n            [0, 1, 2, 3],\n            [4, 5, 6, 7],\n            [8, 9, 10, 11],\n        ].map(row => row.map(month => this._createCellForMonth(month, monthNames[month])));\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /** Schedules the matCalendarBody to focus the active cell after change detection has run */\n    _focusActiveCellAfterViewChecked() {\n        this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n    }\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    _getMonthInCurrentYear(date) {\n        return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate)\n            ? this._dateAdapter.getMonth(date)\n            : null;\n    }\n    /**\n     * Takes a month and returns a new date in the same day and year as the currently active date.\n     *  The returned date will have the same month as the argument date.\n     */\n    _getDateFromMonth(month) {\n        const normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n        return this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth));\n    }\n    /** Creates an MatCalendarCell for the given month. */\n    _createCellForMonth(month, monthName) {\n        const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n        const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.monthYearA11yLabel);\n        const cellClasses = this.dateClass ? this.dateClass(date, 'year') : undefined;\n        return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month), cellClasses);\n    }\n    /** Whether the given month is enabled. */\n    _shouldEnableMonth(month) {\n        const activeYear = this._dateAdapter.getYear(this.activeDate);\n        if (month === undefined ||\n            month === null ||\n            this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n        if (!this.dateFilter) {\n            return true;\n        }\n        const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    _isYearAndMonthAfterMaxDate(year, month) {\n        if (this.maxDate) {\n            const maxYear = this._dateAdapter.getYear(this.maxDate);\n            const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n        return false;\n    }\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    _isYearAndMonthBeforeMinDate(year, month) {\n        if (this.minDate) {\n            const minYear = this._dateAdapter.getYear(this.minDate);\n            const minMonth = this._dateAdapter.getMonth(this.minDate);\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n        return false;\n    }\n    /** Determines whether the user has the RTL layout direction. */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n    /** Sets the currently-selected month based on a model value. */\n    _setSelectedMonth(value) {\n        if (value instanceof DateRange) {\n            this._selectedMonth =\n                this._getMonthInCurrentYear(value.start) || this._getMonthInCurrentYear(value.end);\n        }\n        else {\n            this._selectedMonth = this._getMonthInCurrentYear(value);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatYearView, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatYearView, isStandalone: true, selector: \"mat-year-view\", inputs: { activeDate: \"activeDate\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\", dateClass: \"dateClass\" }, outputs: { selectedChange: \"selectedChange\", monthSelected: \"monthSelected\", activeDateChange: \"activeDateChange\" }, viewQueries: [{ propertyName: \"_matCalendarBody\", first: true, predicate: MatCalendarBody, descendants: true }], exportAs: [\"matYearView\"], ngImport: i0, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead aria-hidden=\\\"true\\\" class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_yearLabel\\\"\\n         [rows]=\\\"_months\\\"\\n         [todayValue]=\\\"_todayMonth!\\\"\\n         [startValue]=\\\"_selectedMonth!\\\"\\n         [endValue]=\\\"_selectedMonth!\\\"\\n         [labelMinRequiredCells]=\\\"2\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\"\\n         (selectedValueChange)=\\\"_monthSelected($event)\\\"\\n         (activeDateChange)=\\\"_updateActiveDate($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\", dependencies: [{ kind: \"component\", type: MatCalendarBody, selector: \"[mat-calendar-body]\", inputs: [\"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"activeCell\", \"isRange\", \"cellAspectRatio\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\"], outputs: [\"selectedValueChange\", \"previewChange\", \"activeDateChange\", \"dragStarted\", \"dragEnded\"], exportAs: [\"matCalendarBody\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatYearView, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-year-view', exportAs: 'matYearView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [MatCalendarBody], template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead aria-hidden=\\\"true\\\" class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_yearLabel\\\"\\n         [rows]=\\\"_months\\\"\\n         [todayValue]=\\\"_todayMonth!\\\"\\n         [startValue]=\\\"_selectedMonth!\\\"\\n         [endValue]=\\\"_selectedMonth!\\\"\\n         [labelMinRequiredCells]=\\\"2\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\"\\n         (selectedValueChange)=\\\"_monthSelected($event)\\\"\\n         (activeDateChange)=\\\"_updateActiveDate($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { activeDate: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], minDate: [{\n                type: Input\n            }], maxDate: [{\n                type: Input\n            }], dateFilter: [{\n                type: Input\n            }], dateClass: [{\n                type: Input\n            }], selectedChange: [{\n                type: Output\n            }], monthSelected: [{\n                type: Output\n            }], activeDateChange: [{\n                type: Output\n            }], _matCalendarBody: [{\n                type: ViewChild,\n                args: [MatCalendarBody]\n            }] } });\n\n/** Default header for MatCalendar */\nclass MatCalendarHeader {\n    _intl = inject(MatDatepickerIntl);\n    calendar = inject(MatCalendar);\n    _dateAdapter = inject(DateAdapter, { optional: true });\n    _dateFormats = inject(MAT_DATE_FORMATS, { optional: true });\n    _periodButtonText;\n    _periodButtonDescription;\n    _periodButtonLabel;\n    _prevButtonLabel;\n    _nextButtonLabel;\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n        const changeDetectorRef = inject(ChangeDetectorRef);\n        this._updateLabels();\n        this.calendar.stateChanges.subscribe(() => {\n            this._updateLabels();\n            changeDetectorRef.markForCheck();\n        });\n    }\n    /** The display text for the current calendar view. */\n    get periodButtonText() {\n        return this._periodButtonText;\n    }\n    /** The aria description for the current calendar view. */\n    get periodButtonDescription() {\n        return this._periodButtonDescription;\n    }\n    /** The `aria-label` for changing the calendar view. */\n    get periodButtonLabel() {\n        return this._periodButtonLabel;\n    }\n    /** The label for the previous button. */\n    get prevButtonLabel() {\n        return this._prevButtonLabel;\n    }\n    /** The label for the next button. */\n    get nextButtonLabel() {\n        return this._nextButtonLabel;\n    }\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked() {\n        this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n    }\n    /** Handles user clicks on the previous button. */\n    previousClicked() {\n        if (this.previousEnabled()) {\n            this.calendar.activeDate =\n                this.calendar.currentView == 'month'\n                    ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1)\n                    : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n        }\n    }\n    /** Handles user clicks on the next button. */\n    nextClicked() {\n        if (this.nextEnabled()) {\n            this.calendar.activeDate =\n                this.calendar.currentView == 'month'\n                    ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1)\n                    : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n        }\n    }\n    /** Whether the previous period button is enabled. */\n    previousEnabled() {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n        return (!this.calendar.minDate || !this._isSameView(this.calendar.activeDate, this.calendar.minDate));\n    }\n    /** Whether the next period button is enabled. */\n    nextEnabled() {\n        return (!this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate));\n    }\n    /** Updates the labels for the various sections of the header. */\n    _updateLabels() {\n        const calendar = this.calendar;\n        const intl = this._intl;\n        const adapter = this._dateAdapter;\n        if (calendar.currentView === 'month') {\n            this._periodButtonText = adapter\n                .format(calendar.activeDate, this._dateFormats.display.monthYearLabel)\n                .toLocaleUpperCase();\n            this._periodButtonDescription = adapter\n                .format(calendar.activeDate, this._dateFormats.display.monthYearLabel)\n                .toLocaleUpperCase();\n            this._periodButtonLabel = intl.switchToMultiYearViewLabel;\n            this._prevButtonLabel = intl.prevMonthLabel;\n            this._nextButtonLabel = intl.nextMonthLabel;\n        }\n        else if (calendar.currentView === 'year') {\n            this._periodButtonText = adapter.getYearName(calendar.activeDate);\n            this._periodButtonDescription = adapter.getYearName(calendar.activeDate);\n            this._periodButtonLabel = intl.switchToMonthViewLabel;\n            this._prevButtonLabel = intl.prevYearLabel;\n            this._nextButtonLabel = intl.nextYearLabel;\n        }\n        else {\n            this._periodButtonText = intl.formatYearRange(...this._formatMinAndMaxYearLabels());\n            // Format a label for the window of years displayed in the multi-year calendar view. Use\n            // `formatYearRangeLabel` because it is TTS friendly.\n            this._periodButtonDescription = intl.formatYearRangeLabel(...this._formatMinAndMaxYearLabels());\n            this._periodButtonLabel = intl.switchToMonthViewLabel;\n            this._prevButtonLabel = intl.prevMultiYearLabel;\n            this._nextButtonLabel = intl.nextMultiYearLabel;\n        }\n    }\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    _isSameView(date1, date2) {\n        if (this.calendar.currentView == 'month') {\n            return (this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n                this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2));\n        }\n        if (this.calendar.currentView == 'year') {\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n        }\n        // Otherwise we are in 'multi-year' view.\n        return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n    }\n    /**\n     * Format two individual labels for the minimum year and maximum year available in the multi-year\n     * calendar view. Returns an array of two strings where the first string is the formatted label\n     * for the minimum year, and the second string is the formatted label for the maximum year.\n     */\n    _formatMinAndMaxYearLabels() {\n        // The offset from the active year to the \"slot\" for the starting year is the\n        // *actual* first rendered year in the multi-year view, and the last year is\n        // just yearsPerPage - 1 away.\n        const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n        const minYearOfPage = activeYear -\n            getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n        const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n        const minYearLabel = this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n        const maxYearLabel = this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n        return [minYearLabel, maxYearLabel];\n    }\n    _periodButtonLabelId = inject(_IdGenerator).getId('mat-calendar-period-label-');\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatCalendarHeader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatCalendarHeader, isStandalone: true, selector: \"mat-calendar-header\", exportAs: [\"matCalendarHeader\"], ngImport: i0, template: \"<div class=\\\"mat-calendar-header\\\">\\n  <div class=\\\"mat-calendar-controls\\\">\\n    <!-- [Firefox Issue: https://bugzilla.mozilla.org/show_bug.cgi?id=1880533]\\n      Relocated label next to related button and made visually hidden via cdk-visually-hidden\\n      to enable label to appear in a11y tree for SR when using Firefox -->\\n    <span [id]=\\\"_periodButtonLabelId\\\" class=\\\"cdk-visually-hidden\\\" aria-live=\\\"polite\\\">{{periodButtonDescription}}</span>\\n    <button matButton type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\"\\n            (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\"\\n            [attr.aria-describedby]=\\\"_periodButtonLabelId\\\">\\n      <span aria-hidden=\\\"true\\\">{{periodButtonText}}</span>\\n      <svg class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"calendar.currentView !== 'month'\\\"\\n           viewBox=\\\"0 0 10 5\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n           <polygon points=\\\"0,0 5,5 10,0\\\"/>\\n      </svg>\\n    </button>\\n\\n    <div class=\\\"mat-calendar-spacer\\\"></div>\\n\\n    <ng-content></ng-content>\\n\\n    <button matIconButton type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\"\\n            [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\"\\n            [attr.aria-label]=\\\"prevButtonLabel\\\" disabledInteractive>\\n      <svg viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n       </svg>\\n    </button>\\n\\n    <button matIconButton type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\"\\n            [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\"\\n            [attr.aria-label]=\\\"nextButtonLabel\\\" disabledInteractive>\\n      <svg viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n      </svg>\\n    </button>\\n  </div>\\n</div>\\n\", dependencies: [{ kind: \"component\", type: MatButton, selector: \"    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  \", inputs: [\"matButton\"], exportAs: [\"matButton\", \"matAnchor\"] }, { kind: \"component\", type: MatIconButton, selector: \"button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]\", exportAs: [\"matButton\", \"matAnchor\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatCalendarHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-calendar-header', exportAs: 'matCalendarHeader', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [MatButton, MatIconButton], template: \"<div class=\\\"mat-calendar-header\\\">\\n  <div class=\\\"mat-calendar-controls\\\">\\n    <!-- [Firefox Issue: https://bugzilla.mozilla.org/show_bug.cgi?id=1880533]\\n      Relocated label next to related button and made visually hidden via cdk-visually-hidden\\n      to enable label to appear in a11y tree for SR when using Firefox -->\\n    <span [id]=\\\"_periodButtonLabelId\\\" class=\\\"cdk-visually-hidden\\\" aria-live=\\\"polite\\\">{{periodButtonDescription}}</span>\\n    <button matButton type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\"\\n            (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\"\\n            [attr.aria-describedby]=\\\"_periodButtonLabelId\\\">\\n      <span aria-hidden=\\\"true\\\">{{periodButtonText}}</span>\\n      <svg class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"calendar.currentView !== 'month'\\\"\\n           viewBox=\\\"0 0 10 5\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n           <polygon points=\\\"0,0 5,5 10,0\\\"/>\\n      </svg>\\n    </button>\\n\\n    <div class=\\\"mat-calendar-spacer\\\"></div>\\n\\n    <ng-content></ng-content>\\n\\n    <button matIconButton type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\"\\n            [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\"\\n            [attr.aria-label]=\\\"prevButtonLabel\\\" disabledInteractive>\\n      <svg viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n       </svg>\\n    </button>\\n\\n    <button matIconButton type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\"\\n            [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\"\\n            [attr.aria-label]=\\\"nextButtonLabel\\\" disabledInteractive>\\n      <svg viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n      </svg>\\n    </button>\\n  </div>\\n</div>\\n\" }]\n        }], ctorParameters: () => [] });\n/** A calendar that is used as part of the datepicker. */\nclass MatCalendar {\n    _dateAdapter = inject(DateAdapter, { optional: true });\n    _dateFormats = inject(MAT_DATE_FORMATS, { optional: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    /** An input indicating the type of the header component, if set. */\n    headerComponent;\n    /** A portal containing the header component type for this calendar. */\n    _calendarHeaderPortal;\n    _intlChanges;\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    _moveFocusOnNextTick = false;\n    /** A date representing the period (month or year) to start the calendar in. */\n    get startAt() {\n        return this._startAt;\n    }\n    set startAt(value) {\n        this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _startAt;\n    /** Whether the calendar should be started in month or year view. */\n    startView = 'month';\n    /** The currently selected date. */\n    get selected() {\n        return this._selected;\n    }\n    set selected(value) {\n        if (value instanceof DateRange) {\n            this._selected = value;\n        }\n        else {\n            this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n    }\n    _selected;\n    /** The minimum selectable date. */\n    get minDate() {\n        return this._minDate;\n    }\n    set minDate(value) {\n        this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _minDate;\n    /** The maximum selectable date. */\n    get maxDate() {\n        return this._maxDate;\n    }\n    set maxDate(value) {\n        this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass;\n    /** Start of the comparison range. */\n    comparisonStart;\n    /** End of the comparison range. */\n    comparisonEnd;\n    /** ARIA Accessible name of the `<input matStartDate/>` */\n    startDateAccessibleName;\n    /** ARIA Accessible name of the `<input matEndDate/>` */\n    endDateAccessibleName;\n    /** Emits when the currently selected date changes. */\n    selectedChange = new EventEmitter();\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    yearSelected = new EventEmitter();\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    monthSelected = new EventEmitter();\n    /**\n     * Emits when the current view changes.\n     */\n    viewChanged = new EventEmitter(true);\n    /** Emits when any date is selected. */\n    _userSelection = new EventEmitter();\n    /** Emits a new date range value when the user completes a drag drop operation. */\n    _userDragDrop = new EventEmitter();\n    /** Reference to the current month view component. */\n    monthView;\n    /** Reference to the current year view component. */\n    yearView;\n    /** Reference to the current multi-year view component. */\n    multiYearView;\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate() {\n        return this._clampedActiveDate;\n    }\n    set activeDate(value) {\n        this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n        this._changeDetectorRef.markForCheck();\n    }\n    _clampedActiveDate;\n    /** Whether the calendar is in month view. */\n    get currentView() {\n        return this._currentView;\n    }\n    set currentView(value) {\n        const viewChangedResult = this._currentView !== value ? value : null;\n        this._currentView = value;\n        this._moveFocusOnNextTick = true;\n        this._changeDetectorRef.markForCheck();\n        if (viewChangedResult) {\n            this.stateChanges.next();\n            this.viewChanged.emit(viewChangedResult);\n        }\n    }\n    _currentView;\n    /** Origin of active drag, or null when dragging is not active. */\n    _activeDrag = null;\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject();\n    constructor() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            if (!this._dateFormats) {\n                throw createMissingDateImplError('MAT_DATE_FORMATS');\n            }\n        }\n        this._intlChanges = inject(MatDatepickerIntl).changes.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    ngAfterContentInit() {\n        this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n        this.activeDate = this.startAt || this._dateAdapter.today();\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n    ngAfterViewChecked() {\n        if (this._moveFocusOnNextTick) {\n            this._moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n    ngOnChanges(changes) {\n        // Ignore date changes that are at a different time on the same day. This fixes issues where\n        // the calendar re-renders when there is no meaningful change to [minDate] or [maxDate]\n        // (#24435).\n        const minDateChange = changes['minDate'] &&\n            !this._dateAdapter.sameDate(changes['minDate'].previousValue, changes['minDate'].currentValue)\n            ? changes['minDate']\n            : undefined;\n        const maxDateChange = changes['maxDate'] &&\n            !this._dateAdapter.sameDate(changes['maxDate'].previousValue, changes['maxDate'].currentValue)\n            ? changes['maxDate']\n            : undefined;\n        const changeRequiringRerender = minDateChange || maxDateChange || changes['dateFilter'];\n        if (changeRequiringRerender && !changeRequiringRerender.firstChange) {\n            const view = this._getCurrentViewComponent();\n            if (view) {\n                // Schedule focus to be moved to the active date since re-rendering can blur the active\n                // cell (see #29265), however don't do so if focus is outside of the calendar, because it\n                // can steal away the user's attention (see #30635).\n                if (this._elementRef.nativeElement.contains(_getFocusedElementPierceShadowDom())) {\n                    this._moveFocusOnNextTick = true;\n                }\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n                this._changeDetectorRef.detectChanges();\n                view._init();\n            }\n        }\n        this.stateChanges.next();\n    }\n    /** Focuses the active date. */\n    focusActiveCell() {\n        this._getCurrentViewComponent()._focusActiveCell(false);\n    }\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        this._getCurrentViewComponent()._init();\n    }\n    /** Handles date selection in the month view. */\n    _dateSelected(event) {\n        const date = event.value;\n        if (this.selected instanceof DateRange ||\n            (date && !this._dateAdapter.sameDate(date, this.selected))) {\n            this.selectedChange.emit(date);\n        }\n        this._userSelection.emit(event);\n    }\n    /** Handles year selection in the multiyear view. */\n    _yearSelectedInMultiYearView(normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    }\n    /** Handles month selection in the year view. */\n    _monthSelectedInYearView(normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n    /** Handles year/month selection in the multi-year/year views. */\n    _goToDateInView(date, view) {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n    /** Called when the user starts dragging to change a date range. */\n    _dragStarted(event) {\n        this._activeDrag = event;\n    }\n    /**\n     * Called when a drag completes. It may end in cancelation or in the selection\n     * of a new range.\n     */\n    _dragEnded(event) {\n        if (!this._activeDrag)\n            return;\n        if (event.value) {\n            this._userDragDrop.emit(event);\n        }\n        this._activeDrag = null;\n    }\n    /** Returns the component instance that corresponds to the current calendar view. */\n    _getCurrentViewComponent() {\n        // The return type is explicitly written as a union to ensure that the Closure compiler does\n        // not optimize calls to _init(). Without the explicit return type, TypeScript narrows it to\n        // only the first component type. See https://github.com/angular/components/issues/22996.\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatCalendar, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.2.0-rc.1\", type: MatCalendar, isStandalone: true, selector: \"mat-calendar\", inputs: { headerComponent: \"headerComponent\", startAt: \"startAt\", startView: \"startView\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\", dateClass: \"dateClass\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\", startDateAccessibleName: \"startDateAccessibleName\", endDateAccessibleName: \"endDateAccessibleName\" }, outputs: { selectedChange: \"selectedChange\", yearSelected: \"yearSelected\", monthSelected: \"monthSelected\", viewChanged: \"viewChanged\", _userSelection: \"_userSelection\", _userDragDrop: \"_userDragDrop\" }, host: { classAttribute: \"mat-calendar\" }, providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER], viewQueries: [{ propertyName: \"monthView\", first: true, predicate: MatMonthView, descendants: true }, { propertyName: \"yearView\", first: true, predicate: MatYearView, descendants: true }, { propertyName: \"multiYearView\", first: true, predicate: MatMultiYearView, descendants: true }], exportAs: [\"matCalendar\"], usesOnChanges: true, ngImport: i0, template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template>\\n\\n<div class=\\\"mat-calendar-content\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\">\\n  @switch (currentView) {\\n    @case ('month') {\\n        <mat-month-view\\n            [(activeDate)]=\\\"activeDate\\\"\\n            [selected]=\\\"selected\\\"\\n            [dateFilter]=\\\"dateFilter\\\"\\n            [maxDate]=\\\"maxDate\\\"\\n            [minDate]=\\\"minDate\\\"\\n            [dateClass]=\\\"dateClass\\\"\\n            [comparisonStart]=\\\"comparisonStart\\\"\\n            [comparisonEnd]=\\\"comparisonEnd\\\"\\n            [startDateAccessibleName]=\\\"startDateAccessibleName\\\"\\n            [endDateAccessibleName]=\\\"endDateAccessibleName\\\"\\n            (_userSelection)=\\\"_dateSelected($event)\\\"\\n            (dragStarted)=\\\"_dragStarted($event)\\\"\\n            (dragEnded)=\\\"_dragEnded($event)\\\"\\n            [activeDrag]=\\\"_activeDrag\\\"></mat-month-view>\\n    }\\n\\n    @case ('year') {\\n        <mat-year-view\\n            [(activeDate)]=\\\"activeDate\\\"\\n            [selected]=\\\"selected\\\"\\n            [dateFilter]=\\\"dateFilter\\\"\\n            [maxDate]=\\\"maxDate\\\"\\n            [minDate]=\\\"minDate\\\"\\n            [dateClass]=\\\"dateClass\\\"\\n            (monthSelected)=\\\"_monthSelectedInYearView($event)\\\"\\n            (selectedChange)=\\\"_goToDateInView($event, 'month')\\\"></mat-year-view>\\n    }\\n\\n    @case ('multi-year') {\\n        <mat-multi-year-view\\n            [(activeDate)]=\\\"activeDate\\\"\\n            [selected]=\\\"selected\\\"\\n            [dateFilter]=\\\"dateFilter\\\"\\n            [maxDate]=\\\"maxDate\\\"\\n            [minDate]=\\\"minDate\\\"\\n            [dateClass]=\\\"dateClass\\\"\\n            (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\"\\n            (selectedChange)=\\\"_goToDateInView($event, 'year')\\\"></mat-multi-year-view>\\n    }\\n  }\\n</div>\\n\", styles: [\".mat-calendar{display:block;line-height:normal;font-family:var(--mat-datepicker-calendar-text-font, var(--mat-sys-body-medium-font));font-size:var(--mat-datepicker-calendar-text-size, var(--mat-sys-body-medium-size))}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:none}.mat-calendar-controls{display:flex;align-items:center;margin:5% calc(4.7142857143% - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0;margin:0 8px;font-size:var(--mat-datepicker-calendar-period-button-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-period-button-text-weight, var(--mat-sys-title-small-weight));--mat-button-text-label-text-color: var(--mat-datepicker-calendar-period-button-text-color, var(--mat-sys-on-surface-variant))}.mat-calendar-arrow{display:inline-block;width:10px;height:5px;margin:0 0 0 5px;vertical-align:middle;fill:var(--mat-datepicker-calendar-period-button-icon-color, var(--mat-sys-on-surface-variant))}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}@media(forced-colors: active){.mat-calendar-arrow{fill:CanvasText}}.mat-datepicker-content .mat-calendar-previous-button:not(.mat-mdc-button-disabled),.mat-datepicker-content .mat-calendar-next-button:not(.mat-mdc-button-disabled){color:var(--mat-datepicker-calendar-navigation-button-icon-color, var(--mat-sys-on-surface-variant))}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0;color:var(--mat-datepicker-calendar-header-text-color, var(--mat-sys-on-surface-variant));font-size:var(--mat-datepicker-calendar-header-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-header-text-weight, var(--mat-sys-title-small-weight))}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px;background:var(--mat-datepicker-calendar-header-divider-color, transparent)}.mat-calendar-body-cell-content::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 3px)*-1)}.mat-calendar-body-cell:focus .mat-focus-indicator::before{content:\\\"\\\"}\\n\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }, { kind: \"directive\", type: CdkMonitorFocus, selector: \"[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]\", outputs: [\"cdkFocusChange\"], exportAs: [\"cdkMonitorFocus\"] }, { kind: \"component\", type: MatMonthView, selector: \"mat-month-view\", inputs: [\"activeDate\", \"selected\", \"minDate\", \"maxDate\", \"dateFilter\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\", \"activeDrag\"], outputs: [\"selectedChange\", \"_userSelection\", \"dragStarted\", \"dragEnded\", \"activeDateChange\"], exportAs: [\"matMonthView\"] }, { kind: \"component\", type: MatYearView, selector: \"mat-year-view\", inputs: [\"activeDate\", \"selected\", \"minDate\", \"maxDate\", \"dateFilter\", \"dateClass\"], outputs: [\"selectedChange\", \"monthSelected\", \"activeDateChange\"], exportAs: [\"matYearView\"] }, { kind: \"component\", type: MatMultiYearView, selector: \"mat-multi-year-view\", inputs: [\"activeDate\", \"selected\", \"minDate\", \"maxDate\", \"dateFilter\", \"dateClass\"], outputs: [\"selectedChange\", \"yearSelected\", \"activeDateChange\"], exportAs: [\"matMultiYearView\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatCalendar, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-calendar', host: {\n                        'class': 'mat-calendar',\n                    }, exportAs: 'matCalendar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER], imports: [CdkPortalOutlet, CdkMonitorFocus, MatMonthView, MatYearView, MatMultiYearView], template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template>\\n\\n<div class=\\\"mat-calendar-content\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\">\\n  @switch (currentView) {\\n    @case ('month') {\\n        <mat-month-view\\n            [(activeDate)]=\\\"activeDate\\\"\\n            [selected]=\\\"selected\\\"\\n            [dateFilter]=\\\"dateFilter\\\"\\n            [maxDate]=\\\"maxDate\\\"\\n            [minDate]=\\\"minDate\\\"\\n            [dateClass]=\\\"dateClass\\\"\\n            [comparisonStart]=\\\"comparisonStart\\\"\\n            [comparisonEnd]=\\\"comparisonEnd\\\"\\n            [startDateAccessibleName]=\\\"startDateAccessibleName\\\"\\n            [endDateAccessibleName]=\\\"endDateAccessibleName\\\"\\n            (_userSelection)=\\\"_dateSelected($event)\\\"\\n            (dragStarted)=\\\"_dragStarted($event)\\\"\\n            (dragEnded)=\\\"_dragEnded($event)\\\"\\n            [activeDrag]=\\\"_activeDrag\\\"></mat-month-view>\\n    }\\n\\n    @case ('year') {\\n        <mat-year-view\\n            [(activeDate)]=\\\"activeDate\\\"\\n            [selected]=\\\"selected\\\"\\n            [dateFilter]=\\\"dateFilter\\\"\\n            [maxDate]=\\\"maxDate\\\"\\n            [minDate]=\\\"minDate\\\"\\n            [dateClass]=\\\"dateClass\\\"\\n            (monthSelected)=\\\"_monthSelectedInYearView($event)\\\"\\n            (selectedChange)=\\\"_goToDateInView($event, 'month')\\\"></mat-year-view>\\n    }\\n\\n    @case ('multi-year') {\\n        <mat-multi-year-view\\n            [(activeDate)]=\\\"activeDate\\\"\\n            [selected]=\\\"selected\\\"\\n            [dateFilter]=\\\"dateFilter\\\"\\n            [maxDate]=\\\"maxDate\\\"\\n            [minDate]=\\\"minDate\\\"\\n            [dateClass]=\\\"dateClass\\\"\\n            (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\"\\n            (selectedChange)=\\\"_goToDateInView($event, 'year')\\\"></mat-multi-year-view>\\n    }\\n  }\\n</div>\\n\", styles: [\".mat-calendar{display:block;line-height:normal;font-family:var(--mat-datepicker-calendar-text-font, var(--mat-sys-body-medium-font));font-size:var(--mat-datepicker-calendar-text-size, var(--mat-sys-body-medium-size))}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:none}.mat-calendar-controls{display:flex;align-items:center;margin:5% calc(4.7142857143% - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0;margin:0 8px;font-size:var(--mat-datepicker-calendar-period-button-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-period-button-text-weight, var(--mat-sys-title-small-weight));--mat-button-text-label-text-color: var(--mat-datepicker-calendar-period-button-text-color, var(--mat-sys-on-surface-variant))}.mat-calendar-arrow{display:inline-block;width:10px;height:5px;margin:0 0 0 5px;vertical-align:middle;fill:var(--mat-datepicker-calendar-period-button-icon-color, var(--mat-sys-on-surface-variant))}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}@media(forced-colors: active){.mat-calendar-arrow{fill:CanvasText}}.mat-datepicker-content .mat-calendar-previous-button:not(.mat-mdc-button-disabled),.mat-datepicker-content .mat-calendar-next-button:not(.mat-mdc-button-disabled){color:var(--mat-datepicker-calendar-navigation-button-icon-color, var(--mat-sys-on-surface-variant))}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0;color:var(--mat-datepicker-calendar-header-text-color, var(--mat-sys-on-surface-variant));font-size:var(--mat-datepicker-calendar-header-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-header-text-weight, var(--mat-sys-title-small-weight))}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px;background:var(--mat-datepicker-calendar-header-divider-color, transparent)}.mat-calendar-body-cell-content::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 3px)*-1)}.mat-calendar-body-cell:focus .mat-focus-indicator::before{content:\\\"\\\"}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { headerComponent: [{\n                type: Input\n            }], startAt: [{\n                type: Input\n            }], startView: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], minDate: [{\n                type: Input\n            }], maxDate: [{\n                type: Input\n            }], dateFilter: [{\n                type: Input\n            }], dateClass: [{\n                type: Input\n            }], comparisonStart: [{\n                type: Input\n            }], comparisonEnd: [{\n                type: Input\n            }], startDateAccessibleName: [{\n                type: Input\n            }], endDateAccessibleName: [{\n                type: Input\n            }], selectedChange: [{\n                type: Output\n            }], yearSelected: [{\n                type: Output\n            }], monthSelected: [{\n                type: Output\n            }], viewChanged: [{\n                type: Output\n            }], _userSelection: [{\n                type: Output\n            }], _userDragDrop: [{\n                type: Output\n            }], monthView: [{\n                type: ViewChild,\n                args: [MatMonthView]\n            }], yearView: [{\n                type: ViewChild,\n                args: [MatYearView]\n            }], multiYearView: [{\n                type: ViewChild,\n                args: [MatMultiYearView]\n            }] } });\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nconst MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const injector = inject(Injector);\n        return () => createRepositionScrollStrategy(injector);\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(_overlay) {\n    const injector = inject(Injector);\n    return () => createRepositionScrollStrategy(injector);\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n    deps: [],\n    useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Component used as the content for the datepicker overlay. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the overlay that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\nclass MatDatepickerContent {\n    _elementRef = inject(ElementRef);\n    _animationsDisabled = _animationsDisabled();\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _globalModel = inject(MatDateSelectionModel);\n    _dateAdapter = inject(DateAdapter);\n    _ngZone = inject(NgZone);\n    _rangeSelectionStrategy = inject(MAT_DATE_RANGE_SELECTION_STRATEGY, { optional: true });\n    _stateChanges;\n    _model;\n    _eventCleanups;\n    _animationFallback;\n    /** Reference to the internal calendar component. */\n    _calendar;\n    /**\n     * Theme color of the internal calendar. This API is supported in M2 themes\n     * only, it has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/datepicker/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    color;\n    /** Reference to the datepicker that created the overlay. */\n    datepicker;\n    /** Start of the comparison range. */\n    comparisonStart;\n    /** End of the comparison range. */\n    comparisonEnd;\n    /** ARIA Accessible name of the `<input matStartDate/>` */\n    startDateAccessibleName;\n    /** ARIA Accessible name of the `<input matEndDate/>` */\n    endDateAccessibleName;\n    /** Whether the datepicker is above or below the input. */\n    _isAbove;\n    /** Emits when an animation has finished. */\n    _animationDone = new Subject();\n    /** Whether there is an in-progress animation. */\n    _isAnimating = false;\n    /** Text for the close button. */\n    _closeButtonText;\n    /** Whether the close button currently has focus. */\n    _closeButtonFocused;\n    /** Portal with projected action buttons. */\n    _actionsPortal = null;\n    /** Id of the label for the `role=\"dialog\"` element. */\n    _dialogLabelId;\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n        this._closeButtonText = inject(MatDatepickerIntl).closeCalendarLabel;\n        if (!this._animationsDisabled) {\n            const element = this._elementRef.nativeElement;\n            const renderer = inject(Renderer2);\n            this._eventCleanups = this._ngZone.runOutsideAngular(() => [\n                renderer.listen(element, 'animationstart', this._handleAnimationEvent),\n                renderer.listen(element, 'animationend', this._handleAnimationEvent),\n                renderer.listen(element, 'animationcancel', this._handleAnimationEvent),\n            ]);\n        }\n    }\n    ngAfterViewInit() {\n        this._stateChanges = this.datepicker.stateChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n        this._calendar.focusActiveCell();\n    }\n    ngOnDestroy() {\n        clearTimeout(this._animationFallback);\n        this._eventCleanups?.forEach(cleanup => cleanup());\n        this._stateChanges?.unsubscribe();\n        this._animationDone.complete();\n    }\n    _handleUserSelection(event) {\n        const selection = this._model.selection;\n        const value = event.value;\n        const isRange = selection instanceof DateRange;\n        // If we're selecting a range and we have a selection strategy, always pass the value through\n        // there. Otherwise don't assign null values to the model, unless we're selecting a range.\n        // A null value when picking a range means that the user cancelled the selection (e.g. by\n        // pressing escape), whereas when selecting a single value it means that the value didn't\n        // change. This isn't very intuitive, but it's here for backwards-compatibility.\n        if (isRange && this._rangeSelectionStrategy) {\n            const newSelection = this._rangeSelectionStrategy.selectionFinished(value, selection, event.event);\n            this._model.updateSelection(newSelection, this);\n        }\n        else if (value &&\n            (isRange || !this._dateAdapter.sameDate(value, selection))) {\n            this._model.add(value);\n        }\n        // Delegate closing the overlay to the actions.\n        if ((!this._model || this._model.isComplete()) && !this._actionsPortal) {\n            this.datepicker.close();\n        }\n    }\n    _handleUserDragDrop(event) {\n        this._model.updateSelection(event.value, this);\n    }\n    _startExitAnimation() {\n        this._elementRef.nativeElement.classList.add('mat-datepicker-content-exit');\n        if (this._animationsDisabled) {\n            this._animationDone.next();\n        }\n        else {\n            // Some internal apps disable animations in tests using `* {animation: none !important}`.\n            // If that happens, the animation events won't fire and we'll never clean up the overlay.\n            // Add a fallback that will fire if the animation doesn't run in a certain amount of time.\n            clearTimeout(this._animationFallback);\n            this._animationFallback = setTimeout(() => {\n                if (!this._isAnimating) {\n                    this._animationDone.next();\n                }\n            }, 200);\n        }\n    }\n    _handleAnimationEvent = (event) => {\n        const element = this._elementRef.nativeElement;\n        if (event.target !== element || !event.animationName.startsWith('_mat-datepicker-content')) {\n            return;\n        }\n        clearTimeout(this._animationFallback);\n        this._isAnimating = event.type === 'animationstart';\n        element.classList.toggle('mat-datepicker-content-animating', this._isAnimating);\n        if (!this._isAnimating) {\n            this._animationDone.next();\n        }\n    };\n    _getSelected() {\n        return this._model.selection;\n    }\n    /** Applies the current pending selection to the global model. */\n    _applyPendingSelection() {\n        if (this._model !== this._globalModel) {\n            this._globalModel.updateSelection(this._model.selection, this);\n        }\n    }\n    /**\n     * Assigns a new portal containing the datepicker actions.\n     * @param portal Portal with the actions to be assigned.\n     * @param forceRerender Whether a re-render of the portal should be triggered. This isn't\n     * necessary if the portal is assigned during initialization, but it may be required if it's\n     * added at a later point.\n     */\n    _assignActions(portal, forceRerender) {\n        // If we have actions, clone the model so that we have the ability to cancel the selection,\n        // otherwise update the global model directly. Note that we want to assign this as soon as\n        // possible, but `_actionsPortal` isn't available in the constructor so we do it in `ngOnInit`.\n        this._model = portal ? this._globalModel.clone() : this._globalModel;\n        this._actionsPortal = portal;\n        if (forceRerender) {\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerContent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatDatepickerContent, isStandalone: true, selector: \"mat-datepicker-content\", inputs: { color: \"color\" }, host: { properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"class.mat-datepicker-content-touch\": \"datepicker.touchUi\", \"class.mat-datepicker-content-animations-enabled\": \"!_animationsDisabled\" }, classAttribute: \"mat-datepicker-content\" }, viewQueries: [{ propertyName: \"_calendar\", first: true, predicate: MatCalendar, descendants: true }], exportAs: [\"matDatepickerContent\"], ngImport: i0, template: \"<div\\n  cdkTrapFocus\\n  role=\\\"dialog\\\"\\n  [attr.aria-modal]=\\\"true\\\"\\n  [attr.aria-labelledby]=\\\"_dialogLabelId ?? undefined\\\"\\n  class=\\\"mat-datepicker-content-container\\\"\\n  [class.mat-datepicker-content-container-with-custom-header]=\\\"datepicker.calendarHeaderComponent\\\"\\n  [class.mat-datepicker-content-container-with-actions]=\\\"_actionsPortal\\\">\\n  <mat-calendar\\n    [id]=\\\"datepicker.id\\\"\\n    [class]=\\\"datepicker.panelClass\\\"\\n    [startAt]=\\\"datepicker.startAt\\\"\\n    [startView]=\\\"datepicker.startView\\\"\\n    [minDate]=\\\"datepicker._getMinDate()\\\"\\n    [maxDate]=\\\"datepicker._getMaxDate()\\\"\\n    [dateFilter]=\\\"datepicker._getDateFilter()\\\"\\n    [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\"\\n    [selected]=\\\"_getSelected()\\\"\\n    [dateClass]=\\\"datepicker.dateClass\\\"\\n    [comparisonStart]=\\\"comparisonStart\\\"\\n    [comparisonEnd]=\\\"comparisonEnd\\\"\\n    [startDateAccessibleName]=\\\"startDateAccessibleName\\\"\\n    [endDateAccessibleName]=\\\"endDateAccessibleName\\\"\\n    (yearSelected)=\\\"datepicker._selectYear($event)\\\"\\n    (monthSelected)=\\\"datepicker._selectMonth($event)\\\"\\n    (viewChanged)=\\\"datepicker._viewChanged($event)\\\"\\n    (_userSelection)=\\\"_handleUserSelection($event)\\\"\\n    (_userDragDrop)=\\\"_handleUserDragDrop($event)\\\"></mat-calendar>\\n\\n  <ng-template [cdkPortalOutlet]=\\\"_actionsPortal\\\"></ng-template>\\n\\n  <!-- Invisible close button for screen reader users. -->\\n  <button\\n    type=\\\"button\\\"\\n    matButton=\\\"elevated\\\"\\n    [color]=\\\"color || 'primary'\\\"\\n    class=\\\"mat-datepicker-close-button\\\"\\n    [class.cdk-visually-hidden]=\\\"!_closeButtonFocused\\\"\\n    (focus)=\\\"_closeButtonFocused = true\\\"\\n    (blur)=\\\"_closeButtonFocused = false\\\"\\n    (click)=\\\"datepicker.close()\\\">{{ _closeButtonText }}</button>\\n</div>\\n\", styles: [\"@keyframes _mat-datepicker-content-dropdown-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}@keyframes _mat-datepicker-content-dialog-enter{from{opacity:0;transform:scale(0.8)}to{opacity:1;transform:none}}@keyframes _mat-datepicker-content-exit{from{opacity:1}to{opacity:0}}.mat-datepicker-content{display:block;background-color:var(--mat-datepicker-calendar-container-background-color, var(--mat-sys-surface-container-high));color:var(--mat-datepicker-calendar-container-text-color, var(--mat-sys-on-surface));box-shadow:var(--mat-datepicker-calendar-container-elevation-shadow, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12));border-radius:var(--mat-datepicker-calendar-container-shape, var(--mat-sys-corner-large))}.mat-datepicker-content.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-dropdown-enter 120ms cubic-bezier(0, 0, 0.2, 1)}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content .mat-datepicker-content-container-with-custom-header .mat-calendar{height:auto}.mat-datepicker-content .mat-datepicker-close-button{position:absolute;top:100%;left:0;margin-top:8px}.mat-datepicker-content-animating .mat-datepicker-content .mat-datepicker-close-button{display:none}.mat-datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.mat-datepicker-content-touch{display:block;max-height:80vh;box-shadow:var(--mat-datepicker-calendar-container-touch-elevation-shadow, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12));border-radius:var(--mat-datepicker-calendar-container-touch-shape, var(--mat-sys-corner-extra-large));position:relative;overflow:visible}.mat-datepicker-content-touch.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-dialog-enter 150ms cubic-bezier(0, 0, 0.2, 1)}.mat-datepicker-content-touch .mat-datepicker-content-container{min-height:312px;max-height:788px;min-width:250px;max-width:750px}.mat-datepicker-content-touch .mat-calendar{width:100%;height:auto}.mat-datepicker-content-exit.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-exit 100ms linear}@media all and (orientation: landscape){.mat-datepicker-content-touch .mat-datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-datepicker-content-touch .mat-datepicker-content-container{width:80vw;height:100vw}.mat-datepicker-content-touch .mat-datepicker-content-container-with-actions{height:115vw}}\\n\"], dependencies: [{ kind: \"directive\", type: CdkTrapFocus, selector: \"[cdkTrapFocus]\", inputs: [\"cdkTrapFocus\", \"cdkTrapFocusAutoCapture\"], exportAs: [\"cdkTrapFocus\"] }, { kind: \"component\", type: MatCalendar, selector: \"mat-calendar\", inputs: [\"headerComponent\", \"startAt\", \"startView\", \"selected\", \"minDate\", \"maxDate\", \"dateFilter\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\"], outputs: [\"selectedChange\", \"yearSelected\", \"monthSelected\", \"viewChanged\", \"_userSelection\", \"_userDragDrop\"], exportAs: [\"matCalendar\"] }, { kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }, { kind: \"component\", type: MatButton, selector: \"    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  \", inputs: [\"matButton\"], exportAs: [\"matButton\", \"matAnchor\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerContent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-datepicker-content', host: {\n                        'class': 'mat-datepicker-content',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n                        '[class.mat-datepicker-content-animations-enabled]': '!_animationsDisabled',\n                    }, exportAs: 'matDatepickerContent', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [CdkTrapFocus, MatCalendar, CdkPortalOutlet, MatButton], template: \"<div\\n  cdkTrapFocus\\n  role=\\\"dialog\\\"\\n  [attr.aria-modal]=\\\"true\\\"\\n  [attr.aria-labelledby]=\\\"_dialogLabelId ?? undefined\\\"\\n  class=\\\"mat-datepicker-content-container\\\"\\n  [class.mat-datepicker-content-container-with-custom-header]=\\\"datepicker.calendarHeaderComponent\\\"\\n  [class.mat-datepicker-content-container-with-actions]=\\\"_actionsPortal\\\">\\n  <mat-calendar\\n    [id]=\\\"datepicker.id\\\"\\n    [class]=\\\"datepicker.panelClass\\\"\\n    [startAt]=\\\"datepicker.startAt\\\"\\n    [startView]=\\\"datepicker.startView\\\"\\n    [minDate]=\\\"datepicker._getMinDate()\\\"\\n    [maxDate]=\\\"datepicker._getMaxDate()\\\"\\n    [dateFilter]=\\\"datepicker._getDateFilter()\\\"\\n    [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\"\\n    [selected]=\\\"_getSelected()\\\"\\n    [dateClass]=\\\"datepicker.dateClass\\\"\\n    [comparisonStart]=\\\"comparisonStart\\\"\\n    [comparisonEnd]=\\\"comparisonEnd\\\"\\n    [startDateAccessibleName]=\\\"startDateAccessibleName\\\"\\n    [endDateAccessibleName]=\\\"endDateAccessibleName\\\"\\n    (yearSelected)=\\\"datepicker._selectYear($event)\\\"\\n    (monthSelected)=\\\"datepicker._selectMonth($event)\\\"\\n    (viewChanged)=\\\"datepicker._viewChanged($event)\\\"\\n    (_userSelection)=\\\"_handleUserSelection($event)\\\"\\n    (_userDragDrop)=\\\"_handleUserDragDrop($event)\\\"></mat-calendar>\\n\\n  <ng-template [cdkPortalOutlet]=\\\"_actionsPortal\\\"></ng-template>\\n\\n  <!-- Invisible close button for screen reader users. -->\\n  <button\\n    type=\\\"button\\\"\\n    matButton=\\\"elevated\\\"\\n    [color]=\\\"color || 'primary'\\\"\\n    class=\\\"mat-datepicker-close-button\\\"\\n    [class.cdk-visually-hidden]=\\\"!_closeButtonFocused\\\"\\n    (focus)=\\\"_closeButtonFocused = true\\\"\\n    (blur)=\\\"_closeButtonFocused = false\\\"\\n    (click)=\\\"datepicker.close()\\\">{{ _closeButtonText }}</button>\\n</div>\\n\", styles: [\"@keyframes _mat-datepicker-content-dropdown-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}@keyframes _mat-datepicker-content-dialog-enter{from{opacity:0;transform:scale(0.8)}to{opacity:1;transform:none}}@keyframes _mat-datepicker-content-exit{from{opacity:1}to{opacity:0}}.mat-datepicker-content{display:block;background-color:var(--mat-datepicker-calendar-container-background-color, var(--mat-sys-surface-container-high));color:var(--mat-datepicker-calendar-container-text-color, var(--mat-sys-on-surface));box-shadow:var(--mat-datepicker-calendar-container-elevation-shadow, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12));border-radius:var(--mat-datepicker-calendar-container-shape, var(--mat-sys-corner-large))}.mat-datepicker-content.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-dropdown-enter 120ms cubic-bezier(0, 0, 0.2, 1)}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content .mat-datepicker-content-container-with-custom-header .mat-calendar{height:auto}.mat-datepicker-content .mat-datepicker-close-button{position:absolute;top:100%;left:0;margin-top:8px}.mat-datepicker-content-animating .mat-datepicker-content .mat-datepicker-close-button{display:none}.mat-datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.mat-datepicker-content-touch{display:block;max-height:80vh;box-shadow:var(--mat-datepicker-calendar-container-touch-elevation-shadow, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12));border-radius:var(--mat-datepicker-calendar-container-touch-shape, var(--mat-sys-corner-extra-large));position:relative;overflow:visible}.mat-datepicker-content-touch.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-dialog-enter 150ms cubic-bezier(0, 0, 0.2, 1)}.mat-datepicker-content-touch .mat-datepicker-content-container{min-height:312px;max-height:788px;min-width:250px;max-width:750px}.mat-datepicker-content-touch .mat-calendar{width:100%;height:auto}.mat-datepicker-content-exit.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-exit 100ms linear}@media all and (orientation: landscape){.mat-datepicker-content-touch .mat-datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-datepicker-content-touch .mat-datepicker-content-container{width:80vw;height:100vw}.mat-datepicker-content-touch .mat-datepicker-content-container-with-actions{height:115vw}}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { _calendar: [{\n                type: ViewChild,\n                args: [MatCalendar]\n            }], color: [{\n                type: Input\n            }] } });\n/** Base class for a datepicker. */\nclass MatDatepickerBase {\n    _injector = inject(Injector);\n    _viewContainerRef = inject(ViewContainerRef);\n    _dateAdapter = inject(DateAdapter, { optional: true });\n    _dir = inject(Directionality, { optional: true });\n    _model = inject(MatDateSelectionModel);\n    _animationsDisabled = _animationsDisabled();\n    _scrollStrategy = inject(MAT_DATEPICKER_SCROLL_STRATEGY);\n    _inputStateChanges = Subscription.EMPTY;\n    _document = inject(DOCUMENT);\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    calendarHeaderComponent;\n    /** The date to open the calendar to initially. */\n    get startAt() {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.getStartValue() : null);\n    }\n    set startAt(value) {\n        this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _startAt;\n    /** The view that the calendar should start in. */\n    startView = 'month';\n    /**\n     * Theme color of the datepicker's calendar. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/datepicker/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return (this._color || (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined));\n    }\n    set color(value) {\n        this._color = value;\n    }\n    _color;\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a dropdown and elements have more padding to allow for bigger touch targets.\n     */\n    touchUi = false;\n    /** Whether the datepicker pop-up should be disabled. */\n    get disabled() {\n        return this._disabled === undefined && this.datepickerInput\n            ? this.datepickerInput.disabled\n            : !!this._disabled;\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this.stateChanges.next(undefined);\n        }\n    }\n    _disabled;\n    /** Preferred position of the datepicker in the X axis. */\n    xPosition = 'start';\n    /** Preferred position of the datepicker in the Y axis. */\n    yPosition = 'below';\n    /**\n     * Whether to restore focus to the previously-focused element when the calendar is closed.\n     * Note that automatic focus restoration is an accessibility feature and it is recommended that\n     * you provide your own equivalent, if you decide to turn it off.\n     */\n    restoreFocus = true;\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    yearSelected = new EventEmitter();\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    monthSelected = new EventEmitter();\n    /**\n     * Emits when the current view changes.\n     */\n    viewChanged = new EventEmitter(true);\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass;\n    /** Emits when the datepicker has been opened. */\n    openedStream = new EventEmitter();\n    /** Emits when the datepicker has been closed. */\n    closedStream = new EventEmitter();\n    /** Classes to be passed to the date picker panel. */\n    get panelClass() {\n        return this._panelClass;\n    }\n    set panelClass(value) {\n        this._panelClass = coerceStringArray(value);\n    }\n    _panelClass;\n    /** Whether the calendar is open. */\n    get opened() {\n        return this._opened;\n    }\n    set opened(value) {\n        if (value) {\n            this.open();\n        }\n        else {\n            this.close();\n        }\n    }\n    _opened = false;\n    /** The id for the datepicker calendar. */\n    id = inject(_IdGenerator).getId('mat-datepicker-');\n    /** The minimum selectable date. */\n    _getMinDate() {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n    /** The maximum selectable date. */\n    _getMaxDate() {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n    _getDateFilter() {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n    /** A reference to the overlay into which we've rendered the calendar. */\n    _overlayRef;\n    /** Reference to the component instance rendered in the overlay. */\n    _componentRef;\n    /** The element that was focused before the datepicker was opened. */\n    _focusedElementBeforeOpen = null;\n    /** Unique class that will be added to the backdrop so that the test harnesses can look it up. */\n    _backdropHarnessClass = `${this.id}-backdrop`;\n    /** Currently-registered actions portal. */\n    _actionsPortal;\n    /** The input element this datepicker is associated with. */\n    datepickerInput;\n    /** Emits when the datepicker's state changes. */\n    stateChanges = new Subject();\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    constructor() {\n        if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._model.selectionChanged.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    ngOnChanges(changes) {\n        const positionChange = changes['xPosition'] || changes['yPosition'];\n        if (positionChange && !positionChange.firstChange && this._overlayRef) {\n            const positionStrategy = this._overlayRef.getConfig().positionStrategy;\n            if (positionStrategy instanceof FlexibleConnectedPositionStrategy) {\n                this._setConnectedPositions(positionStrategy);\n                if (this.opened) {\n                    this._overlayRef.updatePosition();\n                }\n            }\n        }\n        this.stateChanges.next(undefined);\n    }\n    ngOnDestroy() {\n        this._destroyOverlay();\n        this.close();\n        this._inputStateChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n    /** Selects the given date */\n    select(date) {\n        this._model.add(date);\n    }\n    /** Emits the selected year in multiyear view */\n    _selectYear(normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    }\n    /** Emits selected month in year view */\n    _selectMonth(normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n    /** Emits changed view */\n    _viewChanged(view) {\n        this.viewChanged.emit(view);\n    }\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     * @returns Selection model that the input should hook itself up to.\n     */\n    registerInput(input) {\n        if (this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('A MatDatepicker can only be associated with a single input.');\n        }\n        this._inputStateChanges.unsubscribe();\n        this.datepickerInput = input;\n        this._inputStateChanges = input.stateChanges.subscribe(() => this.stateChanges.next(undefined));\n        return this._model;\n    }\n    /**\n     * Registers a portal containing action buttons with the datepicker.\n     * @param portal Portal to be registered.\n     */\n    registerActions(portal) {\n        if (this._actionsPortal && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('A MatDatepicker can only be associated with a single actions row.');\n        }\n        this._actionsPortal = portal;\n        this._componentRef?.instance._assignActions(portal, true);\n    }\n    /**\n     * Removes a portal containing action buttons from the datepicker.\n     * @param portal Portal to be removed.\n     */\n    removeActions(portal) {\n        if (portal === this._actionsPortal) {\n            this._actionsPortal = null;\n            this._componentRef?.instance._assignActions(null, true);\n        }\n    }\n    /** Open the calendar. */\n    open() {\n        // Skip reopening if there's an in-progress animation to avoid overlapping\n        // sequences which can cause \"changed after checked\" errors. See #25837.\n        if (this._opened || this.disabled || this._componentRef?.instance._isAnimating) {\n            return;\n        }\n        if (!this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempted to open an MatDatepicker with no associated input.');\n        }\n        this._focusedElementBeforeOpen = _getFocusedElementPierceShadowDom();\n        this._openOverlay();\n        this._opened = true;\n        this.openedStream.emit();\n    }\n    /** Close the calendar. */\n    close() {\n        // Skip reopening if there's an in-progress animation to avoid overlapping\n        // sequences which can cause \"changed after checked\" errors. See #25837.\n        if (!this._opened || this._componentRef?.instance._isAnimating) {\n            return;\n        }\n        const canRestoreFocus = this.restoreFocus &&\n            this._focusedElementBeforeOpen &&\n            typeof this._focusedElementBeforeOpen.focus === 'function';\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n            }\n        };\n        if (this._componentRef) {\n            const { instance, location } = this._componentRef;\n            instance._animationDone.pipe(take(1)).subscribe(() => {\n                const activeElement = this._document.activeElement;\n                // Since we restore focus after the exit animation, we have to check that\n                // the user didn't move focus themselves inside the `close` handler.\n                if (canRestoreFocus &&\n                    (!activeElement ||\n                        activeElement === this._document.activeElement ||\n                        location.nativeElement.contains(activeElement))) {\n                    this._focusedElementBeforeOpen.focus();\n                }\n                this._focusedElementBeforeOpen = null;\n                this._destroyOverlay();\n            });\n            instance._startExitAnimation();\n        }\n        if (canRestoreFocus) {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            setTimeout(completeClose);\n        }\n        else {\n            completeClose();\n        }\n    }\n    /** Applies the current pending selection on the overlay to the model. */\n    _applyPendingSelection() {\n        this._componentRef?.instance?._applyPendingSelection();\n    }\n    /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\n    _forwardContentValues(instance) {\n        instance.datepicker = this;\n        instance.color = this.color;\n        instance._dialogLabelId = this.datepickerInput.getOverlayLabelId();\n        instance._assignActions(this._actionsPortal, false);\n    }\n    /** Opens the overlay with the calendar. */\n    _openOverlay() {\n        this._destroyOverlay();\n        const isDialog = this.touchUi;\n        const portal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n        const overlayRef = (this._overlayRef = createOverlayRef(this._injector, new OverlayConfig({\n            positionStrategy: isDialog ? this._getDialogStrategy() : this._getDropdownStrategy(),\n            hasBackdrop: true,\n            backdropClass: [\n                isDialog ? 'cdk-overlay-dark-backdrop' : 'mat-overlay-transparent-backdrop',\n                this._backdropHarnessClass,\n            ],\n            direction: this._dir || 'ltr',\n            scrollStrategy: isDialog\n                ? createBlockScrollStrategy(this._injector)\n                : this._scrollStrategy(),\n            panelClass: `mat-datepicker-${isDialog ? 'dialog' : 'popup'}`,\n            disableAnimations: this._animationsDisabled,\n        })));\n        this._getCloseStream(overlayRef).subscribe(event => {\n            if (event) {\n                event.preventDefault();\n            }\n            this.close();\n        });\n        // The `preventDefault` call happens inside the calendar as well, however focus moves into\n        // it inside a timeout which can give browsers a chance to fire off a keyboard event in-between\n        // that can scroll the page (see #24969). Always block default actions of arrow keys for the\n        // entire overlay so the page doesn't get scrolled by accident.\n        overlayRef.keydownEvents().subscribe(event => {\n            const keyCode = event.keyCode;\n            if (keyCode === UP_ARROW ||\n                keyCode === DOWN_ARROW ||\n                keyCode === LEFT_ARROW ||\n                keyCode === RIGHT_ARROW ||\n                keyCode === PAGE_UP ||\n                keyCode === PAGE_DOWN) {\n                event.preventDefault();\n            }\n        });\n        this._componentRef = overlayRef.attach(portal);\n        this._forwardContentValues(this._componentRef.instance);\n        // Update the position once the calendar has rendered. Only relevant in dropdown mode.\n        if (!isDialog) {\n            afterNextRender(() => {\n                overlayRef.updatePosition();\n            }, { injector: this._injector });\n        }\n    }\n    /** Destroys the current overlay. */\n    _destroyOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = this._componentRef = null;\n        }\n    }\n    /** Gets a position strategy that will open the calendar as a dropdown. */\n    _getDialogStrategy() {\n        return createGlobalPositionStrategy(this._injector).centerHorizontally().centerVertically();\n    }\n    /** Gets a position strategy that will open the calendar as a dropdown. */\n    _getDropdownStrategy() {\n        const strategy = createFlexibleConnectedPositionStrategy(this._injector, this.datepickerInput.getConnectedOverlayOrigin())\n            .withTransformOriginOn('.mat-datepicker-content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition();\n        return this._setConnectedPositions(strategy);\n    }\n    /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\n    _setConnectedPositions(strategy) {\n        const primaryX = this.xPosition === 'end' ? 'end' : 'start';\n        const secondaryX = primaryX === 'start' ? 'end' : 'start';\n        const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';\n        const secondaryY = primaryY === 'top' ? 'bottom' : 'top';\n        return strategy.withPositions([\n            {\n                originX: primaryX,\n                originY: secondaryY,\n                overlayX: primaryX,\n                overlayY: primaryY,\n            },\n            {\n                originX: primaryX,\n                originY: primaryY,\n                overlayX: primaryX,\n                overlayY: secondaryY,\n            },\n            {\n                originX: secondaryX,\n                originY: secondaryY,\n                overlayX: secondaryX,\n                overlayY: primaryY,\n            },\n            {\n                originX: secondaryX,\n                originY: primaryY,\n                overlayX: secondaryX,\n                overlayY: secondaryY,\n            },\n        ]);\n    }\n    /** Gets an observable that will emit when the overlay is supposed to be closed. */\n    _getCloseStream(overlayRef) {\n        const ctrlShiftMetaModifiers = ['ctrlKey', 'shiftKey', 'metaKey'];\n        return merge(overlayRef.backdropClick(), overlayRef.detachments(), overlayRef.keydownEvents().pipe(filter(event => {\n            // Closing on alt + up is only valid when there's an input associated with the datepicker.\n            return ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                (this.datepickerInput &&\n                    hasModifierKey(event, 'altKey') &&\n                    event.keyCode === UP_ARROW &&\n                    ctrlShiftMetaModifiers.every((modifier) => !hasModifierKey(event, modifier))));\n        })));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerBase, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.2.0-rc.1\", type: MatDatepickerBase, isStandalone: true, inputs: { calendarHeaderComponent: \"calendarHeaderComponent\", startAt: \"startAt\", startView: \"startView\", color: \"color\", touchUi: [\"touchUi\", \"touchUi\", booleanAttribute], disabled: [\"disabled\", \"disabled\", booleanAttribute], xPosition: \"xPosition\", yPosition: \"yPosition\", restoreFocus: [\"restoreFocus\", \"restoreFocus\", booleanAttribute], dateClass: \"dateClass\", panelClass: \"panelClass\", opened: [\"opened\", \"opened\", booleanAttribute] }, outputs: { yearSelected: \"yearSelected\", monthSelected: \"monthSelected\", viewChanged: \"viewChanged\", openedStream: \"opened\", closedStream: \"closed\" }, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [], propDecorators: { calendarHeaderComponent: [{\n                type: Input\n            }], startAt: [{\n                type: Input\n            }], startView: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], touchUi: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], restoreFocus: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], yearSelected: [{\n                type: Output\n            }], monthSelected: [{\n                type: Output\n            }], viewChanged: [{\n                type: Output\n            }], dateClass: [{\n                type: Input\n            }], openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], panelClass: [{\n                type: Input\n            }], opened: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\nclass MatDatepicker extends MatDatepickerBase {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepicker, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatDatepicker, isStandalone: true, selector: \"mat-datepicker\", providers: [\n            MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n            { provide: MatDatepickerBase, useExisting: MatDatepicker },\n        ], exportAs: [\"matDatepicker\"], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepicker, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-datepicker',\n                    template: '',\n                    exportAs: 'matDatepicker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n                        { provide: MatDatepickerBase, useExisting: MatDatepicker },\n                    ],\n                }]\n        }] });\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nclass MatDatepickerInputEvent {\n    target;\n    targetElement;\n    /** The new value for the target datepicker input. */\n    value;\n    constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    target, \n    /** Reference to the native input element associated with the datepicker input. */\n    targetElement) {\n        this.target = target;\n        this.targetElement = targetElement;\n        this.value = this.target.value;\n    }\n}\n/** Base class for datepicker inputs. */\nclass MatDatepickerInputBase {\n    _elementRef = inject(ElementRef);\n    _dateAdapter = inject(DateAdapter, { optional: true });\n    _dateFormats = inject(MAT_DATE_FORMATS, { optional: true });\n    /** Whether the component has been initialized. */\n    _isInitialized;\n    /** The value of the input. */\n    get value() {\n        return this._model ? this._getValueFromModel(this._model.selection) : this._pendingValue;\n    }\n    set value(value) {\n        this._assignValueProgrammatically(value);\n    }\n    _model;\n    /** Whether the datepicker-input is disabled. */\n    get disabled() {\n        return !!this._disabled || this._parentDisabled();\n    }\n    set disabled(value) {\n        const newValue = value;\n        const element = this._elementRef.nativeElement;\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.stateChanges.next(undefined);\n        }\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.\n        // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the\n        // element has been inserted.\n        if (newValue && this._isInitialized && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n    _disabled;\n    /** Emits when a `change` event is fired on this `<input>`. */\n    dateChange = new EventEmitter();\n    /** Emits when an `input` event is fired on this `<input>`. */\n    dateInput = new EventEmitter();\n    /** Emits when the internal state has changed */\n    stateChanges = new Subject();\n    _onTouched = () => { };\n    _validatorOnChange = () => { };\n    _cvaOnChange = () => { };\n    _valueChangesSubscription = Subscription.EMPTY;\n    _localeSubscription = Subscription.EMPTY;\n    /**\n     * Since the value is kept on the model which is assigned in an Input,\n     * we might get a value before we have a model. This property keeps track\n     * of the value until we have somewhere to assign it.\n     */\n    _pendingValue;\n    /** The form control validator for whether the input parses. */\n    _parseValidator = () => {\n        return this._lastValueValid\n            ? null\n            : { 'matDatepickerParse': { 'text': this._elementRef.nativeElement.value } };\n    };\n    /** The form control validator for the date filter. */\n    _filterValidator = (control) => {\n        const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n        return !controlValue || this._matchesFilter(controlValue)\n            ? null\n            : { 'matDatepickerFilter': true };\n    };\n    /** The form control validator for the min date. */\n    _minValidator = (control) => {\n        const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n        const min = this._getMinDate();\n        return !min || !controlValue || this._dateAdapter.compareDate(min, controlValue) <= 0\n            ? null\n            : { 'matDatepickerMin': { 'min': min, 'actual': controlValue } };\n    };\n    /** The form control validator for the max date. */\n    _maxValidator = (control) => {\n        const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n        const max = this._getMaxDate();\n        return !max || !controlValue || this._dateAdapter.compareDate(max, controlValue) >= 0\n            ? null\n            : { 'matDatepickerMax': { 'max': max, 'actual': controlValue } };\n    };\n    /** Gets the base validator functions. */\n    _getValidators() {\n        return [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator];\n    }\n    /** Registers a date selection model with the input. */\n    _registerModel(model) {\n        this._model = model;\n        this._valueChangesSubscription.unsubscribe();\n        if (this._pendingValue) {\n            this._assignValue(this._pendingValue);\n        }\n        this._valueChangesSubscription = this._model.selectionChanged.subscribe(event => {\n            if (this._shouldHandleChangeEvent(event)) {\n                const value = this._getValueFromModel(event.selection);\n                this._lastValueValid = this._isValidValue(value);\n                this._cvaOnChange(value);\n                this._onTouched();\n                this._formatValue(value);\n                this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n                this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            }\n        });\n    }\n    /** Whether the last value set on the input was valid. */\n    _lastValueValid = false;\n    constructor() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            if (!this._dateFormats) {\n                throw createMissingDateImplError('MAT_DATE_FORMATS');\n            }\n        }\n        // Update the displayed date when the locale changes.\n        this._localeSubscription = this._dateAdapter.localeChanges.subscribe(() => {\n            this._assignValueProgrammatically(this.value);\n        });\n    }\n    ngAfterViewInit() {\n        this._isInitialized = true;\n    }\n    ngOnChanges(changes) {\n        if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n            this.stateChanges.next(undefined);\n        }\n    }\n    ngOnDestroy() {\n        this._valueChangesSubscription.unsubscribe();\n        this._localeSubscription.unsubscribe();\n        this.stateChanges.complete();\n    }\n    /** @docs-private */\n    registerOnValidatorChange(fn) {\n        this._validatorOnChange = fn;\n    }\n    /** @docs-private */\n    validate(c) {\n        return this._validator ? this._validator(c) : null;\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this._assignValueProgrammatically(value);\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._cvaOnChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _onKeydown(event) {\n        const ctrlShiftMetaModifiers = ['ctrlKey', 'shiftKey', 'metaKey'];\n        const isAltDownArrow = hasModifierKey(event, 'altKey') &&\n            event.keyCode === DOWN_ARROW &&\n            ctrlShiftMetaModifiers.every((modifier) => !hasModifierKey(event, modifier));\n        if (isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n            this._openPopup();\n            event.preventDefault();\n        }\n    }\n    _onInput(event) {\n        const value = event.target.value;\n        const lastValueWasValid = this._lastValueValid;\n        let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n        this._lastValueValid = this._isValidValue(date);\n        date = this._dateAdapter.getValidDateOrNull(date);\n        const hasChanged = !this._dateAdapter.sameDate(date, this.value);\n        // We need to fire the CVA change event for all\n        // nulls, otherwise the validators won't run.\n        if (!date || hasChanged) {\n            this._cvaOnChange(date);\n        }\n        else {\n            // Call the CVA change handler for invalid values\n            // since this is what marks the control as dirty.\n            if (value && !this.value) {\n                this._cvaOnChange(date);\n            }\n            if (lastValueWasValid !== this._lastValueValid) {\n                this._validatorOnChange();\n            }\n        }\n        if (hasChanged) {\n            this._assignValue(date);\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }\n    }\n    _onChange() {\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n    /** Handles blur events on the input. */\n    _onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this._formatValue(this.value);\n        }\n        this._onTouched();\n    }\n    /** Formats a value and sets it on the input element. */\n    _formatValue(value) {\n        this._elementRef.nativeElement.value =\n            value != null ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    }\n    /** Assigns a value to the model. */\n    _assignValue(value) {\n        // We may get some incoming values before the model was\n        // assigned. Save the value so that we can assign it later.\n        if (this._model) {\n            this._assignValueToModel(value);\n            this._pendingValue = null;\n        }\n        else {\n            this._pendingValue = value;\n        }\n    }\n    /** Whether a value is considered valid. */\n    _isValidValue(value) {\n        return !value || this._dateAdapter.isValid(value);\n    }\n    /**\n     * Checks whether a parent control is disabled. This is in place so that it can be overridden\n     * by inputs extending this one which can be placed inside of a group that can be disabled.\n     */\n    _parentDisabled() {\n        return false;\n    }\n    /** Programmatically assigns a value to the input. */\n    _assignValueProgrammatically(value) {\n        value = this._dateAdapter.deserialize(value);\n        this._lastValueValid = this._isValidValue(value);\n        value = this._dateAdapter.getValidDateOrNull(value);\n        this._assignValue(value);\n        this._formatValue(value);\n    }\n    /** Gets whether a value matches the current date filter. */\n    _matchesFilter(value) {\n        const filter = this._getDateFilter();\n        return !filter || filter(value);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerInputBase, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.2.0-rc.1\", type: MatDatepickerInputBase, isStandalone: true, inputs: { value: \"value\", disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { dateChange: \"dateChange\", dateInput: \"dateInput\" }, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerInputBase, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [], propDecorators: { value: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], dateChange: [{\n                type: Output\n            }], dateInput: [{\n                type: Output\n            }] } });\n/**\n * Checks whether the `SimpleChanges` object from an `ngOnChanges`\n * callback has any changes, accounting for date objects.\n */\nfunction dateInputsHaveChanged(changes, adapter) {\n    const keys = Object.keys(changes);\n    for (let key of keys) {\n        const { previousValue, currentValue } = changes[key];\n        if (adapter.isDateInstance(previousValue) && adapter.isDateInstance(currentValue)) {\n            if (!adapter.sameDate(previousValue, currentValue)) {\n                return true;\n            }\n        }\n        else {\n            return true;\n        }\n    }\n    return false;\n}\n\n/** @docs-private */\nconst MAT_DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatDatepickerInput),\n    multi: true,\n};\n/** @docs-private */\nconst MAT_DATEPICKER_VALIDATORS = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatDatepickerInput),\n    multi: true,\n};\n/** Directive used to connect an input to a MatDatepicker. */\nclass MatDatepickerInput extends MatDatepickerInputBase {\n    _formField = inject(MAT_FORM_FIELD, { optional: true });\n    _closedSubscription = Subscription.EMPTY;\n    _openedSubscription = Subscription.EMPTY;\n    /** The datepicker that this input is associated with. */\n    set matDatepicker(datepicker) {\n        if (datepicker) {\n            this._datepicker = datepicker;\n            this._ariaOwns.set(datepicker.opened ? datepicker.id : null);\n            this._closedSubscription = datepicker.closedStream.subscribe(() => {\n                this._onTouched();\n                this._ariaOwns.set(null);\n            });\n            this._openedSubscription = datepicker.openedStream.subscribe(() => {\n                this._ariaOwns.set(datepicker.id);\n            });\n            this._registerModel(datepicker.registerInput(this));\n        }\n    }\n    _datepicker;\n    /** The id of the panel owned by this input. */\n    _ariaOwns = signal(null, ...(ngDevMode ? [{ debugName: \"_ariaOwns\" }] : []));\n    /** The minimum valid date. */\n    get min() {\n        return this._min;\n    }\n    set min(value) {\n        const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        if (!this._dateAdapter.sameDate(validValue, this._min)) {\n            this._min = validValue;\n            this._validatorOnChange();\n        }\n    }\n    _min;\n    /** The maximum valid date. */\n    get max() {\n        return this._max;\n    }\n    set max(value) {\n        const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        if (!this._dateAdapter.sameDate(validValue, this._max)) {\n            this._max = validValue;\n            this._validatorOnChange();\n        }\n    }\n    _max;\n    /** Function that can be used to filter out dates within the datepicker. */\n    get dateFilter() {\n        return this._dateFilter;\n    }\n    set dateFilter(value) {\n        const wasMatchingValue = this._matchesFilter(this.value);\n        this._dateFilter = value;\n        if (this._matchesFilter(this.value) !== wasMatchingValue) {\n            this._validatorOnChange();\n        }\n    }\n    _dateFilter;\n    /** The combined form control validator for this input. */\n    _validator;\n    constructor() {\n        super();\n        this._validator = Validators.compose(super._getValidators());\n    }\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return The element to connect the popup to.\n     */\n    getConnectedOverlayOrigin() {\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    /** Gets the ID of an element that should be used a description for the calendar overlay. */\n    getOverlayLabelId() {\n        if (this._formField) {\n            return this._formField.getLabelId();\n        }\n        return this._elementRef.nativeElement.getAttribute('aria-labelledby');\n    }\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette() {\n        return this._formField ? this._formField.color : undefined;\n    }\n    /** Gets the value at which the calendar should start. */\n    getStartValue() {\n        return this.value;\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._closedSubscription.unsubscribe();\n        this._openedSubscription.unsubscribe();\n    }\n    /** Opens the associated datepicker. */\n    _openPopup() {\n        if (this._datepicker) {\n            this._datepicker.open();\n        }\n    }\n    _getValueFromModel(modelValue) {\n        return modelValue;\n    }\n    _assignValueToModel(value) {\n        if (this._model) {\n            this._model.updateSelection(value, this);\n        }\n    }\n    /** Gets the input's minimum date. */\n    _getMinDate() {\n        return this._min;\n    }\n    /** Gets the input's maximum date. */\n    _getMaxDate() {\n        return this._max;\n    }\n    /** Gets the input's date filtering function. */\n    _getDateFilter() {\n        return this._dateFilter;\n    }\n    _shouldHandleChangeEvent(event) {\n        return event.source !== this;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerInput, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatDatepickerInput, isStandalone: true, selector: \"input[matDatepicker]\", inputs: { matDatepicker: \"matDatepicker\", min: \"min\", max: \"max\", dateFilter: [\"matDatepickerFilter\", \"dateFilter\"] }, host: { listeners: { \"input\": \"_onInput($event)\", \"change\": \"_onChange()\", \"blur\": \"_onBlur()\", \"keydown\": \"_onKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"_datepicker ? \\\"dialog\\\" : null\", \"attr.aria-owns\": \"_ariaOwns()\", \"attr.min\": \"min ? _dateAdapter.toIso8601(min) : null\", \"attr.max\": \"max ? _dateAdapter.toIso8601(max) : null\", \"attr.data-mat-calendar\": \"_datepicker ? _datepicker.id : null\", \"disabled\": \"disabled\" }, classAttribute: \"mat-datepicker-input\" }, providers: [\n            MAT_DATEPICKER_VALUE_ACCESSOR,\n            MAT_DATEPICKER_VALIDATORS,\n            { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput },\n        ], exportAs: [\"matDatepickerInput\"], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matDatepicker]',\n                    providers: [\n                        MAT_DATEPICKER_VALUE_ACCESSOR,\n                        MAT_DATEPICKER_VALIDATORS,\n                        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput },\n                    ],\n                    host: {\n                        'class': 'mat-datepicker-input',\n                        '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n                        '[attr.aria-owns]': '_ariaOwns()',\n                        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n                        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n                        // Used by the test harness to tie this input to its calendar. We can't depend on\n                        // `aria-owns` for this, because it's only defined while the calendar is open.\n                        '[attr.data-mat-calendar]': '_datepicker ? _datepicker.id : null',\n                        '[disabled]': 'disabled',\n                        '(input)': '_onInput($event)',\n                        '(change)': '_onChange()',\n                        '(blur)': '_onBlur()',\n                        '(keydown)': '_onKeydown($event)',\n                    },\n                    exportAs: 'matDatepickerInput',\n                }]\n        }], ctorParameters: () => [], propDecorators: { matDatepicker: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], dateFilter: [{\n                type: Input,\n                args: ['matDatepickerFilter']\n            }] } });\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\nclass MatDatepickerToggleIcon {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerToggleIcon, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatDatepickerToggleIcon, isStandalone: true, selector: \"[matDatepickerToggleIcon]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerToggleIcon, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matDatepickerToggleIcon]',\n                }]\n        }] });\nclass MatDatepickerToggle {\n    _intl = inject(MatDatepickerIntl);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _stateChanges = Subscription.EMPTY;\n    /** Datepicker instance that the button will toggle. */\n    datepicker;\n    /** Tabindex for the toggle. */\n    tabIndex;\n    /** Screen-reader label for the button. */\n    ariaLabel;\n    /** Whether the toggle button is disabled. */\n    get disabled() {\n        if (this._disabled === undefined && this.datepicker) {\n            return this.datepicker.disabled;\n        }\n        return !!this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n    }\n    _disabled;\n    /** Whether ripples on the toggle should be disabled. */\n    disableRipple;\n    /** Custom icon set by the consumer. */\n    _customIcon;\n    /** Underlying button element. */\n    _button;\n    constructor() {\n        const defaultTabIndex = inject(new HostAttributeToken('tabindex'), { optional: true });\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    }\n    ngOnChanges(changes) {\n        if (changes['datepicker']) {\n            this._watchStateChanges();\n        }\n    }\n    ngOnDestroy() {\n        this._stateChanges.unsubscribe();\n    }\n    ngAfterContentInit() {\n        this._watchStateChanges();\n    }\n    _open(event) {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n    _watchStateChanges() {\n        const datepickerStateChanged = this.datepicker ? this.datepicker.stateChanges : of();\n        const inputStateChanged = this.datepicker && this.datepicker.datepickerInput\n            ? this.datepicker.datepickerInput.stateChanges\n            : of();\n        const datepickerToggled = this.datepicker\n            ? merge(this.datepicker.openedStream, this.datepicker.closedStream)\n            : of();\n        this._stateChanges.unsubscribe();\n        this._stateChanges = merge(this._intl.changes, datepickerStateChanged, inputStateChanged, datepickerToggled).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerToggle, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.2.0-rc.1\", type: MatDatepickerToggle, isStandalone: true, selector: \"mat-datepicker-toggle\", inputs: { datepicker: [\"for\", \"datepicker\"], tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: \"disableRipple\" }, host: { listeners: { \"click\": \"_open($event)\" }, properties: { \"attr.tabindex\": \"null\", \"class.mat-datepicker-toggle-active\": \"datepicker && datepicker.opened\", \"class.mat-accent\": \"datepicker && datepicker.color === \\\"accent\\\"\", \"class.mat-warn\": \"datepicker && datepicker.color === \\\"warn\\\"\", \"attr.data-mat-calendar\": \"datepicker ? datepicker.id : null\" }, classAttribute: \"mat-datepicker-toggle\" }, queries: [{ propertyName: \"_customIcon\", first: true, predicate: MatDatepickerToggleIcon, descendants: true }], viewQueries: [{ propertyName: \"_button\", first: true, predicate: [\"button\"], descendants: true }], exportAs: [\"matDatepickerToggle\"], usesOnChanges: true, ngImport: i0, template: \"<button\\n  #button\\n  matIconButton\\n  type=\\\"button\\\"\\n  [attr.aria-haspopup]=\\\"datepicker ? 'dialog' : null\\\"\\n  [attr.aria-label]=\\\"ariaLabel || _intl.openCalendarLabel\\\"\\n  [tabIndex]=\\\"disabled ? -1 : tabIndex\\\"\\n  [attr.aria-expanded]=\\\"datepicker ? datepicker.opened : null\\\"\\n  [disabled]=\\\"disabled\\\"\\n  [disableRipple]=\\\"disableRipple\\\">\\n\\n  @if (!_customIcon) {\\n    <svg\\n      class=\\\"mat-datepicker-toggle-default-icon\\\"\\n      viewBox=\\\"0 0 24 24\\\"\\n      width=\\\"24px\\\"\\n      height=\\\"24px\\\"\\n      fill=\\\"currentColor\\\"\\n      focusable=\\\"false\\\"\\n      aria-hidden=\\\"true\\\">\\n      <path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/>\\n    </svg>\\n  }\\n\\n  <ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content>\\n</button>\\n\", styles: [\".mat-datepicker-toggle{pointer-events:auto;color:var(--mat-datepicker-toggle-icon-color, var(--mat-sys-on-surface-variant))}.mat-datepicker-toggle button{color:inherit}.mat-datepicker-toggle-active{color:var(--mat-datepicker-toggle-active-state-icon-color, var(--mat-sys-primary))}@media(forced-colors: active){.mat-datepicker-toggle-default-icon{color:CanvasText}}\\n\"], dependencies: [{ kind: \"component\", type: MatIconButton, selector: \"button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]\", exportAs: [\"matButton\", \"matAnchor\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerToggle, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-datepicker-toggle', host: {\n                        'class': 'mat-datepicker-toggle',\n                        '[attr.tabindex]': 'null',\n                        '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n                        '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n                        '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n                        // Used by the test harness to tie this toggle to its datepicker.\n                        '[attr.data-mat-calendar]': 'datepicker ? datepicker.id : null',\n                        // Bind the `click` on the host, rather than the inner `button`, so that we can call\n                        // `stopPropagation` on it without affecting the user's `click` handlers. We need to stop\n                        // it so that the input doesn't get focused automatically by the form field (See #21836).\n                        '(click)': '_open($event)',\n                    }, exportAs: 'matDatepickerToggle', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [MatIconButton], template: \"<button\\n  #button\\n  matIconButton\\n  type=\\\"button\\\"\\n  [attr.aria-haspopup]=\\\"datepicker ? 'dialog' : null\\\"\\n  [attr.aria-label]=\\\"ariaLabel || _intl.openCalendarLabel\\\"\\n  [tabIndex]=\\\"disabled ? -1 : tabIndex\\\"\\n  [attr.aria-expanded]=\\\"datepicker ? datepicker.opened : null\\\"\\n  [disabled]=\\\"disabled\\\"\\n  [disableRipple]=\\\"disableRipple\\\">\\n\\n  @if (!_customIcon) {\\n    <svg\\n      class=\\\"mat-datepicker-toggle-default-icon\\\"\\n      viewBox=\\\"0 0 24 24\\\"\\n      width=\\\"24px\\\"\\n      height=\\\"24px\\\"\\n      fill=\\\"currentColor\\\"\\n      focusable=\\\"false\\\"\\n      aria-hidden=\\\"true\\\">\\n      <path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/>\\n    </svg>\\n  }\\n\\n  <ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content>\\n</button>\\n\", styles: [\".mat-datepicker-toggle{pointer-events:auto;color:var(--mat-datepicker-toggle-icon-color, var(--mat-sys-on-surface-variant))}.mat-datepicker-toggle button{color:inherit}.mat-datepicker-toggle-active{color:var(--mat-datepicker-toggle-active-state-icon-color, var(--mat-sys-primary))}@media(forced-colors: active){.mat-datepicker-toggle-default-icon{color:CanvasText}}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { datepicker: [{\n                type: Input,\n                args: ['for']\n            }], tabIndex: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input\n            }], _customIcon: [{\n                type: ContentChild,\n                args: [MatDatepickerToggleIcon]\n            }], _button: [{\n                type: ViewChild,\n                args: ['button']\n            }] } });\n\nclass MatDateRangeInput {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dateAdapter = inject(DateAdapter, { optional: true });\n    _formField = inject(MAT_FORM_FIELD, { optional: true });\n    _closedSubscription = Subscription.EMPTY;\n    _openedSubscription = Subscription.EMPTY;\n    _startInput;\n    _endInput;\n    /** Current value of the range input. */\n    get value() {\n        return this._model ? this._model.selection : null;\n    }\n    /** Unique ID for the group. */\n    id = inject(_IdGenerator).getId('mat-date-range-input-');\n    /** Whether the control is focused. */\n    focused = false;\n    /** Whether the control's label should float. */\n    get shouldLabelFloat() {\n        return this.focused || !this.empty;\n    }\n    /** Name of the form control. */\n    controlType = 'mat-date-range-input';\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * Set the placeholder attribute on `matStartDate` and `matEndDate`.\n     * @docs-private\n     */\n    get placeholder() {\n        const start = this._startInput?._getPlaceholder() || '';\n        const end = this._endInput?._getPlaceholder() || '';\n        return start || end ? `${start} ${this.separator} ${end}` : '';\n    }\n    /** The range picker that this input is associated with. */\n    get rangePicker() {\n        return this._rangePicker;\n    }\n    set rangePicker(rangePicker) {\n        if (rangePicker) {\n            this._model = rangePicker.registerInput(this);\n            this._rangePicker = rangePicker;\n            this._closedSubscription.unsubscribe();\n            this._openedSubscription.unsubscribe();\n            this._ariaOwns.set(this.rangePicker.opened ? rangePicker.id : null);\n            this._closedSubscription = rangePicker.closedStream.subscribe(() => {\n                this._startInput?._onTouched();\n                this._endInput?._onTouched();\n                this._ariaOwns.set(null);\n            });\n            this._openedSubscription = rangePicker.openedStream.subscribe(() => {\n                this._ariaOwns.set(rangePicker.id);\n            });\n            this._registerModel(this._model);\n        }\n    }\n    _rangePicker;\n    /** The id of the panel owned by this input. */\n    _ariaOwns = signal(null, ...(ngDevMode ? [{ debugName: \"_ariaOwns\" }] : []));\n    /** Whether the input is required. */\n    get required() {\n        return (this._required ??\n            (this._isTargetRequired(this) ||\n                this._isTargetRequired(this._startInput) ||\n                this._isTargetRequired(this._endInput)) ??\n            false);\n    }\n    set required(value) {\n        this._required = value;\n    }\n    _required;\n    /** Function that can be used to filter out dates within the date range picker. */\n    get dateFilter() {\n        return this._dateFilter;\n    }\n    set dateFilter(value) {\n        const start = this._startInput;\n        const end = this._endInput;\n        const wasMatchingStart = start && start._matchesFilter(start.value);\n        const wasMatchingEnd = end && end._matchesFilter(start.value);\n        this._dateFilter = value;\n        if (start && start._matchesFilter(start.value) !== wasMatchingStart) {\n            start._validatorOnChange();\n        }\n        if (end && end._matchesFilter(end.value) !== wasMatchingEnd) {\n            end._validatorOnChange();\n        }\n    }\n    _dateFilter;\n    /** The minimum valid date. */\n    get min() {\n        return this._min;\n    }\n    set min(value) {\n        const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        if (!this._dateAdapter.sameDate(validValue, this._min)) {\n            this._min = validValue;\n            this._revalidate();\n        }\n    }\n    _min;\n    /** The maximum valid date. */\n    get max() {\n        return this._max;\n    }\n    set max(value) {\n        const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        if (!this._dateAdapter.sameDate(validValue, this._max)) {\n            this._max = validValue;\n            this._revalidate();\n        }\n    }\n    _max;\n    /** Whether the input is disabled. */\n    get disabled() {\n        return this._startInput && this._endInput\n            ? this._startInput.disabled && this._endInput.disabled\n            : this._groupDisabled;\n    }\n    set disabled(value) {\n        if (value !== this._groupDisabled) {\n            this._groupDisabled = value;\n            this.stateChanges.next(undefined);\n        }\n    }\n    _groupDisabled = false;\n    /** Whether the input is in an error state. */\n    get errorState() {\n        if (this._startInput && this._endInput) {\n            return this._startInput.errorState || this._endInput.errorState;\n        }\n        return false;\n    }\n    /** Whether the datepicker input is empty. */\n    get empty() {\n        const startEmpty = this._startInput ? this._startInput.isEmpty() : false;\n        const endEmpty = this._endInput ? this._endInput.isEmpty() : false;\n        return startEmpty && endEmpty;\n    }\n    /** Value for the `aria-describedby` attribute of the inputs. */\n    _ariaDescribedBy = null;\n    /** Date selection model currently registered with the input. */\n    _model;\n    /** Separator text to be shown between the inputs. */\n    separator = '–';\n    /** Start of the comparison range that should be shown in the calendar. */\n    comparisonStart = null;\n    /** End of the comparison range that should be shown in the calendar. */\n    comparisonEnd = null;\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * TODO(crisbeto): change type to `AbstractControlDirective` after #18206 lands.\n     * @docs-private\n     */\n    ngControl;\n    /** Emits when the input's state has changed. */\n    stateChanges = new Subject();\n    /**\n     * Disable the automatic labeling to avoid issues like #27241.\n     * @docs-private\n     */\n    disableAutomaticLabeling = true;\n    constructor() {\n        if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        // The datepicker module can be used both with MDC and non-MDC form fields. We have\n        // to conditionally add the MDC input class so that the range picker looks correctly.\n        if (this._formField?._elementRef.nativeElement.classList.contains('mat-mdc-form-field')) {\n            this._elementRef.nativeElement.classList.add('mat-mdc-input-element', 'mat-mdc-form-field-input-control', 'mdc-text-field__input');\n        }\n        // TODO(crisbeto): remove `as any` after #18206 lands.\n        this.ngControl = inject(ControlContainer, { optional: true, self: true });\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get describedByIds() {\n        const element = this._elementRef.nativeElement;\n        const existingDescribedBy = element.getAttribute('aria-describedby');\n        return existingDescribedBy?.split(' ') || [];\n    }\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedBy = ids.length ? ids.join(' ') : null;\n    }\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    onContainerClick() {\n        if (!this.focused && !this.disabled) {\n            if (!this._model || !this._model.selection.start) {\n                this._startInput.focus();\n            }\n            else {\n                this._endInput.focus();\n            }\n        }\n    }\n    ngAfterContentInit() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._startInput) {\n                throw Error('mat-date-range-input must contain a matStartDate input');\n            }\n            if (!this._endInput) {\n                throw Error('mat-date-range-input must contain a matEndDate input');\n            }\n        }\n        if (this._model) {\n            this._registerModel(this._model);\n        }\n        // We don't need to unsubscribe from this, because we\n        // know that the input streams will be completed on destroy.\n        merge(this._startInput.stateChanges, this._endInput.stateChanges).subscribe(() => {\n            this.stateChanges.next(undefined);\n        });\n    }\n    ngOnChanges(changes) {\n        if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n            this.stateChanges.next(undefined);\n        }\n    }\n    ngOnDestroy() {\n        this._closedSubscription.unsubscribe();\n        this._openedSubscription.unsubscribe();\n        this.stateChanges.complete();\n    }\n    /** Gets the date at which the calendar should start. */\n    getStartValue() {\n        return this.value ? this.value.start : null;\n    }\n    /** Gets the input's theme palette. */\n    getThemePalette() {\n        return this._formField ? this._formField.color : undefined;\n    }\n    /** Gets the element to which the calendar overlay should be attached. */\n    getConnectedOverlayOrigin() {\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    /** Gets the ID of an element that should be used a description for the calendar overlay. */\n    getOverlayLabelId() {\n        return this._formField ? this._formField.getLabelId() : null;\n    }\n    /** Gets the value that is used to mirror the state input. */\n    _getInputMirrorValue(part) {\n        const input = part === 'start' ? this._startInput : this._endInput;\n        return input ? input.getMirrorValue() : '';\n    }\n    /** Whether the input placeholders should be hidden. */\n    _shouldHidePlaceholders() {\n        return this._startInput ? !this._startInput.isEmpty() : false;\n    }\n    /** Handles the value in one of the child inputs changing. */\n    _handleChildValueChange() {\n        this.stateChanges.next(undefined);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Opens the date range picker associated with the input. */\n    _openDatepicker() {\n        if (this._rangePicker) {\n            this._rangePicker.open();\n        }\n    }\n    /** Whether the separate text should be hidden. */\n    _shouldHideSeparator() {\n        return ((!this._formField ||\n            (this._formField.getLabelId() && !this._formField._shouldLabelFloat())) &&\n            this.empty);\n    }\n    /** Gets the value for the `aria-labelledby` attribute of the inputs. */\n    _getAriaLabelledby() {\n        const formField = this._formField;\n        return formField && formField._hasFloatingLabel() ? formField._labelId : null;\n    }\n    _getStartDateAccessibleName() {\n        return this._startInput._getAccessibleName();\n    }\n    _getEndDateAccessibleName() {\n        return this._endInput._getAccessibleName();\n    }\n    /** Updates the focused state of the range input. */\n    _updateFocus(origin) {\n        this.focused = origin !== null;\n        this.stateChanges.next();\n    }\n    /** Re-runs the validators on the start/end inputs. */\n    _revalidate() {\n        if (this._startInput) {\n            this._startInput._validatorOnChange();\n        }\n        if (this._endInput) {\n            this._endInput._validatorOnChange();\n        }\n    }\n    /** Registers the current date selection model with the start/end inputs. */\n    _registerModel(model) {\n        if (this._startInput) {\n            this._startInput._registerModel(model);\n        }\n        if (this._endInput) {\n            this._endInput._registerModel(model);\n        }\n    }\n    /** Checks whether a specific range input directive is required. */\n    _isTargetRequired(target) {\n        return target?.ngControl?.control?.hasValidator(Validators.required);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDateRangeInput, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"20.2.0-rc.1\", type: MatDateRangeInput, isStandalone: true, selector: \"mat-date-range-input\", inputs: { rangePicker: \"rangePicker\", required: [\"required\", \"required\", booleanAttribute], dateFilter: \"dateFilter\", min: \"min\", max: \"max\", disabled: [\"disabled\", \"disabled\", booleanAttribute], separator: \"separator\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\" }, host: { attributes: { \"role\": \"group\" }, properties: { \"class.mat-date-range-input-hide-placeholders\": \"_shouldHidePlaceholders()\", \"class.mat-date-range-input-required\": \"required\", \"attr.id\": \"id\", \"attr.aria-labelledby\": \"_getAriaLabelledby()\", \"attr.aria-describedby\": \"_ariaDescribedBy\", \"attr.data-mat-calendar\": \"rangePicker ? rangePicker.id : null\" }, classAttribute: \"mat-date-range-input\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatDateRangeInput }], exportAs: [\"matDateRangeInput\"], usesOnChanges: true, ngImport: i0, template: \"<div\\n  class=\\\"mat-date-range-input-container\\\"\\n  cdkMonitorSubtreeFocus\\n  (cdkFocusChange)=\\\"_updateFocus($event)\\\">\\n  <div class=\\\"mat-date-range-input-wrapper\\\">\\n    <ng-content select=\\\"input[matStartDate]\\\"></ng-content>\\n    <span\\n      class=\\\"mat-date-range-input-mirror\\\"\\n      aria-hidden=\\\"true\\\">{{_getInputMirrorValue('start')}}</span>\\n  </div>\\n\\n  <span\\n    class=\\\"mat-date-range-input-separator\\\"\\n    [class.mat-date-range-input-separator-hidden]=\\\"_shouldHideSeparator()\\\">{{separator}}</span>\\n\\n  <div class=\\\"mat-date-range-input-wrapper mat-date-range-input-end-wrapper\\\">\\n    <ng-content select=\\\"input[matEndDate]\\\"></ng-content>\\n    <span\\n      class=\\\"mat-date-range-input-mirror\\\"\\n      aria-hidden=\\\"true\\\">{{_getInputMirrorValue('end')}}</span>\\n  </div>\\n</div>\\n\\n\", styles: [\".mat-date-range-input{display:block;width:100%}.mat-date-range-input-container{display:flex;align-items:center}.mat-date-range-input-separator{transition:opacity 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);margin:0 4px;color:var(--mat-datepicker-range-input-separator-color, var(--mat-sys-on-surface))}.mat-form-field-disabled .mat-date-range-input-separator{color:var(--mat-datepicker-range-input-disabled-state-separator-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}._mat-animation-noopable .mat-date-range-input-separator{transition:none}.mat-date-range-input-separator-hidden{-webkit-user-select:none;user-select:none;opacity:0;transition:none}.mat-date-range-input-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px)}.mat-date-range-input-end-wrapper{flex-grow:1}.mat-date-range-input-inner{position:absolute;top:0;left:0;font:inherit;background:rgba(0,0,0,0);color:currentColor;border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%;height:100%}.mat-date-range-input-inner:-moz-ui-invalid{box-shadow:none}.mat-date-range-input-inner::placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-moz-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-webkit-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner:-ms-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner[disabled]{color:var(--mat-datepicker-range-input-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{opacity:0}}._mat-animation-noopable .mat-date-range-input-inner::placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner::-moz-placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner::-webkit-input-placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner:-ms-input-placeholder{transition:none}.mat-date-range-input-mirror{-webkit-user-select:none;user-select:none;visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.mat-mdc-form-field-type-mat-date-range-input .mat-mdc-form-field-infix{width:200px}\\n\"], dependencies: [{ kind: \"directive\", type: CdkMonitorFocus, selector: \"[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]\", outputs: [\"cdkFocusChange\"], exportAs: [\"cdkMonitorFocus\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDateRangeInput, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-date-range-input', exportAs: 'matDateRangeInput', host: {\n                        'class': 'mat-date-range-input',\n                        '[class.mat-date-range-input-hide-placeholders]': '_shouldHidePlaceholders()',\n                        '[class.mat-date-range-input-required]': 'required',\n                        '[attr.id]': 'id',\n                        'role': 'group',\n                        '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                        '[attr.aria-describedby]': '_ariaDescribedBy',\n                        // Used by the test harness to tie this input to its calendar. We can't depend on\n                        // `aria-owns` for this, because it's only defined while the calendar is open.\n                        '[attr.data-mat-calendar]': 'rangePicker ? rangePicker.id : null',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [{ provide: MatFormFieldControl, useExisting: MatDateRangeInput }], imports: [CdkMonitorFocus], template: \"<div\\n  class=\\\"mat-date-range-input-container\\\"\\n  cdkMonitorSubtreeFocus\\n  (cdkFocusChange)=\\\"_updateFocus($event)\\\">\\n  <div class=\\\"mat-date-range-input-wrapper\\\">\\n    <ng-content select=\\\"input[matStartDate]\\\"></ng-content>\\n    <span\\n      class=\\\"mat-date-range-input-mirror\\\"\\n      aria-hidden=\\\"true\\\">{{_getInputMirrorValue('start')}}</span>\\n  </div>\\n\\n  <span\\n    class=\\\"mat-date-range-input-separator\\\"\\n    [class.mat-date-range-input-separator-hidden]=\\\"_shouldHideSeparator()\\\">{{separator}}</span>\\n\\n  <div class=\\\"mat-date-range-input-wrapper mat-date-range-input-end-wrapper\\\">\\n    <ng-content select=\\\"input[matEndDate]\\\"></ng-content>\\n    <span\\n      class=\\\"mat-date-range-input-mirror\\\"\\n      aria-hidden=\\\"true\\\">{{_getInputMirrorValue('end')}}</span>\\n  </div>\\n</div>\\n\\n\", styles: [\".mat-date-range-input{display:block;width:100%}.mat-date-range-input-container{display:flex;align-items:center}.mat-date-range-input-separator{transition:opacity 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);margin:0 4px;color:var(--mat-datepicker-range-input-separator-color, var(--mat-sys-on-surface))}.mat-form-field-disabled .mat-date-range-input-separator{color:var(--mat-datepicker-range-input-disabled-state-separator-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}._mat-animation-noopable .mat-date-range-input-separator{transition:none}.mat-date-range-input-separator-hidden{-webkit-user-select:none;user-select:none;opacity:0;transition:none}.mat-date-range-input-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px)}.mat-date-range-input-end-wrapper{flex-grow:1}.mat-date-range-input-inner{position:absolute;top:0;left:0;font:inherit;background:rgba(0,0,0,0);color:currentColor;border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%;height:100%}.mat-date-range-input-inner:-moz-ui-invalid{box-shadow:none}.mat-date-range-input-inner::placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-moz-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-webkit-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner:-ms-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner[disabled]{color:var(--mat-datepicker-range-input-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{opacity:0}}._mat-animation-noopable .mat-date-range-input-inner::placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner::-moz-placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner::-webkit-input-placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner:-ms-input-placeholder{transition:none}.mat-date-range-input-mirror{-webkit-user-select:none;user-select:none;visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.mat-mdc-form-field-type-mat-date-range-input .mat-mdc-form-field-infix{width:200px}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { rangePicker: [{\n                type: Input\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], dateFilter: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], separator: [{\n                type: Input\n            }], comparisonStart: [{\n                type: Input\n            }], comparisonEnd: [{\n                type: Input\n            }] } });\n\n// This file contains the `_computeAriaAccessibleName` function, which computes what the *expected*\n// ARIA accessible name would be for a given element. Implements a subset of ARIA specification\n// [Accessible Name and Description Computation 1.2](https://www.w3.org/TR/accname-1.2/).\n//\n// Specification accname-1.2 can be summarized by returning the result of the first method\n// available.\n//\n//  1. `aria-labelledby` attribute\n//     ```\n//       <!-- example using aria-labelledby-->\n//       <label id='label-id'>Start Date</label>\n//       <input aria-labelledby='label-id'/>\n//     ```\n//  2. `aria-label` attribute (e.g. `<input aria-label=\"Departure\"/>`)\n//  3. Label with `for`/`id`\n//     ```\n//       <!-- example using for/id -->\n//       <label for=\"current-node\">Label</label>\n//       <input id=\"current-node\"/>\n//     ```\n//  4. `placeholder` attribute (e.g. `<input placeholder=\"06/03/1990\"/>`)\n//  5. `title` attribute (e.g. `<input title=\"Check-In\"/>`)\n//  6. text content\n//     ```\n//       <!-- example using text content -->\n//       <label for=\"current-node\"><span>Departure</span> Date</label>\n//       <input id=\"current-node\"/>\n//     ```\n/**\n * Computes the *expected* ARIA accessible name for argument element based on [accname-1.2\n * specification](https://www.w3.org/TR/accname-1.2/). Implements a subset of accname-1.2,\n * and should only be used for the Datepicker's specific use case.\n *\n * Intended use:\n * This is not a general use implementation. Only implements the parts of accname-1.2 that are\n * required for the Datepicker's specific use case. This function is not intended for any other\n * use.\n *\n * Limitations:\n *  - Only covers the needs of `matStartDate` and `matEndDate`. Does not support other use cases.\n *  - See NOTES's in implementation for specific details on what parts of the accname-1.2\n *  specification are not implemented.\n *\n *  @param element {HTMLInputElement} native &lt;input/&gt; element of `matStartDate` or\n *  `matEndDate` component. Corresponds to the 'Root Element' from accname-1.2\n *\n *  @return expected ARIA accessible name of argument &lt;input/&gt;\n */\nfunction _computeAriaAccessibleName(element) {\n    return _computeAriaAccessibleNameInternal(element, true);\n}\n/**\n * Determine if argument node is an Element based on `nodeType` property. This function is safe to\n * use with server-side rendering.\n */\nfunction ssrSafeIsElement(node) {\n    return node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Determine if argument node is an HTMLInputElement based on `nodeName` property. This funciton is\n * safe to use with server-side rendering.\n */\nfunction ssrSafeIsHTMLInputElement(node) {\n    return node.nodeName === 'INPUT';\n}\n/**\n * Determine if argument node is an HTMLTextAreaElement based on `nodeName` property. This\n * funciton is safe to use with server-side rendering.\n */\nfunction ssrSafeIsHTMLTextAreaElement(node) {\n    return node.nodeName === 'TEXTAREA';\n}\n/**\n * Calculate the expected ARIA accessible name for given DOM Node. Given DOM Node may be either the\n * \"Root node\" passed to `_computeAriaAccessibleName` or \"Current node\" as result of recursion.\n *\n * @return the accessible name of argument DOM Node\n *\n * @param currentNode node to determine accessible name of\n * @param isDirectlyReferenced true if `currentNode` is the root node to calculate ARIA accessible\n * name of. False if it is a result of recursion.\n */\nfunction _computeAriaAccessibleNameInternal(currentNode, isDirectlyReferenced) {\n    // NOTE: this differs from accname-1.2 specification.\n    //  - Does not implement Step 1. of accname-1.2: '''If `currentNode`'s role prohibits naming,\n    //    return the empty string (\"\")'''.\n    //  - Does not implement Step 2.A. of accname-1.2: '''if current node is hidden and not directly\n    //    referenced by aria-labelledby... return the empty string.'''\n    // acc-name-1.2 Step 2.B.: aria-labelledby\n    if (ssrSafeIsElement(currentNode) && isDirectlyReferenced) {\n        const labelledbyIds = currentNode.getAttribute?.('aria-labelledby')?.split(/\\s+/g) || [];\n        const validIdRefs = labelledbyIds.reduce((validIds, id) => {\n            const elem = document.getElementById(id);\n            if (elem) {\n                validIds.push(elem);\n            }\n            return validIds;\n        }, []);\n        if (validIdRefs.length) {\n            return validIdRefs\n                .map(idRef => {\n                return _computeAriaAccessibleNameInternal(idRef, false);\n            })\n                .join(' ');\n        }\n    }\n    // acc-name-1.2 Step 2.C.: aria-label\n    if (ssrSafeIsElement(currentNode)) {\n        const ariaLabel = currentNode.getAttribute('aria-label')?.trim();\n        if (ariaLabel) {\n            return ariaLabel;\n        }\n    }\n    // acc-name-1.2 Step 2.D. attribute or element that defines a text alternative\n    //\n    // NOTE: this differs from accname-1.2 specification.\n    // Only implements Step 2.D. for `<label>`,`<input/>`, and `<textarea/>` element. Does not\n    // implement other elements that have an attribute or element that defines a text alternative.\n    if (ssrSafeIsHTMLInputElement(currentNode) || ssrSafeIsHTMLTextAreaElement(currentNode)) {\n        // use label with a `for` attribute referencing the current node\n        if (currentNode.labels?.length) {\n            return Array.from(currentNode.labels)\n                .map(x => _computeAriaAccessibleNameInternal(x, false))\n                .join(' ');\n        }\n        // use placeholder if available\n        const placeholder = currentNode.getAttribute('placeholder')?.trim();\n        if (placeholder) {\n            return placeholder;\n        }\n        // use title if available\n        const title = currentNode.getAttribute('title')?.trim();\n        if (title) {\n            return title;\n        }\n    }\n    // NOTE: this differs from accname-1.2 specification.\n    //  - does not implement acc-name-1.2 Step 2.E.: '''if the current node is a control embedded\n    //     within the label... then include the embedded control as part of the text alternative in\n    //     the following manner...'''. Step 2E applies to embedded controls such as textbox, listbox,\n    //     range, etc.\n    //  - does not implement acc-name-1.2 step 2.F.: check that '''role allows name from content''',\n    //    which applies to `currentNode` and its children.\n    //  - does not implement acc-name-1.2 Step 2.F.ii.: '''Check for CSS generated textual content'''\n    //    (e.g. :before and :after).\n    //  - does not implement acc-name-1.2 Step 2.I.: '''if the current node has a Tooltip attribute,\n    //    return its value'''\n    // Return text content with whitespace collapsed into a single space character. Accomplish\n    // acc-name-1.2 steps 2F, 2G, and 2H.\n    return (currentNode.textContent || '').replace(/\\s+/g, ' ').trim();\n}\n\n/**\n * Base class for the individual inputs that can be projected inside a `mat-date-range-input`.\n */\nclass MatDateRangeInputPartBase extends MatDatepickerInputBase {\n    _rangeInput = inject(MatDateRangeInput);\n    _elementRef = inject(ElementRef);\n    _defaultErrorStateMatcher = inject(ErrorStateMatcher);\n    _injector = inject(Injector);\n    _rawValue = signal('', ...(ngDevMode ? [{ debugName: \"_rawValue\" }] : []));\n    _parentForm = inject(NgForm, { optional: true });\n    _parentFormGroup = inject(FormGroupDirective, { optional: true });\n    /**\n     * Form control bound to this input part.\n     * @docs-private\n     */\n    ngControl;\n    _dir = inject(Directionality, { optional: true });\n    _errorStateTracker;\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /** Whether the input is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    constructor() {\n        super();\n        this._errorStateTracker = new _ErrorStateTracker(this._defaultErrorStateMatcher, null, this._parentFormGroup, this._parentForm, this.stateChanges);\n    }\n    ngOnInit() {\n        // We need the date input to provide itself as a `ControlValueAccessor` and a `Validator`, while\n        // injecting its `NgControl` so that the error state is handled correctly. This introduces a\n        // circular dependency, because both `ControlValueAccessor` and `Validator` depend on the input\n        // itself. Usually we can work around it for the CVA, but there's no API to do it for the\n        // validator. We work around it here by injecting the `NgControl` in `ngOnInit`, after\n        // everything has been resolved.\n        const ngControl = this._injector.get(NgControl, null, { optional: true, self: true });\n        if (ngControl) {\n            this.ngControl = ngControl;\n            this._errorStateTracker.ngControl = ngControl;\n        }\n    }\n    ngAfterContentInit() {\n        this._register();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        this._rawValue.set(this._elementRef.nativeElement.value);\n    }\n    /** Gets whether the input is empty. */\n    isEmpty() {\n        return this._rawValue().length === 0;\n    }\n    /** Gets the placeholder of the input. */\n    _getPlaceholder() {\n        return this._elementRef.nativeElement.placeholder;\n    }\n    /** Focuses the input. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /** Gets the value that should be used when mirroring the input's size. */\n    getMirrorValue() {\n        const value = this._rawValue();\n        return value.length > 0 ? value : this._getPlaceholder();\n    }\n    /** Refreshes the error state of the input. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Handles `input` events on the input element. */\n    _onInput(event) {\n        super._onInput(event);\n        this._rangeInput._handleChildValueChange();\n    }\n    /** Opens the datepicker associated with the input. */\n    _openPopup() {\n        this._rangeInput._openDatepicker();\n    }\n    /** Gets the minimum date from the range input. */\n    _getMinDate() {\n        return this._rangeInput.min;\n    }\n    /** Gets the maximum date from the range input. */\n    _getMaxDate() {\n        return this._rangeInput.max;\n    }\n    /** Gets the date filter function from the range input. */\n    _getDateFilter() {\n        return this._rangeInput.dateFilter;\n    }\n    _parentDisabled() {\n        return this._rangeInput._groupDisabled;\n    }\n    _shouldHandleChangeEvent({ source }) {\n        return source !== this._rangeInput._startInput && source !== this._rangeInput._endInput;\n    }\n    _assignValueProgrammatically(value) {\n        super._assignValueProgrammatically(value);\n        const opposite = (this === this._rangeInput._startInput\n            ? this._rangeInput._endInput\n            : this._rangeInput._startInput);\n        opposite?._validatorOnChange();\n        this._rawValue.set(this._elementRef.nativeElement.value);\n    }\n    _formatValue(value) {\n        super._formatValue(value);\n        // Any time the input value is reformatted we need to tell the parent.\n        this._rangeInput._handleChildValueChange();\n    }\n    /** return the ARIA accessible name of the input element */\n    _getAccessibleName() {\n        return _computeAriaAccessibleName(this._elementRef.nativeElement);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDateRangeInputPartBase, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatDateRangeInputPartBase, isStandalone: true, inputs: { errorStateMatcher: \"errorStateMatcher\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDateRangeInputPartBase, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [], propDecorators: { errorStateMatcher: [{\n                type: Input\n            }] } });\n/** Input for entering the start date in a `mat-date-range-input`. */\nclass MatStartDate extends MatDateRangeInputPartBase {\n    /** Validator that checks that the start date isn't after the end date. */\n    _startValidator = (control) => {\n        const start = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n        const end = this._model ? this._model.selection.end : null;\n        return !start || !end || this._dateAdapter.compareDate(start, end) <= 0\n            ? null\n            : { 'matStartDateInvalid': { 'end': end, 'actual': start } };\n    };\n    _validator = Validators.compose([...super._getValidators(), this._startValidator]);\n    _register() {\n        this._rangeInput._startInput = this;\n    }\n    _getValueFromModel(modelValue) {\n        return modelValue.start;\n    }\n    _shouldHandleChangeEvent(change) {\n        if (!super._shouldHandleChangeEvent(change)) {\n            return false;\n        }\n        else {\n            return !change.oldValue?.start\n                ? !!change.selection.start\n                : !change.selection.start ||\n                    !!this._dateAdapter.compareDate(change.oldValue.start, change.selection.start);\n        }\n    }\n    _assignValueToModel(value) {\n        if (this._model) {\n            const range = new DateRange(value, this._model.selection.end);\n            this._model.updateSelection(range, this);\n            this._rangeInput._handleChildValueChange();\n        }\n    }\n    _onKeydown(event) {\n        const endInput = this._rangeInput._endInput;\n        const element = this._elementRef.nativeElement;\n        const isLtr = this._dir?.value !== 'rtl';\n        // If the user hits RIGHT (LTR) when at the end of the input (and no\n        // selection), move the cursor to the start of the end input.\n        if (((event.keyCode === RIGHT_ARROW && isLtr) || (event.keyCode === LEFT_ARROW && !isLtr)) &&\n            element.selectionStart === element.value.length &&\n            element.selectionEnd === element.value.length) {\n            event.preventDefault();\n            endInput._elementRef.nativeElement.setSelectionRange(0, 0);\n            endInput.focus();\n        }\n        else {\n            super._onKeydown(event);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatStartDate, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatStartDate, isStandalone: true, selector: \"input[matStartDate]\", outputs: { dateChange: \"dateChange\", dateInput: \"dateInput\" }, host: { attributes: { \"type\": \"text\" }, listeners: { \"input\": \"_onInput($event)\", \"change\": \"_onChange()\", \"keydown\": \"_onKeydown($event)\", \"blur\": \"_onBlur()\" }, properties: { \"disabled\": \"disabled\", \"attr.aria-haspopup\": \"_rangeInput.rangePicker ? \\\"dialog\\\" : null\", \"attr.aria-owns\": \"_rangeInput._ariaOwns() || null\", \"attr.min\": \"_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()!) : null\", \"attr.max\": \"_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()!) : null\" }, classAttribute: \"mat-start-date mat-date-range-input-inner\" }, providers: [\n            { provide: NG_VALUE_ACCESSOR, useExisting: MatStartDate, multi: true },\n            { provide: NG_VALIDATORS, useExisting: MatStartDate, multi: true },\n        ], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatStartDate, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matStartDate]',\n                    host: {\n                        'class': 'mat-start-date mat-date-range-input-inner',\n                        '[disabled]': 'disabled',\n                        '(input)': '_onInput($event)',\n                        '(change)': '_onChange()',\n                        '(keydown)': '_onKeydown($event)',\n                        '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n                        '[attr.aria-owns]': '_rangeInput._ariaOwns() || null',\n                        '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()!) : null',\n                        '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()!) : null',\n                        '(blur)': '_onBlur()',\n                        'type': 'text',\n                    },\n                    providers: [\n                        { provide: NG_VALUE_ACCESSOR, useExisting: MatStartDate, multi: true },\n                        { provide: NG_VALIDATORS, useExisting: MatStartDate, multi: true },\n                    ],\n                    // These need to be specified explicitly, because some tooling doesn't\n                    // seem to pick them up from the base class. See #20932.\n                    outputs: ['dateChange', 'dateInput'],\n                }]\n        }] });\n/** Input for entering the end date in a `mat-date-range-input`. */\nclass MatEndDate extends MatDateRangeInputPartBase {\n    /** Validator that checks that the end date isn't before the start date. */\n    _endValidator = (control) => {\n        const end = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n        const start = this._model ? this._model.selection.start : null;\n        return !end || !start || this._dateAdapter.compareDate(end, start) >= 0\n            ? null\n            : { 'matEndDateInvalid': { 'start': start, 'actual': end } };\n    };\n    _register() {\n        this._rangeInput._endInput = this;\n    }\n    _validator = Validators.compose([...super._getValidators(), this._endValidator]);\n    _getValueFromModel(modelValue) {\n        return modelValue.end;\n    }\n    _shouldHandleChangeEvent(change) {\n        if (!super._shouldHandleChangeEvent(change)) {\n            return false;\n        }\n        else {\n            return !change.oldValue?.end\n                ? !!change.selection.end\n                : !change.selection.end ||\n                    !!this._dateAdapter.compareDate(change.oldValue.end, change.selection.end);\n        }\n    }\n    _assignValueToModel(value) {\n        if (this._model) {\n            const range = new DateRange(this._model.selection.start, value);\n            this._model.updateSelection(range, this);\n        }\n    }\n    _moveCaretToEndOfStartInput() {\n        const startInput = this._rangeInput._startInput._elementRef.nativeElement;\n        const value = startInput.value;\n        if (value.length > 0) {\n            startInput.setSelectionRange(value.length, value.length);\n        }\n        startInput.focus();\n    }\n    _onKeydown(event) {\n        const element = this._elementRef.nativeElement;\n        const isLtr = this._dir?.value !== 'rtl';\n        // If the user is pressing backspace on an empty end input, move focus back to the start.\n        if (event.keyCode === BACKSPACE && !element.value) {\n            this._moveCaretToEndOfStartInput();\n        }\n        // If the user hits LEFT (LTR) when at the start of the input (and no\n        // selection), move the cursor to the end of the start input.\n        else if (((event.keyCode === LEFT_ARROW && isLtr) || (event.keyCode === RIGHT_ARROW && !isLtr)) &&\n            element.selectionStart === 0 &&\n            element.selectionEnd === 0) {\n            event.preventDefault();\n            this._moveCaretToEndOfStartInput();\n        }\n        else {\n            super._onKeydown(event);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatEndDate, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatEndDate, isStandalone: true, selector: \"input[matEndDate]\", outputs: { dateChange: \"dateChange\", dateInput: \"dateInput\" }, host: { attributes: { \"type\": \"text\" }, listeners: { \"input\": \"_onInput($event)\", \"change\": \"_onChange()\", \"keydown\": \"_onKeydown($event)\", \"blur\": \"_onBlur()\" }, properties: { \"disabled\": \"disabled\", \"attr.aria-haspopup\": \"_rangeInput.rangePicker ? \\\"dialog\\\" : null\", \"attr.aria-owns\": \"_rangeInput._ariaOwns() || null\", \"attr.min\": \"_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()!) : null\", \"attr.max\": \"_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()!) : null\" }, classAttribute: \"mat-end-date mat-date-range-input-inner\" }, providers: [\n            { provide: NG_VALUE_ACCESSOR, useExisting: MatEndDate, multi: true },\n            { provide: NG_VALIDATORS, useExisting: MatEndDate, multi: true },\n        ], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatEndDate, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matEndDate]',\n                    host: {\n                        'class': 'mat-end-date mat-date-range-input-inner',\n                        '[disabled]': 'disabled',\n                        '(input)': '_onInput($event)',\n                        '(change)': '_onChange()',\n                        '(keydown)': '_onKeydown($event)',\n                        '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n                        '[attr.aria-owns]': '_rangeInput._ariaOwns() || null',\n                        '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()!) : null',\n                        '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()!) : null',\n                        '(blur)': '_onBlur()',\n                        'type': 'text',\n                    },\n                    providers: [\n                        { provide: NG_VALUE_ACCESSOR, useExisting: MatEndDate, multi: true },\n                        { provide: NG_VALIDATORS, useExisting: MatEndDate, multi: true },\n                    ],\n                    // These need to be specified explicitly, because some tooling doesn't\n                    // seem to pick them up from the base class. See #20932.\n                    outputs: ['dateChange', 'dateInput'],\n                }]\n        }] });\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDateRangePicker\"). We can change this to a\n// directive if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the date range picker popup/dialog. */\nclass MatDateRangePicker extends MatDatepickerBase {\n    _forwardContentValues(instance) {\n        super._forwardContentValues(instance);\n        const input = this.datepickerInput;\n        if (input) {\n            instance.comparisonStart = input.comparisonStart;\n            instance.comparisonEnd = input.comparisonEnd;\n            instance.startDateAccessibleName = input._getStartDateAccessibleName();\n            instance.endDateAccessibleName = input._getEndDateAccessibleName();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDateRangePicker, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatDateRangePicker, isStandalone: true, selector: \"mat-date-range-picker\", providers: [\n            MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER,\n            MAT_CALENDAR_RANGE_STRATEGY_PROVIDER,\n            { provide: MatDatepickerBase, useExisting: MatDateRangePicker },\n        ], exportAs: [\"matDateRangePicker\"], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDateRangePicker, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-date-range-picker',\n                    template: '',\n                    exportAs: 'matDateRangePicker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER,\n                        MAT_CALENDAR_RANGE_STRATEGY_PROVIDER,\n                        { provide: MatDatepickerBase, useExisting: MatDateRangePicker },\n                    ],\n                }]\n        }] });\n\n/** Button that will close the datepicker and assign the current selection to the data model. */\nclass MatDatepickerApply {\n    _datepicker = inject(MatDatepickerBase);\n    constructor() { }\n    _applySelection() {\n        this._datepicker._applyPendingSelection();\n        this._datepicker.close();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerApply, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatDatepickerApply, isStandalone: true, selector: \"[matDatepickerApply], [matDateRangePickerApply]\", host: { listeners: { \"click\": \"_applySelection()\" } }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerApply, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matDatepickerApply], [matDateRangePickerApply]',\n                    host: { '(click)': '_applySelection()' },\n                }]\n        }], ctorParameters: () => [] });\n/** Button that will close the datepicker and discard the current selection. */\nclass MatDatepickerCancel {\n    _datepicker = inject(MatDatepickerBase);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerCancel, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatDatepickerCancel, isStandalone: true, selector: \"[matDatepickerCancel], [matDateRangePickerCancel]\", host: { listeners: { \"click\": \"_datepicker.close()\" } }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerCancel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matDatepickerCancel], [matDateRangePickerCancel]',\n                    host: { '(click)': '_datepicker.close()' },\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Container that can be used to project a row of action buttons\n * to the bottom of a datepicker or date range picker.\n */\nclass MatDatepickerActions {\n    _datepicker = inject(MatDatepickerBase);\n    _viewContainerRef = inject(ViewContainerRef);\n    _template;\n    _portal;\n    constructor() { }\n    ngAfterViewInit() {\n        this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        this._datepicker.registerActions(this._portal);\n    }\n    ngOnDestroy() {\n        this._datepicker.removeActions(this._portal);\n        // Needs to be null checked since we initialize it in `ngAfterViewInit`.\n        if (this._portal && this._portal.isAttached) {\n            this._portal?.detach();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerActions, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatDatepickerActions, isStandalone: true, selector: \"mat-datepicker-actions, mat-date-range-picker-actions\", viewQueries: [{ propertyName: \"_template\", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0, template: `\n    <ng-template>\n      <div class=\"mat-datepicker-actions\">\n        <ng-content></ng-content>\n      </div>\n    </ng-template>\n  `, isInline: true, styles: [\".mat-datepicker-actions{display:flex;justify-content:flex-end;align-items:center;padding:0 8px 8px 8px}.mat-datepicker-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-datepicker-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerActions, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-datepicker-actions, mat-date-range-picker-actions', template: `\n    <ng-template>\n      <div class=\"mat-datepicker-actions\">\n        <ng-content></ng-content>\n      </div>\n    </ng-template>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".mat-datepicker-actions{display:flex;justify-content:flex-end;align-items:center;padding:0 8px 8px 8px}.mat-datepicker-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-datepicker-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { _template: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }] } });\n\nclass MatDatepickerModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerModule, imports: [MatButtonModule,\n            OverlayModule,\n            A11yModule,\n            PortalModule,\n            MatCommonModule,\n            MatCalendar,\n            MatCalendarBody,\n            MatDatepicker,\n            MatDatepickerContent,\n            MatDatepickerInput,\n            MatDatepickerToggle,\n            MatDatepickerToggleIcon,\n            MatMonthView,\n            MatYearView,\n            MatMultiYearView,\n            MatCalendarHeader,\n            MatDateRangeInput,\n            MatStartDate,\n            MatEndDate,\n            MatDateRangePicker,\n            MatDatepickerActions,\n            MatDatepickerCancel,\n            MatDatepickerApply], exports: [CdkScrollableModule,\n            MatCalendar,\n            MatCalendarBody,\n            MatDatepicker,\n            MatDatepickerContent,\n            MatDatepickerInput,\n            MatDatepickerToggle,\n            MatDatepickerToggleIcon,\n            MatMonthView,\n            MatYearView,\n            MatMultiYearView,\n            MatCalendarHeader,\n            MatDateRangeInput,\n            MatStartDate,\n            MatEndDate,\n            MatDateRangePicker,\n            MatDatepickerActions,\n            MatDatepickerCancel,\n            MatDatepickerApply] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerModule, providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [MatButtonModule,\n            OverlayModule,\n            A11yModule,\n            PortalModule,\n            MatCommonModule,\n            MatDatepickerContent,\n            MatDatepickerToggle,\n            MatCalendarHeader, CdkScrollableModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatDatepickerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatButtonModule,\n                        OverlayModule,\n                        A11yModule,\n                        PortalModule,\n                        MatCommonModule,\n                        MatCalendar,\n                        MatCalendarBody,\n                        MatDatepicker,\n                        MatDatepickerContent,\n                        MatDatepickerInput,\n                        MatDatepickerToggle,\n                        MatDatepickerToggleIcon,\n                        MatMonthView,\n                        MatYearView,\n                        MatMultiYearView,\n                        MatCalendarHeader,\n                        MatDateRangeInput,\n                        MatStartDate,\n                        MatEndDate,\n                        MatDateRangePicker,\n                        MatDatepickerActions,\n                        MatDatepickerCancel,\n                        MatDatepickerApply,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCalendar,\n                        MatCalendarBody,\n                        MatDatepicker,\n                        MatDatepickerContent,\n                        MatDatepickerInput,\n                        MatDatepickerToggle,\n                        MatDatepickerToggleIcon,\n                        MatMonthView,\n                        MatYearView,\n                        MatMultiYearView,\n                        MatCalendarHeader,\n                        MatDateRangeInput,\n                        MatStartDate,\n                        MatEndDate,\n                        MatDateRangePicker,\n                        MatDatepickerActions,\n                        MatDatepickerCancel,\n                        MatDatepickerApply,\n                    ],\n                    providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst matDatepickerAnimations = {\n    // Represents:\n    // trigger('transformPanel', [\n    //   transition(\n    //     'void => enter-dropdown',\n    //     animate(\n    //       '120ms cubic-bezier(0, 0, 0.2, 1)',\n    //       keyframes([\n    //         style({opacity: 0, transform: 'scale(1, 0.8)'}),\n    //         style({opacity: 1, transform: 'scale(1, 1)'}),\n    //       ]),\n    //     ),\n    //   ),\n    //   transition(\n    //     'void => enter-dialog',\n    //     animate(\n    //       '150ms cubic-bezier(0, 0, 0.2, 1)',\n    //       keyframes([\n    //         style({opacity: 0, transform: 'scale(0.7)'}),\n    //         style({transform: 'none', opacity: 1}),\n    //       ]),\n    //     ),\n    //   ),\n    //   transition('* => void', animate('100ms linear', style({opacity: 0}))),\n    // ])\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: {\n        type: 7,\n        name: 'transformPanel',\n        definitions: [\n            {\n                type: 1,\n                expr: 'void => enter-dropdown',\n                animation: {\n                    type: 4,\n                    styles: {\n                        type: 5,\n                        steps: [\n                            { type: 6, styles: { opacity: 0, transform: 'scale(1, 0.8)' }, offset: null },\n                            { type: 6, styles: { opacity: 1, transform: 'scale(1, 1)' }, offset: null },\n                        ],\n                    },\n                    timings: '120ms cubic-bezier(0, 0, 0.2, 1)',\n                },\n                options: null,\n            },\n            {\n                type: 1,\n                expr: 'void => enter-dialog',\n                animation: {\n                    type: 4,\n                    styles: {\n                        type: 5,\n                        steps: [\n                            { type: 6, styles: { opacity: 0, transform: 'scale(0.7)' }, offset: null },\n                            { type: 6, styles: { transform: 'none', opacity: 1 }, offset: null },\n                        ],\n                    },\n                    timings: '150ms cubic-bezier(0, 0, 0.2, 1)',\n                },\n                options: null,\n            },\n            {\n                type: 1,\n                expr: '* => void',\n                animation: {\n                    type: 4,\n                    styles: { type: 6, styles: { opacity: 0 }, offset: null },\n                    timings: '100ms linear',\n                },\n                options: null,\n            },\n        ],\n        options: {},\n    },\n    // Represents:\n    // trigger('fadeInCalendar', [\n    //   state('void', style({opacity: 0})),\n    //   state('enter', style({opacity: 1})),\n    //   // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    //   // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    //   transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')),\n    // ])\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: {\n        type: 7,\n        name: 'fadeInCalendar',\n        definitions: [\n            { type: 0, name: 'void', styles: { type: 6, styles: { opacity: 0 }, offset: null } },\n            { type: 0, name: 'enter', styles: { type: 6, styles: { opacity: 1 }, offset: null } },\n            {\n                type: 1,\n                expr: 'void => *',\n                animation: {\n                    type: 4,\n                    styles: null,\n                    timings: '120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n                },\n                options: null,\n            },\n        ],\n        options: {},\n    },\n};\n\nexport { DateRange, DefaultMatCalendarRangeStrategy, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_DATEPICKER_VALIDATORS, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATE_RANGE_SELECTION_STRATEGY, MAT_RANGE_DATE_SELECTION_MODEL_FACTORY, MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY, MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, MatCalendar, MatCalendarBody, MatCalendarCell, MatCalendarHeader, MatDateRangeInput, MatDateRangePicker, MatDateSelectionModel, MatDatepicker, MatDatepickerActions, MatDatepickerApply, MatDatepickerCancel, MatDatepickerContent, MatDatepickerInput, MatDatepickerInputEvent, MatDatepickerIntl, MatDatepickerModule, MatDatepickerToggle, MatDatepickerToggleIcon, MatEndDate, MatMonthView, MatMultiYearView, MatRangeDateSelectionModel, MatSingleDateSelectionModel, MatStartDate, MatYearView, matDatepickerAnimations, yearsPerPage, yearsPerRow };\n"],"mappings":"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,CAAC;MACN5hB,IAAI,EAAElP;IACV,CAAC,CAAC;IAAEmwB,QAAQ,EAAE,CAAC;MACXjhB,IAAI,EAAElP,KAAK;MACXmP,IAAI,EAAE,CAAC;QAAEylB,SAAS,EAAEn0B;MAAiB,CAAC;IAC1C,CAAC,CAAC;IAAEk8B,SAAS,EAAE,CAAC;MACZztB,IAAI,EAAElP;IACV,CAAC,CAAC;IAAEmL,eAAe,EAAE,CAAC;MAClB+D,IAAI,EAAElP;IACV,CAAC,CAAC;IAAEoL,aAAa,EAAE,CAAC;MAChB8D,IAAI,EAAElP;IACV,CAAC;EAAE,CAAC;AAAA;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0/B,0BAA0BA,CAACxtB,OAAO,EAAE;EACzC,OAAOytB,kCAAkC,CAACztB,OAAO,EAAE,IAAI,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA,SAAS0tB,gBAAgBA,CAAC9oB,IAAI,EAAE;EAC5B,OAAOA,IAAI,CAAC+oB,QAAQ,KAAKC,IAAI,CAACC,YAAY;AAC9C;AACA;AACA;AACA;AACA;AACA,SAASC,yBAAyBA,CAAClpB,IAAI,EAAE;EACrC,OAAOA,IAAI,CAACC,QAAQ,KAAK,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA,SAASkpB,4BAA4BA,CAACnpB,IAAI,EAAE;EACxC,OAAOA,IAAI,CAACC,QAAQ,KAAK,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4oB,kCAAkCA,CAACO,WAAW,EAAEC,oBAAoB,EAAE;EAC3E;EACA;EACA;EACA;EACA;EACA;EACA,IAAIP,gBAAgB,CAACM,WAAW,CAAC,IAAIC,oBAAoB,EAAE;IACvD,MAAMC,aAAa,GA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}