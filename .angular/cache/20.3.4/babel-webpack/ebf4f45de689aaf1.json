{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\n// Import necessário para o tap operator\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PrivacyService {\n  http;\n  API_URL = environment.apiUrl;\n  consentimentoSubject = new BehaviorSubject(null);\n  consentimento$ = this.consentimentoSubject.asObservable();\n  constructor(http) {\n    this.http = http;\n    this.carregarStatusConsentimento();\n  }\n  /**\n   * Registra consentimento LGPD\n   */\n  registrarConsentimento(consentimento) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.API_URL}/privacy/consentimento`, consentimento, {\n      headers\n    }).pipe(tap(() => {\n      // Recarregar status após registrar consentimento\n      this.carregarStatusConsentimento();\n    }));\n  }\n  /**\n   * Obtém dados pessoais do usuário\n   */\n  obterDadosPessoais() {\n    return this.http.get(`${this.API_URL}/privacy/dados-pessoais`);\n  }\n  /**\n   * Exporta todos os dados do usuário\n   */\n  exportarDados() {\n    return this.http.get(`${this.API_URL}/privacy/exportar-dados`);\n  }\n  /**\n   * Solicita exclusão de dados\n   */\n  solicitarExclusao() {\n    return this.http.post(`${this.API_URL}/privacy/solicitar-exclusao`, {});\n  }\n  /**\n   * Confirma exclusão de dados\n   */\n  confirmarExclusao(usuarioId) {\n    return this.http.post(`${this.API_URL}/privacy/confirmar-exclusao/${usuarioId}`, {});\n  }\n  /**\n   * Obtém status de consentimento\n   */\n  obterStatusConsentimento() {\n    return this.http.get(`${this.API_URL}/privacy/status-consentimento`);\n  }\n  /**\n   * Gera relatório de dados pessoais\n   */\n  gerarRelatorioDados() {\n    return this.http.get(`${this.API_URL}/privacy/relatorio-dados`);\n  }\n  /**\n   * Carrega status de consentimento automaticamente\n   */\n  carregarStatusConsentimento() {\n    this.obterStatusConsentimento().subscribe({\n      next: status => {\n        this.consentimentoSubject.next(status);\n      },\n      error: error => {\n        console.warn('Erro ao carregar status de consentimento:', error);\n        // Não falha silenciosamente, apenas loga o erro\n      }\n    });\n  }\n  /**\n   * Obtém status atual de consentimento\n   */\n  getStatusConsentimento() {\n    return this.consentimentoSubject.value;\n  }\n  /**\n   * Verifica se tem consentimento LGPD\n   */\n  temConsentimentoLGPD() {\n    const status = this.getStatusConsentimento();\n    return status?.consentimentoLGPD === true;\n  }\n  /**\n   * Verifica se tem consentimento de marketing\n   */\n  temConsentimentoMarketing() {\n    const status = this.getStatusConsentimento();\n    return status?.consentimentoMarketing === true;\n  }\n  /**\n   * Verifica se tem consentimento de analytics\n   */\n  temConsentimentoAnalytics() {\n    const status = this.getStatusConsentimento();\n    return status?.consentimentoAnalytics === true;\n  }\n  /**\n   * Verifica se está em processo de exclusão\n   */\n  estaEmProcessoExclusao() {\n    const status = this.getStatusConsentimento();\n    return status?.statusExclusao === 'PENDENTE_EXCLUSAO' || status?.statusExclusao === 'EXCLUIDO';\n  }\n  /**\n   * Baixa dados exportados como arquivo JSON\n   */\n  baixarDadosExportados() {\n    this.exportarDados().subscribe({\n      next: dados => {\n        const dataStr = JSON.stringify(dados, null, 2);\n        const dataBlob = new Blob([dataStr], {\n          type: 'application/json'\n        });\n        const url = window.URL.createObjectURL(dataBlob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `meus-dados-formsync-${new Date().toISOString().split('T')[0]}.json`;\n        link.click();\n        window.URL.revokeObjectURL(url);\n      },\n      error: error => {\n        console.error('Erro ao exportar dados:', error);\n        alert('Erro ao exportar dados. Tente novamente.');\n      }\n    });\n  }\n  /**\n   * Atualiza status de consentimento localmente\n   */\n  atualizarStatusLocal(status) {\n    this.consentimentoSubject.next(status);\n  }\n  static ɵfac = function PrivacyService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PrivacyService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PrivacyService,\n    factory: PrivacyService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","HttpHeaders","BehaviorSubject","environment","tap","PrivacyService","http","API_URL","apiUrl","consentimentoSubject","consentimento$","asObservable","constructor","carregarStatusConsentimento","registrarConsentimento","consentimento","headers","post","pipe","obterDadosPessoais","get","exportarDados","solicitarExclusao","confirmarExclusao","usuarioId","obterStatusConsentimento","gerarRelatorioDados","subscribe","next","status","error","console","warn","getStatusConsentimento","value","temConsentimentoLGPD","consentimentoLGPD","temConsentimentoMarketing","consentimentoMarketing","temConsentimentoAnalytics","consentimentoAnalytics","estaEmProcessoExclusao","statusExclusao","baixarDadosExportados","dados","dataStr","JSON","stringify","dataBlob","Blob","type","url","window","URL","createObjectURL","link","document","createElement","href","download","Date","toISOString","split","click","revokeObjectURL","alert","atualizarStatusLocal","i0","ɵɵinject","i1","factory","ɵfac","providedIn"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/src/app/services/privacy.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nexport interface ConsentimentoLGPD {\n  tipoDado: 'LGPD' | 'MARKETING' | 'ANALYTICS';\n  consentimento: boolean;\n}\n\nexport interface DadosPessoais {\n  id: number;\n  nome: string;\n  email: string;\n  plano: string;\n  dataCriacao: string;\n  dataAtualizacao: string;\n  consentimentoLGPD: boolean;\n  consentimentoMarketing: boolean;\n  consentimentoAnalytics: boolean;\n  dataConsentimento: string;\n  statusExclusao: string;\n}\n\nexport interface StatusConsentimento {\n  consentimentoLGPD: boolean;\n  consentimentoMarketing: boolean;\n  consentimentoAnalytics: boolean;\n  dataConsentimento: string;\n  statusExclusao: string;\n  dataExclusao: string;\n}\n\nexport interface DadosExportados {\n  dadosPessoais: DadosPessoais;\n  templates: any[];\n  campos: any[];\n  historicoPreenchimentos: any[];\n  metadados: {\n    dataExportacao: string;\n    versaoLGPD: string;\n    totalTemplates: number;\n    totalCampos: number;\n    totalPreenchimentos: number;\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PrivacyService {\n  private API_URL = environment.apiUrl;\n  private consentimentoSubject = new BehaviorSubject<StatusConsentimento | null>(null);\n  public consentimento$ = this.consentimentoSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.carregarStatusConsentimento();\n  }\n\n  /**\n   * Registra consentimento LGPD\n   */\n  registrarConsentimento(consentimento: ConsentimentoLGPD): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http.post(`${this.API_URL}/privacy/consentimento`, consentimento, { headers })\n      .pipe(\n        tap(() => {\n          // Recarregar status após registrar consentimento\n          this.carregarStatusConsentimento();\n        })\n      );\n  }\n\n  /**\n   * Obtém dados pessoais do usuário\n   */\n  obterDadosPessoais(): Observable<any> {\n    return this.http.get(`${this.API_URL}/privacy/dados-pessoais`);\n  }\n\n  /**\n   * Exporta todos os dados do usuário\n   */\n  exportarDados(): Observable<DadosExportados> {\n    return this.http.get<DadosExportados>(`${this.API_URL}/privacy/exportar-dados`);\n  }\n\n  /**\n   * Solicita exclusão de dados\n   */\n  solicitarExclusao(): Observable<any> {\n    return this.http.post(`${this.API_URL}/privacy/solicitar-exclusao`, {});\n  }\n\n  /**\n   * Confirma exclusão de dados\n   */\n  confirmarExclusao(usuarioId: number): Observable<any> {\n    return this.http.post(`${this.API_URL}/privacy/confirmar-exclusao/${usuarioId}`, {});\n  }\n\n  /**\n   * Obtém status de consentimento\n   */\n  obterStatusConsentimento(): Observable<StatusConsentimento> {\n    return this.http.get<StatusConsentimento>(`${this.API_URL}/privacy/status-consentimento`);\n  }\n\n  /**\n   * Gera relatório de dados pessoais\n   */\n  gerarRelatorioDados(): Observable<any> {\n    return this.http.get(`${this.API_URL}/privacy/relatorio-dados`);\n  }\n\n  /**\n   * Carrega status de consentimento automaticamente\n   */\n  private carregarStatusConsentimento(): void {\n    this.obterStatusConsentimento().subscribe({\n      next: (status) => {\n        this.consentimentoSubject.next(status);\n      },\n      error: (error) => {\n        console.warn('Erro ao carregar status de consentimento:', error);\n        // Não falha silenciosamente, apenas loga o erro\n      }\n    });\n  }\n\n  /**\n   * Obtém status atual de consentimento\n   */\n  getStatusConsentimento(): StatusConsentimento | null {\n    return this.consentimentoSubject.value;\n  }\n\n  /**\n   * Verifica se tem consentimento LGPD\n   */\n  temConsentimentoLGPD(): boolean {\n    const status = this.getStatusConsentimento();\n    return status?.consentimentoLGPD === true;\n  }\n\n  /**\n   * Verifica se tem consentimento de marketing\n   */\n  temConsentimentoMarketing(): boolean {\n    const status = this.getStatusConsentimento();\n    return status?.consentimentoMarketing === true;\n  }\n\n  /**\n   * Verifica se tem consentimento de analytics\n   */\n  temConsentimentoAnalytics(): boolean {\n    const status = this.getStatusConsentimento();\n    return status?.consentimentoAnalytics === true;\n  }\n\n  /**\n   * Verifica se está em processo de exclusão\n   */\n  estaEmProcessoExclusao(): boolean {\n    const status = this.getStatusConsentimento();\n    return status?.statusExclusao === 'PENDENTE_EXCLUSAO' || status?.statusExclusao === 'EXCLUIDO';\n  }\n\n  /**\n   * Baixa dados exportados como arquivo JSON\n   */\n  baixarDadosExportados(): void {\n    this.exportarDados().subscribe({\n      next: (dados) => {\n        const dataStr = JSON.stringify(dados, null, 2);\n        const dataBlob = new Blob([dataStr], { type: 'application/json' });\n        const url = window.URL.createObjectURL(dataBlob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `meus-dados-formsync-${new Date().toISOString().split('T')[0]}.json`;\n        link.click();\n        window.URL.revokeObjectURL(url);\n      },\n      error: (error) => {\n        console.error('Erro ao exportar dados:', error);\n        alert('Erro ao exportar dados. Tente novamente.');\n      }\n    });\n  }\n\n  /**\n   * Atualiza status de consentimento localmente\n   */\n  atualizarStatusLocal(status: StatusConsentimento): void {\n    this.consentimentoSubject.next(status);\n  }\n}\n\n// Import necessário para o tap operator\nimport { tap } from 'rxjs/operators';\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}