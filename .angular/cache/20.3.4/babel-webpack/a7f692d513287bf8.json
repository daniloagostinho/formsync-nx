{"ast":null,"code":"import { _IdGenerator, FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { forwardRef, InjectionToken, inject, ChangeDetectorRef, EventEmitter, booleanAttribute, Directive, Output, ContentChildren, Input, ElementRef, NgZone, Renderer2, Injector, HostAttributeToken, numberAttribute, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { _animationsDisabled } from './animation.mjs';\nimport { _StructuralStylesLoader } from './structural-styles.mjs';\nimport { MatRipple } from './ripple.mjs';\nimport { _MatInternalFormField } from './internal-form-field.mjs';\nimport { MatCommonModule } from './common-module.mjs';\nimport { MatRippleModule } from './ripple-module.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/platform';\nimport '@angular/cdk/coercion';\nimport '@angular/cdk/bidi';\n\n/** Change event object emitted by radio button and radio group. */\nconst _c0 = [\"input\"];\nconst _c1 = [\"formField\"];\nconst _c2 = [\"*\"];\nclass MatRadioChange {\n  source;\n  value;\n  constructor(/** The radio button that emits the change event. */\n  source, /** The value of the radio button. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent',\n    disabledInteractive: false\n  };\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup {\n  _changeDetector = inject(ChangeDetectorRef);\n  /** Selected value for the radio group. */\n  _value = null;\n  /** The HTML name attribute applied to radio buttons in this group. */\n  _name = inject(_IdGenerator).getId('mat-radio-group-');\n  /** The currently selected radio button. Should match value. */\n  _selected = null;\n  /** Whether the `value` has been set to its initial value. */\n  _isInitialized = false;\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  _labelPosition = 'after';\n  /** Whether the radio group is disabled. */\n  _disabled = false;\n  /** Whether the radio group is required. */\n  _required = false;\n  /** Subscription to changes in amount of radio buttons. */\n  _buttonChanges;\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn = () => {};\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched = () => {};\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  change = new EventEmitter();\n  /** Child radio buttons. */\n  _radios;\n  /**\n   * Theme color of the radio buttons in the group. This API is supported in M2\n   * themes only, it has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/radio/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  color;\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  get labelPosition() {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  get value() {\n    return this._value;\n  }\n  set value(newValue) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  get selected() {\n    return this._selected;\n  }\n  set selected(selected) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n  /** Whether the radio group is disabled */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = value;\n    this._markRadiosForCheck();\n  }\n  /** Whether the radio group is required */\n  get required() {\n    return this._required;\n  }\n  set required(value) {\n    this._required = value;\n    this._markRadiosForCheck();\n  }\n  /** Whether buttons in the group should be interactive while they're disabled. */\n  get disabledInteractive() {\n    return this._disabledInteractive;\n  }\n  set disabledInteractive(value) {\n    this._disabledInteractive = value;\n    this._markRadiosForCheck();\n  }\n  _disabledInteractive = false;\n  constructor() {}\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n    // Clear the `selected` button when it's destroyed since the tabindex of the rest of the\n    // buttons depends on it. Note that we don't clear the `value`, because the radio button\n    // may be swapped out with a similar one and there are some internal apps that depend on\n    // that behavior.\n    this._buttonChanges = this._radios.changes.subscribe(() => {\n      if (this.selected && !this._radios.find(radio => radio === this.selected)) {\n        this._selected = null;\n      }\n    });\n  }\n  ngOnDestroy() {\n    this._buttonChanges?.unsubscribe();\n  }\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n  _updateRadioButtonNames() {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n  /** Updates the `selected` radio button from the internal _value state. */\n  _updateSelectedRadioFromValue() {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent() {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected, this._value));\n    }\n  }\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n  static ɵfac = function MatRadioGroup_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatRadioGroup)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatRadioGroup,\n    selectors: [[\"mat-radio-group\"]],\n    contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatRadioButton, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._radios = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-mdc-radio-group\"],\n    inputs: {\n      color: \"color\",\n      name: \"name\",\n      labelPosition: \"labelPosition\",\n      value: \"value\",\n      selected: \"selected\",\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n      required: [2, \"required\", \"required\", booleanAttribute],\n      disabledInteractive: [2, \"disabledInteractive\", \"disabledInteractive\", booleanAttribute]\n    },\n    outputs: {\n      change: \"change\"\n    },\n    exportAs: [\"matRadioGroup\"],\n    features: [i0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, {\n      provide: MAT_RADIO_GROUP,\n      useExisting: MatRadioGroup\n    }])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRadioGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-radio-group',\n      exportAs: 'matRadioGroup',\n      providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, {\n        provide: MAT_RADIO_GROUP,\n        useExisting: MatRadioGroup\n      }],\n      host: {\n        'role': 'radiogroup',\n        'class': 'mat-mdc-radio-group'\n      }\n    }]\n  }], () => [], {\n    change: [{\n      type: Output\n    }],\n    _radios: [{\n      type: ContentChildren,\n      args: [forwardRef(() => MatRadioButton), {\n        descendants: true\n      }]\n    }],\n    color: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    required: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    disabledInteractive: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\nclass MatRadioButton {\n  _elementRef = inject(ElementRef);\n  _changeDetector = inject(ChangeDetectorRef);\n  _focusMonitor = inject(FocusMonitor);\n  _radioDispatcher = inject(UniqueSelectionDispatcher);\n  _defaultOptions = inject(MAT_RADIO_DEFAULT_OPTIONS, {\n    optional: true\n  });\n  _ngZone = inject(NgZone);\n  _renderer = inject(Renderer2);\n  _uniqueId = inject(_IdGenerator).getId('mat-radio-');\n  _cleanupClick;\n  /** The unique ID for the radio button. */\n  id = this._uniqueId;\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  name;\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  ariaLabel;\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  ariaLabelledby;\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  ariaDescribedby;\n  /** Whether ripples are disabled inside the radio button */\n  disableRipple = false;\n  /** Tabindex of the radio button. */\n  tabIndex = 0;\n  /** Whether this radio button is checked. */\n  get checked() {\n    return this._checked;\n  }\n  set checked(value) {\n    if (this._checked !== value) {\n      this._checked = value;\n      if (value && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!value && this.radioGroup && this.radioGroup.value === this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n      if (value) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n  /** The value of this radio button. */\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  get labelPosition() {\n    return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  _labelPosition;\n  /** Whether the radio button is disabled. */\n  get disabled() {\n    return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n  }\n  set disabled(value) {\n    this._setDisabled(value);\n  }\n  /** Whether the radio button is required. */\n  get required() {\n    return this._required || this.radioGroup && this.radioGroup.required;\n  }\n  set required(value) {\n    if (value !== this._required) {\n      this._changeDetector.markForCheck();\n    }\n    this._required = value;\n  }\n  /**\n   * Theme color of the radio button. This API is supported in M2 themes only, it\n   * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/radio/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  get color() {\n    // As per M2 design specifications the selection control radio should use the accent color\n    // palette by default. https://m2.material.io/components/radio-buttons#specs\n    return this._color || this.radioGroup && this.radioGroup.color || this._defaultOptions && this._defaultOptions.color || 'accent';\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  _color;\n  /** Whether the radio button should remain interactive when it is disabled. */\n  get disabledInteractive() {\n    return this._disabledInteractive || this.radioGroup !== null && this.radioGroup.disabledInteractive;\n  }\n  set disabledInteractive(value) {\n    this._disabledInteractive = value;\n  }\n  _disabledInteractive;\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  change = new EventEmitter();\n  /** The parent radio group. May or may not be present. */\n  radioGroup;\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /** Whether this radio is checked. */\n  _checked = false;\n  /** Whether this radio is disabled. */\n  _disabled;\n  /** Whether this radio is required. */\n  _required;\n  /** Value assigned to this radio. */\n  _value = null;\n  /** Unregister function for _radioDispatcher */\n  _removeUniqueSelectionListener = () => {};\n  /** Previous value of the input's tabindex. */\n  _previousTabIndex;\n  /** The native `<input type=radio>` element */\n  _inputElement;\n  /** Trigger elements for the ripple events. */\n  _rippleTrigger;\n  /** Whether animations are disabled. */\n  _noopAnimations = _animationsDisabled();\n  _injector = inject(Injector);\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    const radioGroup = inject(MAT_RADIO_GROUP, {\n      optional: true\n    });\n    const tabIndex = inject(new HostAttributeToken('tabindex'), {\n      optional: true\n    });\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n    this._disabledInteractive = this._defaultOptions?.disabledInteractive ?? false;\n    if (tabIndex) {\n      this.tabIndex = numberAttribute(tabIndex, 0);\n    }\n  }\n  /** Focuses the radio button. */\n  focus(options, origin) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      if (this.checked) {\n        this.radioGroup.selected = this;\n      }\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n    this._removeUniqueSelectionListener = this._radioDispatcher.listen((id, name) => {\n      if (id !== this.id && name === this.name) {\n        this.checked = false;\n      }\n    });\n  }\n  ngDoCheck() {\n    this._updateTabIndex();\n  }\n  ngAfterViewInit() {\n    this._updateTabIndex();\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin && this.radioGroup) {\n        this.radioGroup._touch();\n      }\n    });\n    // We bind this outside of the zone, because:\n    // 1. Its logic is completely DOM-related so we can avoid some change detections.\n    // 2. There appear to be some internal tests that break when this triggers a change detection.\n    this._ngZone.runOutsideAngular(() => {\n      this._cleanupClick = this._renderer.listen(this._inputElement.nativeElement, 'click', this._onInputClick);\n    });\n  }\n  ngOnDestroy() {\n    this._cleanupClick?.();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n  /** Dispatch change event with current value. */\n  _emitChangeEvent() {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n  /** Triggered when the radio button receives an interaction from the user. */\n  _onInputInteraction(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n    if (!this.checked && !this.disabled) {\n      const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n      this.checked = true;\n      this._emitChangeEvent();\n      if (this.radioGroup) {\n        this.radioGroup._controlValueAccessorChangeFn(this.value);\n        if (groupValueChanged) {\n          this.radioGroup._emitChangeEvent();\n        }\n      }\n    }\n  }\n  /** Triggered when the user clicks on the touch target. */\n  _onTouchTargetClick(event) {\n    this._onInputInteraction(event);\n    if (!this.disabled || this.disabledInteractive) {\n      // Normally the input should be focused already, but if the click\n      // comes from the touch target, then we might have to focus it ourselves.\n      this._inputElement?.nativeElement.focus();\n    }\n  }\n  /** Sets the disabled state and marks for check if a change occurred. */\n  _setDisabled(value) {\n    if (this._disabled !== value) {\n      this._disabled = value;\n      this._changeDetector.markForCheck();\n    }\n  }\n  /** Called when the input is clicked. */\n  _onInputClick = event => {\n    // If the input is disabled while interactive, we need to prevent the\n    // selection from happening in this event handler. Note that even though\n    // this happens on `click` events, the logic applies when the user is\n    // navigating with the keyboard as well. An alternative way of doing\n    // this is by resetting the `checked` state in the `change` callback but\n    // it isn't optimal, because it can allow a pre-checked disabled button\n    // to be un-checked. This approach seems to cover everything.\n    if (this.disabled && this.disabledInteractive) {\n      event.preventDefault();\n    }\n  };\n  /** Gets the tabindex for the underlying input element. */\n  _updateTabIndex() {\n    const group = this.radioGroup;\n    let value;\n    // Implement a roving tabindex if the button is inside a group. For most cases this isn't\n    // necessary, because the browser handles the tab order for inputs inside a group automatically,\n    // but we need an explicitly higher tabindex for the selected button in order for things like\n    // the focus trap to pick it up correctly.\n    if (!group || !group.selected || this.disabled) {\n      value = this.tabIndex;\n    } else {\n      value = group.selected === this ? this.tabIndex : -1;\n    }\n    if (value !== this._previousTabIndex) {\n      // We have to set the tabindex directly on the DOM node, because it depends on\n      // the selected state which is prone to \"changed after checked errors\".\n      const input = this._inputElement?.nativeElement;\n      if (input) {\n        input.setAttribute('tabindex', value + '');\n        this._previousTabIndex = value;\n        // Wait for any pending tabindex changes to be applied\n        afterNextRender(() => {\n          queueMicrotask(() => {\n            // The radio group uses a \"selection follows focus\" pattern for tab management, so if this\n            // radio button is currently focused and another radio button in the group becomes\n            // selected, we should move focus to the newly selected radio button to maintain\n            // consistency between the focused and selected states.\n            if (group && group.selected && group.selected !== this && document.activeElement === input) {\n              group.selected?._inputElement.nativeElement.focus();\n              // If this radio button still has focus, the selected one must be disabled. In this\n              // case the radio group as a whole should lose focus.\n              if (document.activeElement === input) {\n                this._inputElement.nativeElement.blur();\n              }\n            }\n          });\n        }, {\n          injector: this._injector\n        });\n      }\n    }\n  }\n  static ɵfac = function MatRadioButton_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatRadioButton)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatRadioButton,\n    selectors: [[\"mat-radio-button\"]],\n    viewQuery: function MatRadioButton_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 7, ElementRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._rippleTrigger = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-mdc-radio-button\"],\n    hostVars: 19,\n    hostBindings: function MatRadioButton_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() {\n          return ctx._inputElement.nativeElement.focus();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", null)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        i0.ɵɵclassProp(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\")(\"mat-mdc-radio-checked\", ctx.checked)(\"mat-mdc-radio-disabled\", ctx.disabled)(\"mat-mdc-radio-disabled-interactive\", ctx.disabledInteractive)(\"_mat-animation-noopable\", ctx._noopAnimations);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      name: \"name\",\n      ariaLabel: [0, \"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [0, \"aria-labelledby\", \"ariaLabelledby\"],\n      ariaDescribedby: [0, \"aria-describedby\", \"ariaDescribedby\"],\n      disableRipple: [2, \"disableRipple\", \"disableRipple\", booleanAttribute],\n      tabIndex: [2, \"tabIndex\", \"tabIndex\", value => value == null ? 0 : numberAttribute(value)],\n      checked: [2, \"checked\", \"checked\", booleanAttribute],\n      value: \"value\",\n      labelPosition: \"labelPosition\",\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n      required: [2, \"required\", \"required\", booleanAttribute],\n      color: \"color\",\n      disabledInteractive: [2, \"disabledInteractive\", \"disabledInteractive\", booleanAttribute]\n    },\n    outputs: {\n      change: \"change\"\n    },\n    exportAs: [\"matRadioButton\"],\n    ngContentSelectors: _c2,\n    decls: 13,\n    vars: 17,\n    consts: [[\"formField\", \"\"], [\"input\", \"\"], [\"mat-internal-form-field\", \"\", 3, \"labelPosition\"], [1, \"mdc-radio\"], [1, \"mat-mdc-radio-touch-target\", 3, \"click\"], [\"type\", \"radio\", \"aria-invalid\", \"false\", 1, \"mdc-radio__native-control\", 3, \"change\", \"id\", \"checked\", \"disabled\", \"required\"], [1, \"mdc-radio__background\"], [1, \"mdc-radio__outer-circle\"], [1, \"mdc-radio__inner-circle\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mdc-label\", 3, \"for\"]],\n    template: function MatRadioButton_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 2, 0)(2, \"div\", 3)(3, \"div\", 4);\n        i0.ɵɵlistener(\"click\", function MatRadioButton_Template_div_click_3_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx._onTouchTargetClick($event));\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"input\", 5, 1);\n        i0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_4_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx._onInputInteraction($event));\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 6);\n        i0.ɵɵelement(7, \"div\", 7)(8, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 9);\n        i0.ɵɵelement(10, \"div\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"label\", 11);\n        i0.ɵɵprojection(12);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"labelPosition\", ctx.labelPosition);\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassProp(\"mdc-radio--disabled\", ctx.disabled);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled && !ctx.disabledInteractive)(\"required\", ctx.required);\n        i0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby)(\"aria-disabled\", ctx.disabled && ctx.disabledInteractive ? \"true\" : null);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"matRippleTrigger\", ctx._rippleTrigger.nativeElement)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"for\", ctx.inputId);\n      }\n    },\n    dependencies: [MatRipple, _MatInternalFormField],\n    styles: [\".mat-mdc-radio-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-radio-button .mdc-radio{display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color;padding:calc((var(--mat-radio-state-layer-size, 40px) - 20px)/2)}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:not([disabled]):not(:focus)~.mdc-radio__background::before{opacity:.04;transform:scale(1)}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:not([disabled])~.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-hover-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-hover-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-hover-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-pressed-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-pressed-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-pressed-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mat-mdc-radio-button .mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";transition:opacity 90ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms cubic-bezier(0.4, 0, 0.6, 1);width:var(--mat-radio-state-layer-size, 40px);height:var(--mat-radio-state-layer-size, 40px);top:calc(-1*(var(--mat-radio-state-layer-size, 40px) - 20px)/2);left:calc(-1*(var(--mat-radio-state-layer-size, 40px) - 20px)/2)}.mat-mdc-radio-button .mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0);border-radius:50%;transition:transform 90ms cubic-bezier(0.4, 0, 0.6, 1),background-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}@media(forced-colors: active){.mat-mdc-radio-button .mdc-radio__inner-circle{background-color:CanvasText !important}}.mat-mdc-radio-button .mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;top:0;right:0;left:0;cursor:inherit;z-index:1;width:var(--mat-radio-state-layer-size, 40px);height:var(--mat-radio-state-layer-size, 40px)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__outer-circle{transition:border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__inner-circle{transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-unselected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-unselected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{cursor:default}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface, currentColor));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-focus-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-focus-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle{transform:scale(0.5);transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled{pointer-events:auto}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-unselected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-unselected-icon-opacity, 0.38)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface, currentColor));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__background::before,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__outer-circle,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__inner-circle{transition:none !important}.mat-mdc-radio-button .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button.mat-mdc-radio-checked .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-checked .mdc-radio__background::before{background-color:var(--mat-radio-checked-ripple-color, var(--mat-sys-primary))}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mat-internal-form-field{color:var(--mat-radio-label-text-color, var(--mat-sys-on-surface));font-family:var(--mat-radio-label-text-font, var(--mat-sys-body-medium-font));line-height:var(--mat-radio-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-radio-label-text-size, var(--mat-sys-body-medium-size));letter-spacing:var(--mat-radio-label-text-tracking, var(--mat-sys-body-medium-tracking));font-weight:var(--mat-radio-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-radio-button .mdc-radio--disabled+label{color:var(--mat-radio-disabled-label-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-radio-button .mat-radio-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:50%}.mat-mdc-radio-button .mat-radio-ripple>.mat-ripple-element{opacity:.14}.mat-mdc-radio-button .mat-radio-ripple::before{border-radius:50%}.mat-mdc-radio-button .mdc-radio>.mdc-radio__native-control:focus:enabled:not(:checked)~.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-focus-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button.cdk-focused .mat-focus-indicator::before{content:\\\"\\\"}.mat-mdc-radio-disabled{cursor:default;pointer-events:none}.mat-mdc-radio-disabled.mat-mdc-radio-disabled-interactive{pointer-events:auto}.mat-mdc-radio-touch-target{position:absolute;top:50%;left:50%;height:var(--mat-radio-touch-target-size, 48px);width:var(--mat-radio-touch-target-size, 48px);transform:translate(-50%, -50%);display:var(--mat-radio-touch-target-display, block)}[dir=rtl] .mat-mdc-radio-touch-target{left:auto;right:50%;transform:translate(50%, -50%)}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRadioButton, [{\n    type: Component,\n    args: [{\n      selector: 'mat-radio-button',\n      host: {\n        'class': 'mat-mdc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mat-primary]': 'color === \"primary\"',\n        '[class.mat-accent]': 'color === \"accent\"',\n        '[class.mat-warn]': 'color === \"warn\"',\n        '[class.mat-mdc-radio-checked]': 'checked',\n        '[class.mat-mdc-radio-disabled]': 'disabled',\n        '[class.mat-mdc-radio-disabled-interactive]': 'disabledInteractive',\n        '[class._mat-animation-noopable]': '_noopAnimations',\n        // Needs to be removed since it causes some a11y issues (see #21266).\n        '[attr.tabindex]': 'null',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.aria-describedby]': 'null',\n        // Note: under normal conditions focus shouldn't land on this element, however it may be\n        // programmatically set, for example inside of a focus trap, in this case we want to forward\n        // the focus to the native element.\n        '(focus)': '_inputElement.nativeElement.focus()'\n      },\n      exportAs: 'matRadioButton',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      imports: [MatRipple, _MatInternalFormField],\n      template: \"<div mat-internal-form-field [labelPosition]=\\\"labelPosition\\\" #formField>\\n  <div class=\\\"mdc-radio\\\" [class.mdc-radio--disabled]=\\\"disabled\\\">\\n    <!-- Render this element first so the input is on top. -->\\n    <div class=\\\"mat-mdc-radio-touch-target\\\" (click)=\\\"_onTouchTargetClick($event)\\\"></div>\\n    <!--\\n      Note that we set `aria-invalid=\\\"false\\\"` on the input, because otherwise some screen readers\\n      will read out \\\"required, invalid data\\\" for each radio button that hasn't been checked.\\n      An alternate approach is to use `aria-required` instead of `required`, however we have an\\n      internal check which enforces that elements marked as `aria-required` also have the `required`\\n      attribute which ends up re-introducing the issue for us.\\n    -->\\n    <input #input class=\\\"mdc-radio__native-control\\\" type=\\\"radio\\\"\\n           [id]=\\\"inputId\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled && !disabledInteractive\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [required]=\\\"required\\\"\\n           aria-invalid=\\\"false\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.aria-disabled]=\\\"disabled && disabledInteractive ? 'true' : null\\\"\\n           (change)=\\\"_onInputInteraction($event)\\\">\\n    <div class=\\\"mdc-radio__background\\\">\\n      <div class=\\\"mdc-radio__outer-circle\\\"></div>\\n      <div class=\\\"mdc-radio__inner-circle\\\"></div>\\n    </div>\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"_rippleTrigger.nativeElement\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\">\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n  <label class=\\\"mdc-label\\\" [for]=\\\"inputId\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\",\n      styles: [\".mat-mdc-radio-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-radio-button .mdc-radio{display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color;padding:calc((var(--mat-radio-state-layer-size, 40px) - 20px)/2)}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:not([disabled]):not(:focus)~.mdc-radio__background::before{opacity:.04;transform:scale(1)}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:not([disabled])~.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-hover-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-hover-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-hover-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-pressed-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-pressed-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-pressed-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mat-mdc-radio-button .mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";transition:opacity 90ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms cubic-bezier(0.4, 0, 0.6, 1);width:var(--mat-radio-state-layer-size, 40px);height:var(--mat-radio-state-layer-size, 40px);top:calc(-1*(var(--mat-radio-state-layer-size, 40px) - 20px)/2);left:calc(-1*(var(--mat-radio-state-layer-size, 40px) - 20px)/2)}.mat-mdc-radio-button .mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0);border-radius:50%;transition:transform 90ms cubic-bezier(0.4, 0, 0.6, 1),background-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}@media(forced-colors: active){.mat-mdc-radio-button .mdc-radio__inner-circle{background-color:CanvasText !important}}.mat-mdc-radio-button .mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;top:0;right:0;left:0;cursor:inherit;z-index:1;width:var(--mat-radio-state-layer-size, 40px);height:var(--mat-radio-state-layer-size, 40px)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__outer-circle{transition:border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__inner-circle{transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-unselected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-unselected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{cursor:default}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface, currentColor));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-focus-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-focus-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle{transform:scale(0.5);transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled{pointer-events:auto}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-unselected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-unselected-icon-opacity, 0.38)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface, currentColor));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__background::before,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__outer-circle,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__inner-circle{transition:none !important}.mat-mdc-radio-button .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button.mat-mdc-radio-checked .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-checked .mdc-radio__background::before{background-color:var(--mat-radio-checked-ripple-color, var(--mat-sys-primary))}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mat-internal-form-field{color:var(--mat-radio-label-text-color, var(--mat-sys-on-surface));font-family:var(--mat-radio-label-text-font, var(--mat-sys-body-medium-font));line-height:var(--mat-radio-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-radio-label-text-size, var(--mat-sys-body-medium-size));letter-spacing:var(--mat-radio-label-text-tracking, var(--mat-sys-body-medium-tracking));font-weight:var(--mat-radio-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-radio-button .mdc-radio--disabled+label{color:var(--mat-radio-disabled-label-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-radio-button .mat-radio-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:50%}.mat-mdc-radio-button .mat-radio-ripple>.mat-ripple-element{opacity:.14}.mat-mdc-radio-button .mat-radio-ripple::before{border-radius:50%}.mat-mdc-radio-button .mdc-radio>.mdc-radio__native-control:focus:enabled:not(:checked)~.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-focus-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button.cdk-focused .mat-focus-indicator::before{content:\\\"\\\"}.mat-mdc-radio-disabled{cursor:default;pointer-events:none}.mat-mdc-radio-disabled.mat-mdc-radio-disabled-interactive{pointer-events:auto}.mat-mdc-radio-touch-target{position:absolute;top:50%;left:50%;height:var(--mat-radio-touch-target-size, 48px);width:var(--mat-radio-touch-target-size, 48px);transform:translate(-50%, -50%);display:var(--mat-radio-touch-target-display, block)}[dir=rtl] .mat-mdc-radio-touch-target{left:auto;right:50%;transform:translate(50%, -50%)}\\n\"]\n    }]\n  }], () => [], {\n    id: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    disableRipple: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    tabIndex: [{\n      type: Input,\n      args: [{\n        transform: value => value == null ? 0 : numberAttribute(value)\n      }]\n    }],\n    checked: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    value: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    required: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    color: [{\n      type: Input\n    }],\n    disabledInteractive: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    change: [{\n      type: Output\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    _rippleTrigger: [{\n      type: ViewChild,\n      args: ['formField', {\n        read: ElementRef,\n        static: true\n      }]\n    }]\n  });\n})();\nclass MatRadioModule {\n  static ɵfac = function MatRadioModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatRadioModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatRadioModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatCommonModule, MatRippleModule, MatRadioButton, MatCommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRadioModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatRippleModule, MatRadioGroup, MatRadioButton],\n      exports: [MatCommonModule, MatRadioGroup, MatRadioButton]\n    }]\n  }], null, null);\n})();\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule };","map":{"version":3,"names":["_IdGenerator","FocusMonitor","UniqueSelectionDispatcher","i0","forwardRef","InjectionToken","inject","ChangeDetectorRef","EventEmitter","booleanAttribute","Directive","Output","ContentChildren","Input","ElementRef","NgZone","Renderer2","Injector","HostAttributeToken","numberAttribute","afterNextRender","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","NG_VALUE_ACCESSOR","_CdkPrivateStyleLoader","_animationsDisabled","_StructuralStylesLoader","MatRipple","_MatInternalFormField","MatCommonModule","MatRippleModule","_c0","_c1","_c2","MatRadioChange","source","value","constructor","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MAT_RADIO_GROUP","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","color","disabledInteractive","_changeDetector","_value","_name","getId","_selected","_isInitialized","_labelPosition","_disabled","_required","_buttonChanges","_controlValueAccessorChangeFn","onTouched","change","_radios","name","_updateRadioButtonNames","labelPosition","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","disabled","required","_disabledInteractive","ngAfterContentInit","changes","subscribe","find","radio","ngOnDestroy","unsubscribe","_touch","forEach","_markForCheck","isAlreadySelected","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ɵfac","MatRadioGroup_Factory","__ngFactoryType__","ɵdir","ɵɵdefineDirective","type","selectors","contentQueries","MatRadioGroup_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatRadioButton","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","inputs","outputs","exportAs","features","ɵɵProvidersFeature","ngDevMode","ɵsetClassMetadata","args","selector","providers","host","descendants","transform","_elementRef","_focusMonitor","_radioDispatcher","_defaultOptions","optional","_ngZone","_renderer","_uniqueId","_cleanupClick","id","ariaLabel","ariaLabelledby","ariaDescribedby","disableRipple","tabIndex","_checked","radioGroup","notify","_setDisabled","_color","inputId","_removeUniqueSelectionListener","_previousTabIndex","_inputElement","_rippleTrigger","_noopAnimations","_injector","load","focus","options","origin","focusVia","nativeElement","ngOnInit","listen","ngDoCheck","_updateTabIndex","ngAfterViewInit","monitor","focusOrigin","runOutsideAngular","_onInputClick","stopMonitoring","_isRippleDisabled","_onInputInteraction","event","stopPropagation","groupValueChanged","_onTouchTargetClick","preventDefault","group","input","setAttribute","queueMicrotask","document","activeElement","blur","injector","MatRadioButton_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatRadioButton_Query","ɵɵviewQuery","first","hostVars","hostBindings","MatRadioButton_HostBindings","ɵɵlistener","MatRadioButton_focus_HostBindingHandler","ɵɵattribute","ɵɵclassProp","ngContentSelectors","decls","vars","consts","template","MatRadioButton_Template","_r1","ɵɵgetCurrentView","ɵɵprojectionDef","ɵɵelementStart","MatRadioButton_Template_div_click_3_listener","$event","ɵɵrestoreView","ɵɵresetView","ɵɵelementEnd","MatRadioButton_Template_input_change_4_listener","ɵɵelement","ɵɵprojection","ɵɵproperty","ɵɵadvance","dependencies","styles","encapsulation","changeDetection","None","OnPush","imports","read","static","MatRadioModule","MatRadioModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/node_modules/@angular/material/fesm2022/radio.mjs"],"sourcesContent":["import { _IdGenerator, FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { forwardRef, InjectionToken, inject, ChangeDetectorRef, EventEmitter, booleanAttribute, Directive, Output, ContentChildren, Input, ElementRef, NgZone, Renderer2, Injector, HostAttributeToken, numberAttribute, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { _animationsDisabled } from './animation.mjs';\nimport { _StructuralStylesLoader } from './structural-styles.mjs';\nimport { MatRipple } from './ripple.mjs';\nimport { _MatInternalFormField } from './internal-form-field.mjs';\nimport { MatCommonModule } from './common-module.mjs';\nimport { MatRippleModule } from './ripple-module.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/platform';\nimport '@angular/cdk/coercion';\nimport '@angular/cdk/bidi';\n\n/** Change event object emitted by radio button and radio group. */\nclass MatRadioChange {\n    source;\n    value;\n    constructor(\n    /** The radio button that emits the change event. */\n    source, \n    /** The value of the radio button. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true,\n};\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        disabledInteractive: false,\n    };\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup {\n    _changeDetector = inject(ChangeDetectorRef);\n    /** Selected value for the radio group. */\n    _value = null;\n    /** The HTML name attribute applied to radio buttons in this group. */\n    _name = inject(_IdGenerator).getId('mat-radio-group-');\n    /** The currently selected radio button. Should match value. */\n    _selected = null;\n    /** Whether the `value` has been set to its initial value. */\n    _isInitialized = false;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    _labelPosition = 'after';\n    /** Whether the radio group is disabled. */\n    _disabled = false;\n    /** Whether the radio group is required. */\n    _required = false;\n    /** Subscription to changes in amount of radio buttons. */\n    _buttonChanges;\n    /** The method to be called in order to update ngModel */\n    _controlValueAccessorChangeFn = () => { };\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched = () => { };\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    change = new EventEmitter();\n    /** Child radio buttons. */\n    _radios;\n    /**\n     * Theme color of the radio buttons in the group. This API is supported in M2\n     * themes only, it has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/radio/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    color;\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() {\n        return this._selected;\n    }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = value;\n        this._markRadiosForCheck();\n    }\n    /** Whether buttons in the group should be interactive while they're disabled. */\n    get disabledInteractive() {\n        return this._disabledInteractive;\n    }\n    set disabledInteractive(value) {\n        this._disabledInteractive = value;\n        this._markRadiosForCheck();\n    }\n    _disabledInteractive = false;\n    constructor() { }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n        // Clear the `selected` button when it's destroyed since the tabindex of the rest of the\n        // buttons depends on it. Note that we don't clear the `value`, because the radio button\n        // may be swapped out with a similar one and there are some internal apps that depend on\n        // that behavior.\n        this._buttonChanges = this._radios.changes.subscribe(() => {\n            if (this.selected && !this._radios.find(radio => radio === this.selected)) {\n                this._selected = null;\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._buttonChanges?.unsubscribe();\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatRadioGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.2.0-rc.1\", type: MatRadioGroup, isStandalone: true, selector: \"mat-radio-group\", inputs: { color: \"color\", name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: [\"disabled\", \"disabled\", booleanAttribute], required: [\"required\", \"required\", booleanAttribute], disabledInteractive: [\"disabledInteractive\", \"disabledInteractive\", booleanAttribute] }, outputs: { change: \"change\" }, host: { attributes: { \"role\": \"radiogroup\" }, classAttribute: \"mat-mdc-radio-group\" }, providers: [\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n        ], queries: [{ propertyName: \"_radios\", predicate: i0.forwardRef(() => MatRadioButton), descendants: true }], exportAs: [\"matRadioGroup\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatRadioGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-radio-group',\n                    exportAs: 'matRadioGroup',\n                    providers: [\n                        MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                        { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                    ],\n                    host: {\n                        'role': 'radiogroup',\n                        'class': 'mat-mdc-radio-group',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { change: [{\n                type: Output\n            }], _radios: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatRadioButton), { descendants: true }]\n            }], color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabledInteractive: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\nclass MatRadioButton {\n    _elementRef = inject(ElementRef);\n    _changeDetector = inject(ChangeDetectorRef);\n    _focusMonitor = inject(FocusMonitor);\n    _radioDispatcher = inject(UniqueSelectionDispatcher);\n    _defaultOptions = inject(MAT_RADIO_DEFAULT_OPTIONS, {\n        optional: true,\n    });\n    _ngZone = inject(NgZone);\n    _renderer = inject(Renderer2);\n    _uniqueId = inject(_IdGenerator).getId('mat-radio-');\n    _cleanupClick;\n    /** The unique ID for the radio button. */\n    id = this._uniqueId;\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    name;\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    ariaLabel;\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    ariaLabelledby;\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    ariaDescribedby;\n    /** Whether ripples are disabled inside the radio button */\n    disableRipple = false;\n    /** Tabindex of the radio button. */\n    tabIndex = 0;\n    /** Whether this radio button is checked. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        if (this._checked !== value) {\n            this._checked = value;\n            if (value && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!value && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (value) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    _labelPosition;\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(value);\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        if (value !== this._required) {\n            this._changeDetector.markForCheck();\n        }\n        this._required = value;\n    }\n    /**\n     * Theme color of the radio button. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/radio/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        // As per M2 design specifications the selection control radio should use the accent color\n        // palette by default. https://m2.material.io/components/radio-buttons#specs\n        return (this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            (this._defaultOptions && this._defaultOptions.color) ||\n            'accent');\n    }\n    set color(newValue) {\n        this._color = newValue;\n    }\n    _color;\n    /** Whether the radio button should remain interactive when it is disabled. */\n    get disabledInteractive() {\n        return (this._disabledInteractive || (this.radioGroup !== null && this.radioGroup.disabledInteractive));\n    }\n    set disabledInteractive(value) {\n        this._disabledInteractive = value;\n    }\n    _disabledInteractive;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    change = new EventEmitter();\n    /** The parent radio group. May or may not be present. */\n    radioGroup;\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    /** Whether this radio is checked. */\n    _checked = false;\n    /** Whether this radio is disabled. */\n    _disabled;\n    /** Whether this radio is required. */\n    _required;\n    /** Value assigned to this radio. */\n    _value = null;\n    /** Unregister function for _radioDispatcher */\n    _removeUniqueSelectionListener = () => { };\n    /** Previous value of the input's tabindex. */\n    _previousTabIndex;\n    /** The native `<input type=radio>` element */\n    _inputElement;\n    /** Trigger elements for the ripple events. */\n    _rippleTrigger;\n    /** Whether animations are disabled. */\n    _noopAnimations = _animationsDisabled();\n    _injector = inject(Injector);\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n        const radioGroup = inject(MAT_RADIO_GROUP, { optional: true });\n        const tabIndex = inject(new HostAttributeToken('tabindex'), { optional: true });\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._disabledInteractive = this._defaultOptions?.disabledInteractive ?? false;\n        if (tabIndex) {\n            this.tabIndex = numberAttribute(tabIndex, 0);\n        }\n    }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n        this._removeUniqueSelectionListener = this._radioDispatcher.listen((id, name) => {\n            if (id !== this.id && name === this.name) {\n                this.checked = false;\n            }\n        });\n    }\n    ngDoCheck() {\n        this._updateTabIndex();\n    }\n    ngAfterViewInit() {\n        this._updateTabIndex();\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n        // We bind this outside of the zone, because:\n        // 1. Its logic is completely DOM-related so we can avoid some change detections.\n        // 2. There appear to be some internal tests that break when this triggers a change detection.\n        this._ngZone.runOutsideAngular(() => {\n            this._cleanupClick = this._renderer.listen(this._inputElement.nativeElement, 'click', this._onInputClick);\n        });\n    }\n    ngOnDestroy() {\n        this._cleanupClick?.();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Triggered when the radio button receives an interaction from the user. */\n    _onInputInteraction(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        if (!this.checked && !this.disabled) {\n            const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n            this.checked = true;\n            this._emitChangeEvent();\n            if (this.radioGroup) {\n                this.radioGroup._controlValueAccessorChangeFn(this.value);\n                if (groupValueChanged) {\n                    this.radioGroup._emitChangeEvent();\n                }\n            }\n        }\n    }\n    /** Triggered when the user clicks on the touch target. */\n    _onTouchTargetClick(event) {\n        this._onInputInteraction(event);\n        if (!this.disabled || this.disabledInteractive) {\n            // Normally the input should be focused already, but if the click\n            // comes from the touch target, then we might have to focus it ourselves.\n            this._inputElement?.nativeElement.focus();\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** Called when the input is clicked. */\n    _onInputClick = (event) => {\n        // If the input is disabled while interactive, we need to prevent the\n        // selection from happening in this event handler. Note that even though\n        // this happens on `click` events, the logic applies when the user is\n        // navigating with the keyboard as well. An alternative way of doing\n        // this is by resetting the `checked` state in the `change` callback but\n        // it isn't optimal, because it can allow a pre-checked disabled button\n        // to be un-checked. This approach seems to cover everything.\n        if (this.disabled && this.disabledInteractive) {\n            event.preventDefault();\n        }\n    };\n    /** Gets the tabindex for the underlying input element. */\n    _updateTabIndex() {\n        const group = this.radioGroup;\n        let value;\n        // Implement a roving tabindex if the button is inside a group. For most cases this isn't\n        // necessary, because the browser handles the tab order for inputs inside a group automatically,\n        // but we need an explicitly higher tabindex for the selected button in order for things like\n        // the focus trap to pick it up correctly.\n        if (!group || !group.selected || this.disabled) {\n            value = this.tabIndex;\n        }\n        else {\n            value = group.selected === this ? this.tabIndex : -1;\n        }\n        if (value !== this._previousTabIndex) {\n            // We have to set the tabindex directly on the DOM node, because it depends on\n            // the selected state which is prone to \"changed after checked errors\".\n            const input = this._inputElement?.nativeElement;\n            if (input) {\n                input.setAttribute('tabindex', value + '');\n                this._previousTabIndex = value;\n                // Wait for any pending tabindex changes to be applied\n                afterNextRender(() => {\n                    queueMicrotask(() => {\n                        // The radio group uses a \"selection follows focus\" pattern for tab management, so if this\n                        // radio button is currently focused and another radio button in the group becomes\n                        // selected, we should move focus to the newly selected radio button to maintain\n                        // consistency between the focused and selected states.\n                        if (group &&\n                            group.selected &&\n                            group.selected !== this &&\n                            document.activeElement === input) {\n                            group.selected?._inputElement.nativeElement.focus();\n                            // If this radio button still has focus, the selected one must be disabled. In this\n                            // case the radio group as a whole should lose focus.\n                            if (document.activeElement === input) {\n                                this._inputElement.nativeElement.blur();\n                            }\n                        }\n                    });\n                }, { injector: this._injector });\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatRadioButton, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"20.2.0-rc.1\", type: MatRadioButton, isStandalone: true, selector: \"mat-radio-button\", inputs: { id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], checked: [\"checked\", \"checked\", booleanAttribute], value: \"value\", labelPosition: \"labelPosition\", disabled: [\"disabled\", \"disabled\", booleanAttribute], required: [\"required\", \"required\", booleanAttribute], color: \"color\", disabledInteractive: [\"disabledInteractive\", \"disabledInteractive\", booleanAttribute] }, outputs: { change: \"change\" }, host: { listeners: { \"focus\": \"_inputElement.nativeElement.focus()\" }, properties: { \"attr.id\": \"id\", \"class.mat-primary\": \"color === \\\"primary\\\"\", \"class.mat-accent\": \"color === \\\"accent\\\"\", \"class.mat-warn\": \"color === \\\"warn\\\"\", \"class.mat-mdc-radio-checked\": \"checked\", \"class.mat-mdc-radio-disabled\": \"disabled\", \"class.mat-mdc-radio-disabled-interactive\": \"disabledInteractive\", \"class._mat-animation-noopable\": \"_noopAnimations\", \"attr.tabindex\": \"null\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" }, classAttribute: \"mat-mdc-radio-button\" }, viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"_rippleTrigger\", first: true, predicate: [\"formField\"], descendants: true, read: ElementRef, static: true }], exportAs: [\"matRadioButton\"], ngImport: i0, template: \"<div mat-internal-form-field [labelPosition]=\\\"labelPosition\\\" #formField>\\n  <div class=\\\"mdc-radio\\\" [class.mdc-radio--disabled]=\\\"disabled\\\">\\n    <!-- Render this element first so the input is on top. -->\\n    <div class=\\\"mat-mdc-radio-touch-target\\\" (click)=\\\"_onTouchTargetClick($event)\\\"></div>\\n    <!--\\n      Note that we set `aria-invalid=\\\"false\\\"` on the input, because otherwise some screen readers\\n      will read out \\\"required, invalid data\\\" for each radio button that hasn't been checked.\\n      An alternate approach is to use `aria-required` instead of `required`, however we have an\\n      internal check which enforces that elements marked as `aria-required` also have the `required`\\n      attribute which ends up re-introducing the issue for us.\\n    -->\\n    <input #input class=\\\"mdc-radio__native-control\\\" type=\\\"radio\\\"\\n           [id]=\\\"inputId\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled && !disabledInteractive\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [required]=\\\"required\\\"\\n           aria-invalid=\\\"false\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.aria-disabled]=\\\"disabled && disabledInteractive ? 'true' : null\\\"\\n           (change)=\\\"_onInputInteraction($event)\\\">\\n    <div class=\\\"mdc-radio__background\\\">\\n      <div class=\\\"mdc-radio__outer-circle\\\"></div>\\n      <div class=\\\"mdc-radio__inner-circle\\\"></div>\\n    </div>\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"_rippleTrigger.nativeElement\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\">\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n  <label class=\\\"mdc-label\\\" [for]=\\\"inputId\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\", styles: [\".mat-mdc-radio-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-radio-button .mdc-radio{display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color;padding:calc((var(--mat-radio-state-layer-size, 40px) - 20px)/2)}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:not([disabled]):not(:focus)~.mdc-radio__background::before{opacity:.04;transform:scale(1)}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:not([disabled])~.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-hover-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-hover-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-hover-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-pressed-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-pressed-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-pressed-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mat-mdc-radio-button .mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";transition:opacity 90ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms cubic-bezier(0.4, 0, 0.6, 1);width:var(--mat-radio-state-layer-size, 40px);height:var(--mat-radio-state-layer-size, 40px);top:calc(-1*(var(--mat-radio-state-layer-size, 40px) - 20px)/2);left:calc(-1*(var(--mat-radio-state-layer-size, 40px) - 20px)/2)}.mat-mdc-radio-button .mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0);border-radius:50%;transition:transform 90ms cubic-bezier(0.4, 0, 0.6, 1),background-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}@media(forced-colors: active){.mat-mdc-radio-button .mdc-radio__inner-circle{background-color:CanvasText !important}}.mat-mdc-radio-button .mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;top:0;right:0;left:0;cursor:inherit;z-index:1;width:var(--mat-radio-state-layer-size, 40px);height:var(--mat-radio-state-layer-size, 40px)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__outer-circle{transition:border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__inner-circle{transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-unselected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-unselected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{cursor:default}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface, currentColor));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-focus-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-focus-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle{transform:scale(0.5);transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled{pointer-events:auto}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-unselected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-unselected-icon-opacity, 0.38)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface, currentColor));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__background::before,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__outer-circle,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__inner-circle{transition:none !important}.mat-mdc-radio-button .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button.mat-mdc-radio-checked .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-checked .mdc-radio__background::before{background-color:var(--mat-radio-checked-ripple-color, var(--mat-sys-primary))}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mat-internal-form-field{color:var(--mat-radio-label-text-color, var(--mat-sys-on-surface));font-family:var(--mat-radio-label-text-font, var(--mat-sys-body-medium-font));line-height:var(--mat-radio-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-radio-label-text-size, var(--mat-sys-body-medium-size));letter-spacing:var(--mat-radio-label-text-tracking, var(--mat-sys-body-medium-tracking));font-weight:var(--mat-radio-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-radio-button .mdc-radio--disabled+label{color:var(--mat-radio-disabled-label-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-radio-button .mat-radio-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:50%}.mat-mdc-radio-button .mat-radio-ripple>.mat-ripple-element{opacity:.14}.mat-mdc-radio-button .mat-radio-ripple::before{border-radius:50%}.mat-mdc-radio-button .mdc-radio>.mdc-radio__native-control:focus:enabled:not(:checked)~.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-focus-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button.cdk-focused .mat-focus-indicator::before{content:\\\"\\\"}.mat-mdc-radio-disabled{cursor:default;pointer-events:none}.mat-mdc-radio-disabled.mat-mdc-radio-disabled-interactive{pointer-events:auto}.mat-mdc-radio-touch-target{position:absolute;top:50%;left:50%;height:var(--mat-radio-touch-target-size, 48px);width:var(--mat-radio-touch-target-size, 48px);transform:translate(-50%, -50%);display:var(--mat-radio-touch-target-display, block)}[dir=rtl] .mat-mdc-radio-touch-target{left:auto;right:50%;transform:translate(50%, -50%)}\\n\"], dependencies: [{ kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { kind: \"component\", type: _MatInternalFormField, selector: \"div[mat-internal-form-field]\", inputs: [\"labelPosition\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatRadioButton, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-radio-button', host: {\n                        'class': 'mat-mdc-radio-button',\n                        '[attr.id]': 'id',\n                        '[class.mat-primary]': 'color === \"primary\"',\n                        '[class.mat-accent]': 'color === \"accent\"',\n                        '[class.mat-warn]': 'color === \"warn\"',\n                        '[class.mat-mdc-radio-checked]': 'checked',\n                        '[class.mat-mdc-radio-disabled]': 'disabled',\n                        '[class.mat-mdc-radio-disabled-interactive]': 'disabledInteractive',\n                        '[class._mat-animation-noopable]': '_noopAnimations',\n                        // Needs to be removed since it causes some a11y issues (see #21266).\n                        '[attr.tabindex]': 'null',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                        // Note: under normal conditions focus shouldn't land on this element, however it may be\n                        // programmatically set, for example inside of a focus trap, in this case we want to forward\n                        // the focus to the native element.\n                        '(focus)': '_inputElement.nativeElement.focus()',\n                    }, exportAs: 'matRadioButton', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [MatRipple, _MatInternalFormField], template: \"<div mat-internal-form-field [labelPosition]=\\\"labelPosition\\\" #formField>\\n  <div class=\\\"mdc-radio\\\" [class.mdc-radio--disabled]=\\\"disabled\\\">\\n    <!-- Render this element first so the input is on top. -->\\n    <div class=\\\"mat-mdc-radio-touch-target\\\" (click)=\\\"_onTouchTargetClick($event)\\\"></div>\\n    <!--\\n      Note that we set `aria-invalid=\\\"false\\\"` on the input, because otherwise some screen readers\\n      will read out \\\"required, invalid data\\\" for each radio button that hasn't been checked.\\n      An alternate approach is to use `aria-required` instead of `required`, however we have an\\n      internal check which enforces that elements marked as `aria-required` also have the `required`\\n      attribute which ends up re-introducing the issue for us.\\n    -->\\n    <input #input class=\\\"mdc-radio__native-control\\\" type=\\\"radio\\\"\\n           [id]=\\\"inputId\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled && !disabledInteractive\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [required]=\\\"required\\\"\\n           aria-invalid=\\\"false\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.aria-disabled]=\\\"disabled && disabledInteractive ? 'true' : null\\\"\\n           (change)=\\\"_onInputInteraction($event)\\\">\\n    <div class=\\\"mdc-radio__background\\\">\\n      <div class=\\\"mdc-radio__outer-circle\\\"></div>\\n      <div class=\\\"mdc-radio__inner-circle\\\"></div>\\n    </div>\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"_rippleTrigger.nativeElement\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\">\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n  <label class=\\\"mdc-label\\\" [for]=\\\"inputId\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\", styles: [\".mat-mdc-radio-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-radio-button .mdc-radio{display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color;padding:calc((var(--mat-radio-state-layer-size, 40px) - 20px)/2)}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:not([disabled]):not(:focus)~.mdc-radio__background::before{opacity:.04;transform:scale(1)}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:not([disabled])~.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-hover-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-hover-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-hover-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-pressed-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-pressed-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-pressed-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mat-mdc-radio-button .mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";transition:opacity 90ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms cubic-bezier(0.4, 0, 0.6, 1);width:var(--mat-radio-state-layer-size, 40px);height:var(--mat-radio-state-layer-size, 40px);top:calc(-1*(var(--mat-radio-state-layer-size, 40px) - 20px)/2);left:calc(-1*(var(--mat-radio-state-layer-size, 40px) - 20px)/2)}.mat-mdc-radio-button .mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0);border-radius:50%;transition:transform 90ms cubic-bezier(0.4, 0, 0.6, 1),background-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}@media(forced-colors: active){.mat-mdc-radio-button .mdc-radio__inner-circle{background-color:CanvasText !important}}.mat-mdc-radio-button .mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;top:0;right:0;left:0;cursor:inherit;z-index:1;width:var(--mat-radio-state-layer-size, 40px);height:var(--mat-radio-state-layer-size, 40px)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__outer-circle{transition:border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__inner-circle{transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-unselected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-unselected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{cursor:default}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface, currentColor));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-selected-focus-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-selected-focus-icon-color, var(--mat-sys-primary, currentColor))}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle{transform:scale(0.5);transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled{pointer-events:auto}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-unselected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-unselected-icon-opacity, 0.38)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background>.mdc-radio__inner-circle{background-color:var(--mat-radio-disabled-selected-icon-color, var(--mat-sys-on-surface, currentColor));opacity:var(--mat-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__background::before,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__outer-circle,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__inner-circle{transition:none !important}.mat-mdc-radio-button .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button.mat-mdc-radio-checked .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-checked .mdc-radio__background::before{background-color:var(--mat-radio-checked-ripple-color, var(--mat-sys-primary))}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mat-internal-form-field{color:var(--mat-radio-label-text-color, var(--mat-sys-on-surface));font-family:var(--mat-radio-label-text-font, var(--mat-sys-body-medium-font));line-height:var(--mat-radio-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-radio-label-text-size, var(--mat-sys-body-medium-size));letter-spacing:var(--mat-radio-label-text-tracking, var(--mat-sys-body-medium-tracking));font-weight:var(--mat-radio-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-radio-button .mdc-radio--disabled+label{color:var(--mat-radio-disabled-label-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-radio-button .mat-radio-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:50%}.mat-mdc-radio-button .mat-radio-ripple>.mat-ripple-element{opacity:.14}.mat-mdc-radio-button .mat-radio-ripple::before{border-radius:50%}.mat-mdc-radio-button .mdc-radio>.mdc-radio__native-control:focus:enabled:not(:checked)~.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mat-radio-unselected-focus-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button.cdk-focused .mat-focus-indicator::before{content:\\\"\\\"}.mat-mdc-radio-disabled{cursor:default;pointer-events:none}.mat-mdc-radio-disabled.mat-mdc-radio-disabled-interactive{pointer-events:auto}.mat-mdc-radio-touch-target{position:absolute;top:50%;left:50%;height:var(--mat-radio-touch-target-size, 48px);width:var(--mat-radio-touch-target-size, 48px);transform:translate(-50%, -50%);display:var(--mat-radio-touch-target-display, block)}[dir=rtl] .mat-mdc-radio-touch-target{left:auto;right:50%;transform:translate(50%, -50%)}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { id: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], checked: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], value: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], color: [{\n                type: Input\n            }], disabledInteractive: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], change: [{\n                type: Output\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }], _rippleTrigger: [{\n                type: ViewChild,\n                args: ['formField', { read: ElementRef, static: true }]\n            }] } });\n\nclass MatRadioModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatRadioModule, imports: [MatCommonModule, MatRippleModule, MatRadioGroup, MatRadioButton], exports: [MatCommonModule, MatRadioGroup, MatRadioButton] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatRadioModule, imports: [MatCommonModule, MatRippleModule, MatRadioButton, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatRadioModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatRippleModule, MatRadioGroup, MatRadioButton],\n                    exports: [MatCommonModule, MatRadioGroup, MatRadioButton],\n                }]\n        }] });\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}