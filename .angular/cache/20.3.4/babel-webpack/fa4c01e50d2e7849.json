{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AssinaturaService {\n  http;\n  baseUrl = `${environment.apiUrl}/assinaturas`;\n  constructor(http) {\n    this.http = http;\n  }\n  criarAssinatura(usuarioId, plano) {\n    const dto = {\n      usuarioId,\n      plano\n    };\n    return this.http.post(`${this.baseUrl}`, dto);\n  }\n  criarAssinaturaTeste(usuarioId, plano) {\n    const dto = {\n      usuarioId,\n      plano\n    };\n    return this.http.post(`${this.baseUrl}/assinatura/teste`, dto);\n  }\n  atualizarStatus(id, status) {\n    const dto = {\n      status\n    };\n    return this.http.put(`${this.baseUrl}/${id}/status`, dto);\n  }\n  verificarValidade(usuarioId) {\n    const dto = {\n      usuarioId\n    };\n    return this.http.post(`${this.baseUrl}/valida`, dto);\n  }\n  consultarAssinatura(id) {\n    return this.http.get(`${this.baseUrl}/assinatura/${id}`);\n  }\n  // M√©todo para consultar a assinatura do usu√°rio logado usando o ID correto\n  consultarAssinaturaUsuarioLogado() {\n    // Debug: Vamos usar o mesmo userId que √© usado para criar assinatura\n    const userId = this.getUserIdFromLocalStorage();\n    console.log(`üîç consultarAssinaturaUsuarioLogado: usando userId ${userId}`);\n    if (userId) {\n      // Usar o novo endpoint que retorna assinatura mais recente (ativa ou cancelada)\n      return this.http.get(`${this.baseUrl}/assinatura/recente?usuarioId=${userId}`);\n    } else {\n      // Fallback para o endpoint baseado em token\n      return this.http.get(`${this.baseUrl}/assinatura/recente`);\n    }\n  }\n  getUserIdFromLocalStorage() {\n    try {\n      // Usar a mesma l√≥gica de getUserId do componente upgrade\n      const userId = localStorage.getItem('userId');\n      if (userId && !isNaN(Number(userId))) {\n        return Number(userId);\n      }\n      const token = localStorage.getItem('token');\n      if (token) {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        if (payload.id && !isNaN(Number(payload.id))) {\n          return Number(payload.id);\n        }\n      }\n      const userData = localStorage.getItem('userData');\n      if (userData) {\n        const user = JSON.parse(userData);\n        if (user.id && !isNaN(Number(user.id))) {\n          return Number(user.id);\n        }\n      }\n      return null;\n    } catch (error) {\n      console.error('Erro ao obter userId:', error);\n      return null;\n    }\n  }\n  rodarScheduler() {\n    return this.http.post(`${this.baseUrl}/assinatura/scheduler`, {});\n  }\n  cancelarAssinatura(id, dto) {\n    return this.http.post(`${this.baseUrl}/${id}/cancelar`, dto);\n  }\n  static …µfac = function AssinaturaService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AssinaturaService)(i0.…µ…µinject(i1.HttpClient));\n  };\n  static …µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: AssinaturaService,\n    factory: AssinaturaService.…µfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","environment","AssinaturaService","http","baseUrl","apiUrl","constructor","criarAssinatura","usuarioId","plano","dto","post","criarAssinaturaTeste","atualizarStatus","id","status","put","verificarValidade","consultarAssinatura","get","consultarAssinaturaUsuarioLogado","userId","getUserIdFromLocalStorage","console","log","localStorage","getItem","isNaN","Number","token","payload","JSON","parse","atob","split","userData","user","error","rodarScheduler","cancelarAssinatura","i0","…µ…µinject","i1","factory","…µfac","providedIn"],"sources":["/home/danilo/√Årea de trabalho/formsync-nx/apps/front/src/app/services/assinatura.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nexport interface AssinaturaResponseDTO {\n  id: number;\n  usuarioId: number;\n  plano: string;\n  status: string;\n  dataInicio: string;\n  dataProximaCobranca: string;\n  dataCriacao: string;\n  dataAtualizacao: string;\n}\n\nexport interface CriarAssinaturaDTO {\n  usuarioId: number;\n  plano: string;\n}\n\nexport interface VerificarAssinaturaDTO {\n  usuarioId: number;\n}\n\nexport interface AtualizarStatusAssinaturaDTO {\n  status: string;\n}\n\nexport interface MensagemResponseDTO {\n  mensagem: string;\n}\n\nexport interface CancelarAssinaturaDTO {\n  motivo: string;\n  dataCancelamento?: string;\n  solicitarReembolso?: boolean;\n}\n\nexport interface CancelamentoResponseDTO {\n  assinaturaId: number;\n  status: string;\n  motivo: string;\n  dataCancelamento: string;\n  dataFim: string;\n  reembolsoSolicitado: boolean;\n  tipoReembolso: string;\n  valorReembolso: number;\n  dentroDoArrependimento: boolean;\n  mensagem: string;\n  processadoEm: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AssinaturaService {\n  private baseUrl = `${environment.apiUrl}/assinaturas`;\n\n  constructor(private http: HttpClient) { }\n\n  criarAssinatura(usuarioId: number, plano: string): Observable<AssinaturaResponseDTO> {\n    const dto: CriarAssinaturaDTO = { usuarioId, plano };\n    return this.http.post<AssinaturaResponseDTO>(`${this.baseUrl}`, dto);\n  }\n\n  criarAssinaturaTeste(usuarioId: number, plano: string): Observable<AssinaturaResponseDTO> {\n    const dto: CriarAssinaturaDTO = { usuarioId, plano };\n    return this.http.post<AssinaturaResponseDTO>(`${this.baseUrl}/assinatura/teste`, dto);\n  }\n\n  atualizarStatus(id: number, status: string): Observable<void> {\n    const dto: AtualizarStatusAssinaturaDTO = { status };\n    return this.http.put<void>(`${this.baseUrl}/${id}/status`, dto);\n  }\n\n  verificarValidade(usuarioId: number): Observable<boolean> {\n    const dto: VerificarAssinaturaDTO = { usuarioId };\n    return this.http.post<boolean>(`${this.baseUrl}/valida`, dto);\n  }\n\n  consultarAssinatura(id: number): Observable<AssinaturaResponseDTO> {\n    return this.http.get<AssinaturaResponseDTO>(`${this.baseUrl}/assinatura/${id}`);\n  }\n\n  // M√©todo para consultar a assinatura do usu√°rio logado usando o ID correto\n  consultarAssinaturaUsuarioLogado(): Observable<AssinaturaResponseDTO> {\n    // Debug: Vamos usar o mesmo userId que √© usado para criar assinatura\n    const userId = this.getUserIdFromLocalStorage();\n    console.log(`üîç consultarAssinaturaUsuarioLogado: usando userId ${userId}`);\n\n    if (userId) {\n      // Usar o novo endpoint que retorna assinatura mais recente (ativa ou cancelada)\n      return this.http.get<AssinaturaResponseDTO>(`${this.baseUrl}/assinatura/recente?usuarioId=${userId}`);\n    } else {\n      // Fallback para o endpoint baseado em token\n      return this.http.get<AssinaturaResponseDTO>(`${this.baseUrl}/assinatura/recente`);\n    }\n  }\n\n  private getUserIdFromLocalStorage(): number | null {\n    try {\n      // Usar a mesma l√≥gica de getUserId do componente upgrade\n      const userId = localStorage.getItem('userId');\n      if (userId && !isNaN(Number(userId))) {\n        return Number(userId);\n      }\n\n      const token = localStorage.getItem('token');\n      if (token) {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        if (payload.id && !isNaN(Number(payload.id))) {\n          return Number(payload.id);\n        }\n      }\n\n      const userData = localStorage.getItem('userData');\n      if (userData) {\n        const user = JSON.parse(userData);\n        if (user.id && !isNaN(Number(user.id))) {\n          return Number(user.id);\n        }\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Erro ao obter userId:', error);\n      return null;\n    }\n  }\n\n  rodarScheduler(): Observable<MensagemResponseDTO> {\n    return this.http.post<MensagemResponseDTO>(`${this.baseUrl}/assinatura/scheduler`, {});\n  }\n\n  cancelarAssinatura(id: number, dto: CancelarAssinaturaDTO): Observable<CancelamentoResponseDTO> {\n    return this.http.post<CancelamentoResponseDTO>(`${this.baseUrl}/${id}/cancelar`, dto);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}