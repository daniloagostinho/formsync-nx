{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class NotificationService {\n  notifications = new BehaviorSubject([]);\n  notifications$ = this.notifications.asObservable();\n  generateId() {\n    return '_' + Math.random().toString(36).substr(2, 9);\n  }\n  addNotification(message, type, duration = 5000) {\n    const notification = {\n      id: this.generateId(),\n      message,\n      type,\n      duration,\n      state: 'in'\n    };\n    const currentNotifications = this.notifications.value;\n    this.notifications.next([...currentNotifications, notification]);\n    // Auto-remove após a duração especificada\n    setTimeout(() => {\n      this.remove(notification.id);\n    }, duration);\n  }\n  showSuccess(message, duration = 3000) {\n    this.addNotification(message, 'success', duration);\n  }\n  showError(message, duration = 5000) {\n    this.addNotification(message, 'error', duration);\n  }\n  showWarning(message, duration = 4000) {\n    this.addNotification(message, 'warning', duration);\n  }\n  showInfo(message, duration = 3000) {\n    this.addNotification(message, 'info', duration);\n  }\n  remove(id) {\n    const currentNotifications = this.notifications.value;\n    const updatedNotifications = currentNotifications.filter(n => n.id !== id);\n    this.notifications.next(updatedNotifications);\n  }\n  clear() {\n    this.notifications.next([]);\n  }\n  static ɵfac = function NotificationService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NotificationService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationService,\n    factory: NotificationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","NotificationService","notifications","notifications$","asObservable","generateId","Math","random","toString","substr","addNotification","message","type","duration","notification","id","state","currentNotifications","value","next","setTimeout","remove","showSuccess","showError","showWarning","showInfo","updatedNotifications","filter","n","clear","factory","ɵfac","providedIn"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/src/app/services/notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nexport type NotificationType = 'success' | 'error' | 'warning' | 'info';\n\nexport interface Notification {\n  id: string;\n  message: string;\n  type: NotificationType;\n  duration?: number;\n  state?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private notifications = new BehaviorSubject<Notification[]>([]);\n  public notifications$ = this.notifications.asObservable();\n\n  private generateId(): string {\n    return '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  private addNotification(message: string, type: NotificationType, duration: number = 5000) {\n    const notification: Notification = {\n      id: this.generateId(),\n      message,\n      type,\n      duration,\n      state: 'in'\n    };\n\n    const currentNotifications = this.notifications.value;\n    this.notifications.next([...currentNotifications, notification]);\n\n    // Auto-remove após a duração especificada\n    setTimeout(() => {\n      this.remove(notification.id);\n    }, duration);\n  }\n\n  showSuccess(message: string, duration: number = 3000) {\n    this.addNotification(message, 'success', duration);\n  }\n\n  showError(message: string, duration: number = 5000) {\n    this.addNotification(message, 'error', duration);\n  }\n\n  showWarning(message: string, duration: number = 4000) {\n    this.addNotification(message, 'warning', duration);\n  }\n\n  showInfo(message: string, duration: number = 3000) {\n    this.addNotification(message, 'info', duration);\n  }\n\n  remove(id: string) {\n    const currentNotifications = this.notifications.value;\n    const updatedNotifications = currentNotifications.filter(n => n.id !== id);\n    this.notifications.next(updatedNotifications);\n  }\n\n  clear() {\n    this.notifications.next([]);\n  }\n}"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAetC,OAAM,MAAOC,mBAAmB;EACtBC,aAAa,GAAG,IAAIF,eAAe,CAAiB,EAAE,CAAC;EACxDG,cAAc,GAAG,IAAI,CAACD,aAAa,CAACE,YAAY,EAAE;EAEjDC,UAAUA,CAAA;IAChB,OAAO,GAAG,GAAGC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACtD;EAEQC,eAAeA,CAACC,OAAe,EAAEC,IAAsB,EAAEC,QAAA,GAAmB,IAAI;IACtF,MAAMC,YAAY,GAAiB;MACjCC,EAAE,EAAE,IAAI,CAACV,UAAU,EAAE;MACrBM,OAAO;MACPC,IAAI;MACJC,QAAQ;MACRG,KAAK,EAAE;KACR;IAED,MAAMC,oBAAoB,GAAG,IAAI,CAACf,aAAa,CAACgB,KAAK;IACrD,IAAI,CAAChB,aAAa,CAACiB,IAAI,CAAC,CAAC,GAAGF,oBAAoB,EAAEH,YAAY,CAAC,CAAC;IAEhE;IACAM,UAAU,CAAC,MAAK;MACd,IAAI,CAACC,MAAM,CAACP,YAAY,CAACC,EAAE,CAAC;IAC9B,CAAC,EAAEF,QAAQ,CAAC;EACd;EAEAS,WAAWA,CAACX,OAAe,EAAEE,QAAA,GAAmB,IAAI;IAClD,IAAI,CAACH,eAAe,CAACC,OAAO,EAAE,SAAS,EAAEE,QAAQ,CAAC;EACpD;EAEAU,SAASA,CAACZ,OAAe,EAAEE,QAAA,GAAmB,IAAI;IAChD,IAAI,CAACH,eAAe,CAACC,OAAO,EAAE,OAAO,EAAEE,QAAQ,CAAC;EAClD;EAEAW,WAAWA,CAACb,OAAe,EAAEE,QAAA,GAAmB,IAAI;IAClD,IAAI,CAACH,eAAe,CAACC,OAAO,EAAE,SAAS,EAAEE,QAAQ,CAAC;EACpD;EAEAY,QAAQA,CAACd,OAAe,EAAEE,QAAA,GAAmB,IAAI;IAC/C,IAAI,CAACH,eAAe,CAACC,OAAO,EAAE,MAAM,EAAEE,QAAQ,CAAC;EACjD;EAEAQ,MAAMA,CAACN,EAAU;IACf,MAAME,oBAAoB,GAAG,IAAI,CAACf,aAAa,CAACgB,KAAK;IACrD,MAAMQ,oBAAoB,GAAGT,oBAAoB,CAACU,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACb,EAAE,KAAKA,EAAE,CAAC;IAC1E,IAAI,CAACb,aAAa,CAACiB,IAAI,CAACO,oBAAoB,CAAC;EAC/C;EAEAG,KAAKA,CAAA;IACH,IAAI,CAAC3B,aAAa,CAACiB,IAAI,CAAC,EAAE,CAAC;EAC7B;;qCAlDWlB,mBAAmB;EAAA;;WAAnBA,mBAAmB;IAAA6B,OAAA,EAAnB7B,mBAAmB,CAAA8B,IAAA;IAAAC,UAAA,EAFlB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}