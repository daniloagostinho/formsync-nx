{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { delay, catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AnalyticsService {\n  http;\n  apiUrl = `${environment.apiUrl}/analytics`;\n  constructor(http) {\n    this.http = http;\n  }\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      return {\n        'Authorization': `Bearer ${token}`\n      };\n    }\n    return {};\n  }\n  /**\n   * Obtém dados gerais de analytics\n   */\n  getAnalyticsData(periodo = '30') {\n    return this.http.get(`${this.apiUrl}/dados`, {\n      params: {\n        periodo\n      },\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(error => {\n      console.error('❌ Erro ao carregar analytics:', error);\n      // Retornar dados vazios em caso de erro\n      return of({\n        totalPreenchimentos: 0,\n        tempoEconomizado: '0h',\n        sitesUnicos: 0,\n        taxaSucesso: 0,\n        periodo: periodo\n      }).pipe(delay(1000));\n    }));\n  }\n  /**\n   * Obtém dados de preenchimentos por período\n   */\n  getPreenchimentosPorPeriodo(periodo) {\n    return this.http.get(`${this.apiUrl}/preenchimentos`, {\n      params: {\n        periodo\n      },\n      headers: this.getAuthHeaders()\n    }).pipe(map(data => {\n      // Converter strings de data para objetos Date\n      return data.map(item => ({\n        ...item,\n        data: new Date(item.data)\n      }));\n    }), catchError(error => {\n      console.error('❌ Erro ao carregar preenchimentos:', error);\n      // Retornar array vazio em caso de erro\n      return of([]).pipe(delay(800));\n    }));\n  }\n  /**\n   * Obtém campos de template mais utilizados\n   */\n  getCamposMaisUtilizados() {\n    return this.http.get(`${this.apiUrl}/campos`, {\n      headers: this.getAuthHeaders()\n    }).pipe(map(data => {\n      // Converter strings de data para objetos Date\n      return data.map(item => ({\n        ...item,\n        ultimoUso: new Date(item.ultimoUso)\n      }));\n    }), catchError(error => {\n      console.error('❌ Erro ao carregar campos de template:', error);\n      // Retornar array vazio em caso de erro\n      return of([]).pipe(delay(600));\n    }));\n  }\n  /**\n   * Obtém sites mais acessados\n   */\n  getSitesMaisAcessados() {\n    return this.http.get(`${this.apiUrl}/sites`, {\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(error => {\n      console.error('❌ Erro ao carregar sites:', error);\n      // Retornar array vazio em caso de erro\n      return of([]).pipe(delay(600));\n    }));\n  }\n  /**\n   * Obtém insights e recomendações\n   */\n  getInsights() {\n    return this.http.get(`${this.apiUrl}/insights`, {\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(error => {\n      console.error('❌ Erro ao carregar insights:', error);\n      // Retornar array vazio em caso de erro\n      return of([]).pipe(delay(500));\n    }));\n  }\n  /**\n   * Rastreia um novo preenchimento\n   */\n  trackPreenchimento(site, campoTemplateId) {\n    const params = {\n      site\n    };\n    if (campoTemplateId) params.campoTemplateId = campoTemplateId;\n    return this.http.post(`${this.apiUrl}/track`, null, {\n      params\n    }).pipe(catchError(error => {\n      console.error('❌ Erro ao rastrear preenchimento:', error);\n      return of(void 0);\n    }));\n  }\n  /**\n   * Rastreia tempo economizado\n   */\n  trackTempoEconomizado(tempoSegundos) {\n    return this.http.post(`${this.apiUrl}/track-tempo`, null, {\n      params: {\n        tempoSegundos: tempoSegundos.toString()\n      }\n    }).pipe(catchError(error => {\n      console.error('❌ Erro ao rastrear tempo:', error);\n      return of(void 0);\n    }));\n  }\n  /**\n   * Obtém dados para heatmap de horários\n   */\n  getHeatmapData(periodo = '30') {\n    return this.http.get(`${this.apiUrl}/heatmap`, {\n      params: {\n        periodo\n      },\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(error => {\n      console.error('❌ Erro ao carregar dados de heatmap:', error);\n      // Retornar dados vazios em caso de erro\n      return of([]).pipe(delay(600));\n    }));\n  }\n  static ɵfac = function AnalyticsService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AnalyticsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AnalyticsService,\n    factory: AnalyticsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","of","delay","catchError","map","environment","AnalyticsService","http","apiUrl","constructor","getAuthHeaders","token","localStorage","getItem","getAnalyticsData","periodo","get","params","headers","pipe","error","console","totalPreenchimentos","tempoEconomizado","sitesUnicos","taxaSucesso","getPreenchimentosPorPeriodo","data","item","Date","getCamposMaisUtilizados","ultimoUso","getSitesMaisAcessados","getInsights","trackPreenchimento","site","campoTemplateId","post","trackTempoEconomizado","tempoSegundos","toString","getHeatmapData","i0","ɵɵinject","i1","factory","ɵfac","providedIn"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/src/app/services/analytics.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { delay, catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\nexport interface AnalyticsData {\n  totalPreenchimentos: number;\n  tempoEconomizado: string;\n  sitesUnicos: number;\n  taxaSucesso: number;\n  periodo: string;\n}\n\nexport interface PreenchimentoAnalytics {\n  data: Date;\n  quantidade: number;\n  site?: string;\n  campoId?: number;\n}\n\nexport interface CampoAnalytics {\n  campoTemplateId: number;\n  nomeCampo: string;\n  nomeTemplate: string;\n  quantidadeUsos: number;\n  ultimoUso: Date;\n}\n\nexport interface SiteAnalytics {\n  dominio: string;\n  quantidadePreenchimentos: number;\n  tempoMedio: number;\n}\n\nexport interface InsightAnalytics {\n  titulo: string;\n  descricao: string;\n  tipo: 'positive' | 'info' | 'warning';\n  icone: string;\n}\n\nexport interface HeatmapData {\n  hora: number;\n  dia: number;\n  quantidade: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalyticsService {\n  private apiUrl = `${environment.apiUrl}/analytics`;\n\n  constructor(private http: HttpClient) { }\n\n  private getAuthHeaders(): { [key: string]: string } {\n    const token = localStorage.getItem('token');\n    if (token) {\n      return { 'Authorization': `Bearer ${token}` };\n    }\n    return {};\n  }\n\n  /**\n   * Obtém dados gerais de analytics\n   */\n  getAnalyticsData(periodo: string = '30'): Observable<AnalyticsData> {\n    return this.http.get<AnalyticsData>(`${this.apiUrl}/dados`, {\n      params: { periodo },\n      headers: this.getAuthHeaders()\n    }).pipe(\n      catchError(error => {\n        console.error('❌ Erro ao carregar analytics:', error);\n        // Retornar dados vazios em caso de erro\n        return of({\n          totalPreenchimentos: 0,\n          tempoEconomizado: '0h',\n          sitesUnicos: 0,\n          taxaSucesso: 0,\n          periodo: periodo\n        }).pipe(delay(1000));\n      })\n    );\n  }\n\n  /**\n   * Obtém dados de preenchimentos por período\n   */\n  getPreenchimentosPorPeriodo(periodo: string): Observable<PreenchimentoAnalytics[]> {\n    return this.http.get<PreenchimentoAnalytics[]>(`${this.apiUrl}/preenchimentos`, {\n      params: { periodo },\n      headers: this.getAuthHeaders()\n    }).pipe(\n      map(data => {\n        // Converter strings de data para objetos Date\n        return data.map(item => ({\n          ...item,\n          data: new Date(item.data)\n        }));\n      }),\n      catchError(error => {\n        console.error('❌ Erro ao carregar preenchimentos:', error);\n        // Retornar array vazio em caso de erro\n        return of([]).pipe(delay(800));\n      })\n    );\n  }\n\n  /**\n   * Obtém campos de template mais utilizados\n   */\n  getCamposMaisUtilizados(): Observable<CampoAnalytics[]> {\n    return this.http.get<CampoAnalytics[]>(`${this.apiUrl}/campos`, {\n      headers: this.getAuthHeaders()\n    }).pipe(\n      map(data => {\n        // Converter strings de data para objetos Date\n        return data.map(item => ({\n          ...item,\n          ultimoUso: new Date(item.ultimoUso)\n        }));\n      }),\n      catchError(error => {\n        console.error('❌ Erro ao carregar campos de template:', error);\n        // Retornar array vazio em caso de erro\n        return of([]).pipe(delay(600));\n      })\n    );\n  }\n\n  /**\n   * Obtém sites mais acessados\n   */\n  getSitesMaisAcessados(): Observable<SiteAnalytics[]> {\n    return this.http.get<SiteAnalytics[]>(`${this.apiUrl}/sites`, {\n      headers: this.getAuthHeaders()\n    }).pipe(\n      catchError(error => {\n        console.error('❌ Erro ao carregar sites:', error);\n        // Retornar array vazio em caso de erro\n        return of([]).pipe(delay(600));\n      })\n    );\n  }\n\n  /**\n   * Obtém insights e recomendações\n   */\n  getInsights(): Observable<InsightAnalytics[]> {\n    return this.http.get<InsightAnalytics[]>(`${this.apiUrl}/insights`, {\n      headers: this.getAuthHeaders()\n    }).pipe(\n      catchError(error => {\n        console.error('❌ Erro ao carregar insights:', error);\n        // Retornar array vazio em caso de erro\n        return of([]).pipe(delay(500));\n      })\n    );\n  }\n\n  /**\n   * Rastreia um novo preenchimento\n   */\n  trackPreenchimento(site: string, campoTemplateId?: number): Observable<void> {\n    const params: any = { site };\n    if (campoTemplateId) params.campoTemplateId = campoTemplateId;\n\n    return this.http.post<void>(`${this.apiUrl}/track`, null, { params }).pipe(\n      catchError(error => {\n        console.error('❌ Erro ao rastrear preenchimento:', error);\n        return of(void 0);\n      })\n    );\n  }\n\n  /**\n   * Rastreia tempo economizado\n   */\n  trackTempoEconomizado(tempoSegundos: number): Observable<void> {\n    return this.http.post<void>(`${this.apiUrl}/track-tempo`, null, {\n      params: { tempoSegundos: tempoSegundos.toString() }\n    }).pipe(\n      catchError(error => {\n        console.error('❌ Erro ao rastrear tempo:', error);\n        return of(void 0);\n      })\n    );\n  }\n\n  /**\n   * Obtém dados para heatmap de horários\n   */\n  getHeatmapData(periodo: string = '30'): Observable<HeatmapData[]> {\n    return this.http.get<HeatmapData[]>(`${this.apiUrl}/heatmap`, {\n      params: { periodo },\n      headers: this.getAuthHeaders()\n    }).pipe(\n      catchError(error => {\n        console.error('❌ Erro ao carregar dados de heatmap:', error);\n        // Retornar dados vazios em caso de erro\n        return of([]).pipe(delay(600));\n      })\n    );\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}