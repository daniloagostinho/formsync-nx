{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport class ErrorHandlerService {\n  constructor() {}\n  /**\n   * Extrai mensagem amig√°vel do erro do backend\n   */\n  getErrorMessage(error) {\n    // Se √© um HttpErrorResponse\n    if (error instanceof HttpErrorResponse) {\n      return this.extractMessageFromHttpError(error);\n    }\n    // Se √© um erro simples\n    if (error?.message) {\n      return this.translateBackendMessage(error.message);\n    }\n    // Se √© uma string\n    if (typeof error === 'string') {\n      return this.translateBackendMessage(error);\n    }\n    // Erro desconhecido\n    return 'Ocorreu um erro inesperado. Tente novamente.';\n  }\n  /**\n   * Extrai mensagem de HttpErrorResponse\n   */\n  extractMessageFromHttpError(error) {\n    console.log('üîç [ERROR_HANDLER] Processando erro HTTP:', error);\n    console.log('   - Status:', error.status);\n    console.log('   - Error object:', error.error);\n    console.log('   - Error type:', typeof error.error);\n    // Verificar se tem mensagem no body da resposta\n    if (error.error?.message) {\n      console.log('   - Mensagem encontrada no body:', error.error.message);\n      return this.translateBackendMessage(error.error.message);\n    }\n    // Verificar se tem mensagem no campo 'mensagem'\n    if (error.error?.mensagem) {\n      console.log('   - Mensagem encontrada no campo mensagem:', error.error.mensagem);\n      return this.translateBackendMessage(error.error.mensagem);\n    }\n    console.log('   - Nenhuma mensagem encontrada no body, usando status HTTP');\n    // Verificar status HTTP\n    switch (error.status) {\n      case 400:\n        return 'Dados inv√°lidos. Verifique as informa√ß√µes e tente novamente.';\n      case 401:\n        return 'Email ou senha incorretos.';\n      case 403:\n        return 'Acesso negado. Sua sess√£o pode ter expirado. Fa√ßa login novamente.';\n      case 404:\n        return 'Recurso n√£o encontrado.';\n      case 409:\n        return 'Este email j√° est√° cadastrado. Use outro email ou fa√ßa login.';\n      case 500:\n        return 'Erro interno do servidor. Tente novamente em alguns instantes.';\n      default:\n        return 'Ocorreu um erro inesperado. Tente novamente.';\n    }\n  }\n  /**\n   * Traduz mensagens do backend para portugu√™s amig√°vel\n   */\n  translateBackendMessage(message) {\n    const lowerMessage = message.toLowerCase();\n    // Mapeamento de mensagens do backend\n    const messageMap = {\n      'usuario com e-mail': 'Usu√°rio n√£o encontrado',\n      'nao foi encontrado': 'Usu√°rio n√£o encontrado',\n      'usuario n√£o foi encontrado': 'Usu√°rio n√£o encontrado',\n      'user not found': 'Usu√°rio n√£o encontrado',\n      'email ou senha incorretos': 'Email ou senha incorretos',\n      'credenciais inv√°lidas': 'Email ou senha incorretos',\n      'invalid credentials': 'Email ou senha incorretos',\n      'token expirado': 'Sess√£o expirada. Fa√ßa login novamente.',\n      'token inv√°lido': 'Sess√£o expirada. Fa√ßa login novamente.',\n      'token expired': 'Sess√£o expirada. Fa√ßa login novamente.',\n      'invalid token': 'Sess√£o expirada. Fa√ßa login novamente.',\n      'limite de campos atingido': 'Limite de campos atingido para seu plano',\n      'campo limit': 'Limite de campos atingido para seu plano',\n      'field limit': 'Limite de campos atingido para seu plano',\n      'limite de templates atingido': 'Limite de templates atingido para seu plano',\n      'template limit': 'Limite de templates atingido para seu plano',\n      'fa√ßa upgrade para continuar': 'Fa√ßa upgrade do seu plano para continuar criando templates e campos',\n      'upgrade to continue': 'Fa√ßa upgrade do seu plano para continuar criando templates e campos',\n      'assinatura expirada': 'Sua assinatura expirou. Renove para continuar.',\n      'subscription expired': 'Sua assinatura expirou. Renove para continuar.',\n      'c√≥digo inv√°lido': 'C√≥digo de verifica√ß√£o inv√°lido',\n      'invalid code': 'C√≥digo de verifica√ß√£o inv√°lido',\n      'c√≥digo expirado': 'C√≥digo de verifica√ß√£o expirado',\n      'code expired': 'C√≥digo de verifica√ß√£o expirado',\n      'email j√° cadastrado': 'Este email j√° est√° cadastrado',\n      'email already exists': 'Este email j√° est√° cadastrado',\n      'email j√° existe': 'Este email j√° est√° cadastrado',\n      'campo obrigat√≥rio': 'Este campo √© obrigat√≥rio',\n      'required field': 'Este campo √© obrigat√≥rio',\n      'dados inv√°lidos': 'Dados inv√°lidos. Verifique as informa√ß√µes.',\n      'invalid data': 'Dados inv√°lidos. Verifique as informa√ß√µes.',\n      'erro interno do servidor': 'Erro interno do servidor. Tente novamente.',\n      'internal server error': 'Erro interno do servidor. Tente novamente.'\n    };\n    // Procurar por mensagens espec√≠ficas\n    for (const [key, translation] of Object.entries(messageMap)) {\n      if (lowerMessage.includes(key)) {\n        return translation;\n      }\n    }\n    // Se n√£o encontrou tradu√ß√£o espec√≠fica, retornar a mensagem original\n    return message;\n  }\n  /**\n   * Verifica se o erro √© de usu√°rio n√£o encontrado\n   */\n  isUserNotFoundError(error) {\n    const message = this.getErrorMessage(error).toLowerCase();\n    return message.includes('usu√°rio n√£o encontrado') || message.includes('user not found');\n  }\n  /**\n   * Verifica se o erro √© de credenciais inv√°lidas\n   */\n  isInvalidCredentialsError(error) {\n    const message = this.getErrorMessage(error).toLowerCase();\n    return message.includes('email ou senha incorretos') || message.includes('credenciais inv√°lidas') || message.includes('invalid credentials');\n  }\n  /**\n   * Verifica se o erro √© de token expirado\n   */\n  isTokenExpiredError(error) {\n    const message = this.getErrorMessage(error).toLowerCase();\n    return message.includes('sess√£o expirada') || message.includes('token expirado') || message.includes('token expired');\n  }\n  /**\n   * Verifica se o erro √© de acesso negado (403)\n   */\n  isAccessDeniedError(error) {\n    return error.status === 403;\n  }\n  /**\n   * Verifica se o erro requer logout autom√°tico\n   */\n  requiresLogout(error) {\n    return error.status === 401 || error.status === 403;\n  }\n  static …µfac = function ErrorHandlerService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ErrorHandlerService)();\n  };\n  static …µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: ErrorHandlerService,\n    factory: ErrorHandlerService.…µfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpErrorResponse","ErrorHandlerService","constructor","getErrorMessage","error","extractMessageFromHttpError","message","translateBackendMessage","console","log","status","mensagem","lowerMessage","toLowerCase","messageMap","key","translation","Object","entries","includes","isUserNotFoundError","isInvalidCredentialsError","isTokenExpiredError","isAccessDeniedError","requiresLogout","factory","…µfac","providedIn"],"sources":["/home/danilo/√Årea de trabalho/formsync-nx/apps/front/src/app/services/error-handler.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerService {\n\n  constructor() { }\n\n  /**\n   * Extrai mensagem amig√°vel do erro do backend\n   */\n  getErrorMessage(error: any): string {\n    // Se √© um HttpErrorResponse\n    if (error instanceof HttpErrorResponse) {\n      return this.extractMessageFromHttpError(error);\n    }\n\n    // Se √© um erro simples\n    if (error?.message) {\n      return this.translateBackendMessage(error.message);\n    }\n\n    // Se √© uma string\n    if (typeof error === 'string') {\n      return this.translateBackendMessage(error);\n    }\n\n    // Erro desconhecido\n    return 'Ocorreu um erro inesperado. Tente novamente.';\n  }\n\n  /**\n   * Extrai mensagem de HttpErrorResponse\n   */\n  private extractMessageFromHttpError(error: HttpErrorResponse): string {\n    console.log('üîç [ERROR_HANDLER] Processando erro HTTP:', error);\n    console.log('   - Status:', error.status);\n    console.log('   - Error object:', error.error);\n    console.log('   - Error type:', typeof error.error);\n\n    // Verificar se tem mensagem no body da resposta\n    if (error.error?.message) {\n      console.log('   - Mensagem encontrada no body:', error.error.message);\n      return this.translateBackendMessage(error.error.message);\n    }\n\n    // Verificar se tem mensagem no campo 'mensagem'\n    if (error.error?.mensagem) {\n      console.log('   - Mensagem encontrada no campo mensagem:', error.error.mensagem);\n      return this.translateBackendMessage(error.error.mensagem);\n    }\n\n    console.log('   - Nenhuma mensagem encontrada no body, usando status HTTP');\n\n    // Verificar status HTTP\n    switch (error.status) {\n      case 400:\n        return 'Dados inv√°lidos. Verifique as informa√ß√µes e tente novamente.';\n      case 401:\n        return 'Email ou senha incorretos.';\n      case 403:\n        return 'Acesso negado. Sua sess√£o pode ter expirado. Fa√ßa login novamente.';\n      case 404:\n        return 'Recurso n√£o encontrado.';\n      case 409:\n        return 'Este email j√° est√° cadastrado. Use outro email ou fa√ßa login.';\n      case 500:\n        return 'Erro interno do servidor. Tente novamente em alguns instantes.';\n      default:\n        return 'Ocorreu um erro inesperado. Tente novamente.';\n    }\n  }\n\n  /**\n   * Traduz mensagens do backend para portugu√™s amig√°vel\n   */\n  private translateBackendMessage(message: string): string {\n    const lowerMessage = message.toLowerCase();\n\n    // Mapeamento de mensagens do backend\n    const messageMap: { [key: string]: string } = {\n      'usuario com e-mail': 'Usu√°rio n√£o encontrado',\n      'nao foi encontrado': 'Usu√°rio n√£o encontrado',\n      'usuario n√£o foi encontrado': 'Usu√°rio n√£o encontrado',\n      'user not found': 'Usu√°rio n√£o encontrado',\n      'email ou senha incorretos': 'Email ou senha incorretos',\n      'credenciais inv√°lidas': 'Email ou senha incorretos',\n      'invalid credentials': 'Email ou senha incorretos',\n      'token expirado': 'Sess√£o expirada. Fa√ßa login novamente.',\n      'token inv√°lido': 'Sess√£o expirada. Fa√ßa login novamente.',\n      'token expired': 'Sess√£o expirada. Fa√ßa login novamente.',\n      'invalid token': 'Sess√£o expirada. Fa√ßa login novamente.',\n      'limite de campos atingido': 'Limite de campos atingido para seu plano',\n      'campo limit': 'Limite de campos atingido para seu plano',\n      'field limit': 'Limite de campos atingido para seu plano',\n      'limite de templates atingido': 'Limite de templates atingido para seu plano',\n      'template limit': 'Limite de templates atingido para seu plano',\n      'fa√ßa upgrade para continuar': 'Fa√ßa upgrade do seu plano para continuar criando templates e campos',\n      'upgrade to continue': 'Fa√ßa upgrade do seu plano para continuar criando templates e campos',\n      'assinatura expirada': 'Sua assinatura expirou. Renove para continuar.',\n      'subscription expired': 'Sua assinatura expirou. Renove para continuar.',\n      'c√≥digo inv√°lido': 'C√≥digo de verifica√ß√£o inv√°lido',\n      'invalid code': 'C√≥digo de verifica√ß√£o inv√°lido',\n      'c√≥digo expirado': 'C√≥digo de verifica√ß√£o expirado',\n      'code expired': 'C√≥digo de verifica√ß√£o expirado',\n      'email j√° cadastrado': 'Este email j√° est√° cadastrado',\n      'email already exists': 'Este email j√° est√° cadastrado',\n      'email j√° existe': 'Este email j√° est√° cadastrado',\n      'campo obrigat√≥rio': 'Este campo √© obrigat√≥rio',\n      'required field': 'Este campo √© obrigat√≥rio',\n      'dados inv√°lidos': 'Dados inv√°lidos. Verifique as informa√ß√µes.',\n      'invalid data': 'Dados inv√°lidos. Verifique as informa√ß√µes.',\n      'erro interno do servidor': 'Erro interno do servidor. Tente novamente.',\n      'internal server error': 'Erro interno do servidor. Tente novamente.'\n    };\n\n    // Procurar por mensagens espec√≠ficas\n    for (const [key, translation] of Object.entries(messageMap)) {\n      if (lowerMessage.includes(key)) {\n        return translation;\n      }\n    }\n\n    // Se n√£o encontrou tradu√ß√£o espec√≠fica, retornar a mensagem original\n    return message;\n  }\n\n  /**\n   * Verifica se o erro √© de usu√°rio n√£o encontrado\n   */\n  isUserNotFoundError(error: any): boolean {\n    const message = this.getErrorMessage(error).toLowerCase();\n    return message.includes('usu√°rio n√£o encontrado') ||\n      message.includes('user not found');\n  }\n\n  /**\n   * Verifica se o erro √© de credenciais inv√°lidas\n   */\n  isInvalidCredentialsError(error: any): boolean {\n    const message = this.getErrorMessage(error).toLowerCase();\n    return message.includes('email ou senha incorretos') ||\n      message.includes('credenciais inv√°lidas') ||\n      message.includes('invalid credentials');\n  }\n\n  /**\n   * Verifica se o erro √© de token expirado\n   */\n  isTokenExpiredError(error: any): boolean {\n    const message = this.getErrorMessage(error).toLowerCase();\n    return message.includes('sess√£o expirada') ||\n      message.includes('token expirado') ||\n      message.includes('token expired');\n  }\n\n  /**\n   * Verifica se o erro √© de acesso negado (403)\n   */\n  isAccessDeniedError(error: any): boolean {\n    return error.status === 403;\n  }\n\n  /**\n   * Verifica se o erro requer logout autom√°tico\n   */\n  requiresLogout(error: any): boolean {\n    return error.status === 401 || error.status === 403;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}