{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/card\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/select\";\nexport class DebugPlanoComponent {\n  planoLocalStorage = null;\n  planoDetectado = 'NÃO DETECTADO';\n  podeAcessarUploadCsv = false;\n  planoSelecionado = 'EMPRESARIAL';\n  logs = [];\n  ngOnInit() {\n    this.atualizarStatus();\n    this.adicionarLog('🔍 Componente de debug inicializado');\n  }\n  atualizarStatus() {\n    this.planoLocalStorage = localStorage.getItem('plano');\n    this.planoDetectado = this.detectarPlano(this.planoLocalStorage);\n    this.podeAcessarUploadCsv = this.verificarAcessoUploadCsv(this.planoDetectado);\n    this.adicionarLog(`📊 Status atualizado - Plano: ${this.planoDetectado}, Upload CSV: ${this.podeAcessarUploadCsv ? 'SIM' : 'NÃO'}`);\n  }\n  detectarPlano(plano) {\n    if (!plano) return 'NÃO DEFINIDO';\n    const planoUpper = plano.toUpperCase();\n    if (planoUpper === 'EMPRESARIAL' || planoUpper.includes('EMPRESARIAL')) {\n      return 'EMPRESARIAL';\n    } else if (planoUpper === 'PROFISSIONAL_VITALICIO' || planoUpper.includes('VITALICIO')) {\n      return 'PROFISSIONAL_VITALICIO';\n    } else if (planoUpper === 'PROFISSIONAL_MENSAL' || planoUpper.includes('MENSAL')) {\n      return 'PROFISSIONAL_MENSAL';\n    } else if (planoUpper.includes('PROFISSIONAL')) {\n      return 'PROFISSIONAL';\n    } else {\n      return 'PESSOAL';\n    }\n  }\n  verificarAcessoUploadCsv(plano) {\n    return plano === 'EMPRESARIAL' || plano === 'PROFISSIONAL_MENSAL' || plano === 'PROFISSIONAL_VITALICIO';\n  }\n  definirPlano() {\n    localStorage.setItem('plano', this.planoSelecionado);\n    this.adicionarLog(`✅ Plano definido como: ${this.planoSelecionado}`);\n    this.atualizarStatus();\n    // Disparar evento para notificar outros componentes\n    window.dispatchEvent(new StorageEvent('storage', {\n      key: 'plano',\n      newValue: this.planoSelecionado\n    }));\n  }\n  limparPlano() {\n    localStorage.removeItem('plano');\n    this.adicionarLog('🗑️ Plano removido do localStorage');\n    this.atualizarStatus();\n  }\n  recarregarPagina() {\n    this.adicionarLog('🔄 Recarregando página...');\n    window.location.reload();\n  }\n  limparLogs() {\n    this.logs = [];\n    this.adicionarLog('🧹 Logs limpos');\n  }\n  adicionarLog(mensagem) {\n    const timestamp = new Date().toLocaleTimeString();\n    this.logs.unshift(`[${timestamp}] ${mensagem}`);\n    // Manter apenas os últimos 50 logs\n    if (this.logs.length > 50) {\n      this.logs = this.logs.slice(0, 50);\n    }\n  }\n  static ɵfac = function DebugPlanoComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || DebugPlanoComponent)();\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DebugPlanoComponent,\n    selectors: [[\"app-debug-plano\"]],\n    decls: 70,\n    vars: 9,\n    consts: [[1, \"debug-container\", \"p-6\"], [1, \"text-2xl\", \"font-bold\", \"mb-6\"], [1, \"mb-6\"], [1, \"grid\", \"grid-cols-2\", \"gap-4\"], [1, \"text-lg\"], [1, \"mt-4\"], [1, \"space-y-4\"], [1, \"font-semibold\", \"mb-2\"], [1, \"flex\", \"gap-2\"], [3, \"ngModelChange\", \"ngModel\"], [\"value\", \"EMPRESARIAL\"], [\"value\", \"PROFISSIONAL_VITALICIO\"], [\"value\", \"PROFISSIONAL_MENSAL\"], [\"value\", \"PROFISSIONAL\"], [\"value\", \"PESSOAL\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", 3, \"click\"], [1, \"bg-gray-100\", \"p-4\", \"rounded\"], [1, \"text-sm\"], [\"mat-button\", \"\", 1, \"mt-2\", 3, \"click\"]],\n    template: function DebugPlanoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n        i0.ɵɵtext(2, \"\\uD83D\\uDD0D Debug do Plano do Usu\\u00E1rio\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-card\", 2)(4, \"mat-card-header\")(5, \"mat-card-title\");\n        i0.ɵɵtext(6, \"Status Atual do Plano\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"mat-card-content\")(8, \"div\", 3)(9, \"div\")(10, \"strong\");\n        i0.ɵɵtext(11, \"Plano no localStorage:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"p\", 4);\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\")(15, \"strong\");\n        i0.ɵɵtext(16, \"Plano detectado:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 4);\n        i0.ɵɵtext(18);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(19, \"div\", 5)(20, \"strong\");\n        i0.ɵɵtext(21, \"Pode acessar Upload CSV:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"p\", 4);\n        i0.ɵɵtext(23);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(24, \"mat-card\", 2)(25, \"mat-card-header\")(26, \"mat-card-title\");\n        i0.ɵɵtext(27, \"A\\u00E7\\u00F5es de Debug\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"mat-card-content\")(29, \"div\", 6)(30, \"div\")(31, \"h3\", 7);\n        i0.ɵɵtext(32, \"Definir Plano Manualmente\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"div\", 8)(34, \"mat-form-field\")(35, \"mat-label\");\n        i0.ɵɵtext(36, \"Selecione o Plano\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"mat-select\", 9);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function DebugPlanoComponent_Template_mat_select_ngModelChange_37_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.planoSelecionado, $event) || (ctx.planoSelecionado = $event);\n          return $event;\n        });\n        i0.ɵɵelementStart(38, \"mat-option\", 10);\n        i0.ɵɵtext(39, \"EMPRESARIAL\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"mat-option\", 11);\n        i0.ɵɵtext(41, \"PROFISSIONAL VITAL\\u00CDCIO\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"mat-option\", 12);\n        i0.ɵɵtext(43, \"PROFISSIONAL MENSAL\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"mat-option\", 13);\n        i0.ɵɵtext(45, \"PROFISSIONAL\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"mat-option\", 14);\n        i0.ɵɵtext(47, \"PESSOAL\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(48, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function DebugPlanoComponent_Template_button_click_48_listener() {\n          return ctx.definirPlano();\n        });\n        i0.ɵɵtext(49, \" Definir Plano \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(50, \"div\")(51, \"h3\", 7);\n        i0.ɵɵtext(52, \"Limpar localStorage\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(53, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function DebugPlanoComponent_Template_button_click_53_listener() {\n          return ctx.limparPlano();\n        });\n        i0.ɵɵtext(54, \" Limpar Plano \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(55, \"div\")(56, \"h3\", 7);\n        i0.ɵɵtext(57, \"Recarregar P\\u00E1gina\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(58, \"button\", 17);\n        i0.ɵɵlistener(\"click\", function DebugPlanoComponent_Template_button_click_58_listener() {\n          return ctx.recarregarPagina();\n        });\n        i0.ɵɵtext(59, \" Recarregar \");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(60, \"mat-card\")(61, \"mat-card-header\")(62, \"mat-card-title\");\n        i0.ɵɵtext(63, \"Logs de Debug\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(64, \"mat-card-content\")(65, \"div\", 18)(66, \"pre\", 19);\n        i0.ɵɵtext(67);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(68, \"button\", 20);\n        i0.ɵɵlistener(\"click\", function DebugPlanoComponent_Template_button_click_68_listener() {\n          return ctx.limparLogs();\n        });\n        i0.ɵɵtext(69, \" Limpar Logs \");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵtextInterpolate(ctx.planoLocalStorage || \"N\\u00C3O DEFINIDO\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.planoDetectado);\n        i0.ɵɵadvance(4);\n        i0.ɵɵclassProp(\"text-green-600\", ctx.podeAcessarUploadCsv)(\"text-red-600\", !ctx.podeAcessarUploadCsv);\n        i0.ɵɵadvance();\n        i0.ɵɵtextInterpolate1(\" \", ctx.podeAcessarUploadCsv ? \"\\u2705 SIM\" : \"\\u274C N\\u00C3O\", \" \");\n        i0.ɵɵadvance(14);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.planoSelecionado);\n        i0.ɵɵadvance(30);\n        i0.ɵɵtextInterpolate(ctx.logs.join(\"\\n\"));\n      }\n    },\n    dependencies: [CommonModule, FormsModule, i1.NgControlStatus, i1.NgModel, MatCardModule, i2.MatCard, i2.MatCardContent, i2.MatCardHeader, i2.MatCardTitle, MatButtonModule, i3.MatButton, MatIconModule, MatFormFieldModule, i4.MatFormField, i4.MatLabel, MatInputModule, MatSelectModule, i5.MatSelect, i5.MatOption, MatSnackBarModule],\n    styles: [\".debug-container[_ngcontent-%COMP%] {\\n      max-width: 800px;\\n      margin: 0 auto;\\n    }\\n    \\n    pre[_ngcontent-%COMP%] {\\n      white-space: pre-wrap;\\n      word-wrap: break-word;\\n    }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL2FwcHMvZnJvbnQvc3JjL2FwcC9jb21wb25lbnRzL2RlYnVnLXBsYW5vL2RlYnVnLXBsYW5vLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0lBQ0k7TUFDRSxnQkFBZ0I7TUFDaEIsY0FBYztJQUNoQjs7SUFFQTtNQUNFLHFCQUFxQjtNQUNyQixxQkFBcUI7SUFDdkIiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAuZGVidWctY29udGFpbmVyIHtcbiAgICAgIG1heC13aWR0aDogODAwcHg7XG4gICAgICBtYXJnaW46IDAgYXV0bztcbiAgICB9XG4gICAgXG4gICAgcHJlIHtcbiAgICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbiAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICB9XG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["CommonModule","FormsModule","MatCardModule","MatButtonModule","MatIconModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatSnackBarModule","DebugPlanoComponent","planoLocalStorage","planoDetectado","podeAcessarUploadCsv","planoSelecionado","logs","ngOnInit","atualizarStatus","adicionarLog","localStorage","getItem","detectarPlano","verificarAcessoUploadCsv","plano","planoUpper","toUpperCase","includes","definirPlano","setItem","window","dispatchEvent","StorageEvent","key","newValue","limparPlano","removeItem","recarregarPagina","location","reload","limparLogs","mensagem","timestamp","Date","toLocaleTimeString","unshift","length","slice","selectors","decls","vars","consts","template","DebugPlanoComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtwoWayListener","DebugPlanoComponent_Template_mat_select_ngModelChange_37_listener","$event","ɵɵtwoWayBindingSet","ɵɵlistener","DebugPlanoComponent_Template_button_click_48_listener","DebugPlanoComponent_Template_button_click_53_listener","DebugPlanoComponent_Template_button_click_58_listener","DebugPlanoComponent_Template_button_click_68_listener","ɵɵadvance","ɵɵtextInterpolate","ɵɵclassProp","ɵɵtextInterpolate1","ɵɵtwoWayProperty","join","i1","NgControlStatus","NgModel","i2","MatCard","MatCardContent","MatCardHeader","MatCardTitle","i3","MatButton","i4","MatFormField","MatLabel","i5","MatSelect","MatOption","styles"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/src/app/components/debug-plano/debug-plano.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\n@Component({\n    selector: 'app-debug-plano',\n    standalone: true,\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatCardModule,\n        MatButtonModule,\n        MatIconModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatSnackBarModule\n    ],\n    template: `\n    <div class=\"debug-container p-6\">\n      <h1 class=\"text-2xl font-bold mb-6\">🔍 Debug do Plano do Usuário</h1>\n      \n      <!-- Status Atual -->\n      <mat-card class=\"mb-6\">\n        <mat-card-header>\n          <mat-card-title>Status Atual do Plano</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <div class=\"grid grid-cols-2 gap-4\">\n            <div>\n              <strong>Plano no localStorage:</strong>\n              <p class=\"text-lg\">{{ planoLocalStorage || 'NÃO DEFINIDO' }}</p>\n            </div>\n            <div>\n              <strong>Plano detectado:</strong>\n              <p class=\"text-lg\">{{ planoDetectado }}</p>\n            </div>\n          </div>\n          \n          <div class=\"mt-4\">\n            <strong>Pode acessar Upload CSV:</strong>\n            <p class=\"text-lg\" [class.text-green-600]=\"podeAcessarUploadCsv\" [class.text-red-600]=\"!podeAcessarUploadCsv\">\n              {{ podeAcessarUploadCsv ? '✅ SIM' : '❌ NÃO' }}\n            </p>\n          </div>\n        </mat-card-content>\n      </mat-card>\n\n      <!-- Ações de Debug -->\n      <mat-card class=\"mb-6\">\n        <mat-card-header>\n          <mat-card-title>Ações de Debug</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <div class=\"space-y-4\">\n            <!-- Definir Plano Manualmente -->\n            <div>\n              <h3 class=\"font-semibold mb-2\">Definir Plano Manualmente</h3>\n              <div class=\"flex gap-2\">\n                <mat-form-field>\n                  <mat-label>Selecione o Plano</mat-label>\n                  <mat-select [(ngModel)]=\"planoSelecionado\">\n                    <mat-option value=\"EMPRESARIAL\">EMPRESARIAL</mat-option>\n                    <mat-option value=\"PROFISSIONAL_VITALICIO\">PROFISSIONAL VITALÍCIO</mat-option>\n                    <mat-option value=\"PROFISSIONAL_MENSAL\">PROFISSIONAL MENSAL</mat-option>\n                    <mat-option value=\"PROFISSIONAL\">PROFISSIONAL</mat-option>\n                    <mat-option value=\"PESSOAL\">PESSOAL</mat-option>\n                  </mat-select>\n                </mat-form-field>\n                <button mat-raised-button color=\"primary\" (click)=\"definirPlano()\">\n                  Definir Plano\n                </button>\n              </div>\n            </div>\n\n            <!-- Limpar localStorage -->\n            <div>\n              <h3 class=\"font-semibold mb-2\">Limpar localStorage</h3>\n              <button mat-raised-button color=\"warn\" (click)=\"limparPlano()\">\n                Limpar Plano\n              </button>\n            </div>\n\n            <!-- Recarregar Página -->\n            <div>\n              <h3 class=\"font-semibold mb-2\">Recarregar Página</h3>\n              <button mat-raised-button color=\"accent\" (click)=\"recarregarPagina()\">\n                Recarregar\n              </button>\n            </div>\n          </div>\n        </mat-card-content>\n      </mat-card>\n\n      <!-- Logs de Debug -->\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>Logs de Debug</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <div class=\"bg-gray-100 p-4 rounded\">\n            <pre class=\"text-sm\">{{ logs.join('\\n') }}</pre>\n          </div>\n          <button mat-button class=\"mt-2\" (click)=\"limparLogs()\">\n            Limpar Logs\n          </button>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n    styles: [`\n    .debug-container {\n      max-width: 800px;\n      margin: 0 auto;\n    }\n    \n    pre {\n      white-space: pre-wrap;\n      word-wrap: break-word;\n    }\n  `]\n})\nexport class DebugPlanoComponent implements OnInit {\n\n    planoLocalStorage: string | null = null;\n    planoDetectado: string = 'NÃO DETECTADO';\n    podeAcessarUploadCsv: boolean = false;\n    planoSelecionado: string = 'EMPRESARIAL';\n    logs: string[] = [];\n\n    ngOnInit() {\n        this.atualizarStatus();\n        this.adicionarLog('🔍 Componente de debug inicializado');\n    }\n\n    atualizarStatus() {\n        this.planoLocalStorage = localStorage.getItem('plano');\n        this.planoDetectado = this.detectarPlano(this.planoLocalStorage);\n        this.podeAcessarUploadCsv = this.verificarAcessoUploadCsv(this.planoDetectado);\n\n        this.adicionarLog(`📊 Status atualizado - Plano: ${this.planoDetectado}, Upload CSV: ${this.podeAcessarUploadCsv ? 'SIM' : 'NÃO'}`);\n    }\n\n    detectarPlano(plano: string | null): string {\n        if (!plano) return 'NÃO DEFINIDO';\n\n        const planoUpper = plano.toUpperCase();\n\n        if (planoUpper === 'EMPRESARIAL' || planoUpper.includes('EMPRESARIAL')) {\n            return 'EMPRESARIAL';\n        } else if (planoUpper === 'PROFISSIONAL_VITALICIO' || planoUpper.includes('VITALICIO')) {\n            return 'PROFISSIONAL_VITALICIO';\n        } else if (planoUpper === 'PROFISSIONAL_MENSAL' || planoUpper.includes('MENSAL')) {\n            return 'PROFISSIONAL_MENSAL';\n        } else if (planoUpper.includes('PROFISSIONAL')) {\n            return 'PROFISSIONAL';\n        } else {\n            return 'PESSOAL';\n        }\n    }\n\n    verificarAcessoUploadCsv(plano: string): boolean {\n        return plano === 'EMPRESARIAL' ||\n            plano === 'PROFISSIONAL_MENSAL' ||\n            plano === 'PROFISSIONAL_VITALICIO';\n    }\n\n    definirPlano() {\n        localStorage.setItem('plano', this.planoSelecionado);\n        this.adicionarLog(`✅ Plano definido como: ${this.planoSelecionado}`);\n        this.atualizarStatus();\n\n        // Disparar evento para notificar outros componentes\n        window.dispatchEvent(new StorageEvent('storage', {\n            key: 'plano',\n            newValue: this.planoSelecionado\n        }));\n    }\n\n    limparPlano() {\n        localStorage.removeItem('plano');\n        this.adicionarLog('🗑️ Plano removido do localStorage');\n        this.atualizarStatus();\n    }\n\n    recarregarPagina() {\n        this.adicionarLog('🔄 Recarregando página...');\n        window.location.reload();\n    }\n\n    limparLogs() {\n        this.logs = [];\n        this.adicionarLog('🧹 Logs limpos');\n    }\n\n    private adicionarLog(mensagem: string) {\n        const timestamp = new Date().toLocaleTimeString();\n        this.logs.unshift(`[${timestamp}] ${mensagem}`);\n\n        // Manter apenas os últimos 50 logs\n        if (this.logs.length > 50) {\n            this.logs = this.logs.slice(0, 50);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}