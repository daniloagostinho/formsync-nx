{"ast":null,"code":"import { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, NgZone, Renderer2, ElementRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ViewChild, booleanAttribute, numberAttribute, ViewChildren, ContentChild, ContentChildren, forwardRef, EventEmitter, signal, Directive, Output, NgModule } from '@angular/core';\nimport { RippleState, MatRipple, MAT_RIPPLE_GLOBAL_OPTIONS } from './ripple.mjs';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { _animationsDisabled } from './animation.mjs';\nimport { _StructuralStylesLoader } from './structural-styles.mjs';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { MatCommonModule } from './common-module.mjs';\nimport { MatRippleModule } from './ripple-module.mjs';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/coercion';\nimport '@angular/cdk/layout';\n\n/**\n * Thumb types: range slider has two thumbs (START, END) whereas single point\n * slider only has one thumb (END).\n */\nconst _c0 = [\"knob\"];\nconst _c1 = [\"valueIndicatorContainer\"];\nfunction MatSliderVisualThumb_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2, 1)(2, \"div\", 5)(3, \"span\", 6);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r0.valueIndicatorText);\n  }\n}\nconst _c2 = [\"trackActive\"];\nconst _c3 = [\"*\"];\nfunction MatSlider_Conditional_6_Conditional_2_For_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n  if (rf & 2) {\n    const tickMark_r1 = ctx.$implicit;\n    const ɵ$index_14_r2 = ctx.$index;\n    const ctx_r2 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassMap(tickMark_r1 === 0 ? \"mdc-slider__tick-mark--active\" : \"mdc-slider__tick-mark--inactive\");\n    i0.ɵɵstyleProp(\"transform\", ctx_r2._calcTickMarkTransform(ɵ$index_14_r2));\n  }\n}\nfunction MatSlider_Conditional_6_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵrepeaterCreate(0, MatSlider_Conditional_6_Conditional_2_For_1_Template, 1, 4, \"div\", 8, i0.ɵɵrepeaterTrackByIndex);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵrepeater(ctx_r2._tickMarks);\n  }\n}\nfunction MatSlider_Conditional_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6, 1);\n    i0.ɵɵconditionalCreate(2, MatSlider_Conditional_6_Conditional_2_Template, 2, 0);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵconditional(ctx_r2._cachedWidth ? 2 : -1);\n  }\n}\nfunction MatSlider_Conditional_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-slider-visual-thumb\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"discrete\", ctx_r2.discrete)(\"thumbPosition\", 1)(\"valueIndicatorText\", ctx_r2.startValueIndicatorText);\n  }\n}\nvar _MatThumb;\n(function (_MatThumb) {\n  _MatThumb[_MatThumb[\"START\"] = 1] = \"START\";\n  _MatThumb[_MatThumb[\"END\"] = 2] = \"END\";\n})(_MatThumb || (_MatThumb = {}));\n/** Tick mark enum, for discrete sliders. */\nvar _MatTickMark;\n(function (_MatTickMark) {\n  _MatTickMark[_MatTickMark[\"ACTIVE\"] = 0] = \"ACTIVE\";\n  _MatTickMark[_MatTickMark[\"INACTIVE\"] = 1] = \"INACTIVE\";\n})(_MatTickMark || (_MatTickMark = {}));\n/**\n * Injection token that can be used for a `MatSlider` to provide itself as a\n * parent to the `MatSliderThumb` and `MatSliderRangeThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER = new InjectionToken('_MatSlider');\n/**\n * Injection token that can be used to query for a `MatSliderThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER_THUMB = new InjectionToken('_MatSliderThumb');\n/**\n * Injection token that can be used to query for a `MatSliderRangeThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER_RANGE_THUMB = new InjectionToken('_MatSliderRangeThumb');\n/**\n * Injection token that can be used to query for a `MatSliderVisualThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER_VISUAL_THUMB = new InjectionToken('_MatSliderVisualThumb');\n/**\n * A simple change event emitted by the MatSlider component.\n * @deprecated Use event bindings directly on the MatSliderThumbs for `change` and `input` events. See https://v17.material.angular.dev/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatSliderChange {\n  /** The MatSliderThumb that was interacted with. */\n  source;\n  /** The MatSlider that was interacted with. */\n  parent;\n  /** The new value of the source slider. */\n  value;\n}\n\n/**\n * The visual slider thumb.\n *\n * Handles the slider thumb ripple states (hover, focus, and active),\n * and displaying the value tooltip on discrete sliders.\n * @docs-private\n */\nclass MatSliderVisualThumb {\n  _cdr = inject(ChangeDetectorRef);\n  _ngZone = inject(NgZone);\n  _slider = inject(MAT_SLIDER);\n  _renderer = inject(Renderer2);\n  _listenerCleanups;\n  /** Whether the slider displays a numeric value label upon pressing the thumb. */\n  discrete;\n  /** Indicates which slider thumb this input corresponds to. */\n  thumbPosition;\n  /** The display value of the slider thumb. */\n  valueIndicatorText;\n  /** The MatRipple for this slider thumb. */\n  _ripple;\n  /** The slider thumb knob. */\n  _knob;\n  /** The slider thumb value indicator container. */\n  _valueIndicatorContainer;\n  /** The slider input corresponding to this slider thumb. */\n  _sliderInput;\n  /** The native html element of the slider input corresponding to this thumb. */\n  _sliderInputEl;\n  /** The RippleRef for the slider thumbs hover state. */\n  _hoverRippleRef;\n  /** The RippleRef for the slider thumbs focus state. */\n  _focusRippleRef;\n  /** The RippleRef for the slider thumbs active state. */\n  _activeRippleRef;\n  /** Whether the slider thumb is currently being hovered. */\n  _isHovered = false;\n  /** Whether the slider thumb is currently being pressed. */\n  _isActive = false;\n  /** Whether the value indicator tooltip is visible. */\n  _isValueIndicatorVisible = false;\n  /** The host native HTML input element. */\n  _hostElement = inject(ElementRef).nativeElement;\n  _platform = inject(Platform);\n  constructor() {}\n  ngAfterViewInit() {\n    const sliderInput = this._slider._getInput(this.thumbPosition);\n    // No-op if the slider isn't configured properly. `MatSlider` will\n    // throw an error instructing the user how to set up the slider.\n    if (!sliderInput) {\n      return;\n    }\n    this._ripple.radius = 24;\n    this._sliderInput = sliderInput;\n    this._sliderInputEl = this._sliderInput._hostElement;\n    // These listeners don't update any data bindings so we bind them outside\n    // of the NgZone to prevent Angular from needlessly running change detection.\n    this._ngZone.runOutsideAngular(() => {\n      const input = this._sliderInputEl;\n      const renderer = this._renderer;\n      this._listenerCleanups = [renderer.listen(input, 'pointermove', this._onPointerMove), renderer.listen(input, 'pointerdown', this._onDragStart), renderer.listen(input, 'pointerup', this._onDragEnd), renderer.listen(input, 'pointerleave', this._onMouseLeave), renderer.listen(input, 'focus', this._onFocus), renderer.listen(input, 'blur', this._onBlur)];\n    });\n  }\n  ngOnDestroy() {\n    this._listenerCleanups?.forEach(cleanup => cleanup());\n  }\n  _onPointerMove = event => {\n    if (this._sliderInput._isFocused) {\n      return;\n    }\n    const rect = this._hostElement.getBoundingClientRect();\n    const isHovered = this._slider._isCursorOnSliderThumb(event, rect);\n    this._isHovered = isHovered;\n    if (isHovered) {\n      this._showHoverRipple();\n    } else {\n      this._hideRipple(this._hoverRippleRef);\n    }\n  };\n  _onMouseLeave = () => {\n    this._isHovered = false;\n    this._hideRipple(this._hoverRippleRef);\n  };\n  _onFocus = () => {\n    // We don't want to show the hover ripple on top of the focus ripple.\n    // Happen when the users cursor is over a thumb and then the user tabs to it.\n    this._hideRipple(this._hoverRippleRef);\n    this._showFocusRipple();\n    this._hostElement.classList.add('mdc-slider__thumb--focused');\n  };\n  _onBlur = () => {\n    // Happens when the user tabs away while still dragging a thumb.\n    if (!this._isActive) {\n      this._hideRipple(this._focusRippleRef);\n    }\n    // Happens when the user tabs away from a thumb but their cursor is still over it.\n    if (this._isHovered) {\n      this._showHoverRipple();\n    }\n    this._hostElement.classList.remove('mdc-slider__thumb--focused');\n  };\n  _onDragStart = event => {\n    if (event.button !== 0) {\n      return;\n    }\n    this._isActive = true;\n    this._showActiveRipple();\n  };\n  _onDragEnd = () => {\n    this._isActive = false;\n    this._hideRipple(this._activeRippleRef);\n    // Happens when the user starts dragging a thumb, tabs away, and then stops dragging.\n    if (!this._sliderInput._isFocused) {\n      this._hideRipple(this._focusRippleRef);\n    }\n    // On Safari we need to immediately re-show the hover ripple because\n    // sliders do not retain focus from pointer events on that platform.\n    if (this._platform.SAFARI) {\n      this._showHoverRipple();\n    }\n  };\n  /** Handles displaying the hover ripple. */\n  _showHoverRipple() {\n    if (!this._isShowingRipple(this._hoverRippleRef)) {\n      this._hoverRippleRef = this._showRipple({\n        enterDuration: 0,\n        exitDuration: 0\n      });\n      this._hoverRippleRef?.element.classList.add('mat-mdc-slider-hover-ripple');\n    }\n  }\n  /** Handles displaying the focus ripple. */\n  _showFocusRipple() {\n    // Show the focus ripple event if noop animations are enabled.\n    if (!this._isShowingRipple(this._focusRippleRef)) {\n      this._focusRippleRef = this._showRipple({\n        enterDuration: 0,\n        exitDuration: 0\n      }, true);\n      this._focusRippleRef?.element.classList.add('mat-mdc-slider-focus-ripple');\n    }\n  }\n  /** Handles displaying the active ripple. */\n  _showActiveRipple() {\n    if (!this._isShowingRipple(this._activeRippleRef)) {\n      this._activeRippleRef = this._showRipple({\n        enterDuration: 225,\n        exitDuration: 400\n      });\n      this._activeRippleRef?.element.classList.add('mat-mdc-slider-active-ripple');\n    }\n  }\n  /** Whether the given rippleRef is currently fading in or visible. */\n  _isShowingRipple(rippleRef) {\n    return rippleRef?.state === RippleState.FADING_IN || rippleRef?.state === RippleState.VISIBLE;\n  }\n  /** Manually launches the slider thumb ripple using the specified ripple animation config. */\n  _showRipple(animation, ignoreGlobalRippleConfig) {\n    if (this._slider.disabled) {\n      return;\n    }\n    this._showValueIndicator();\n    if (this._slider._isRange) {\n      const sibling = this._slider._getThumb(this.thumbPosition === _MatThumb.START ? _MatThumb.END : _MatThumb.START);\n      sibling._showValueIndicator();\n    }\n    if (this._slider._globalRippleOptions?.disabled && !ignoreGlobalRippleConfig) {\n      return;\n    }\n    return this._ripple.launch({\n      animation: this._slider._noopAnimations ? {\n        enterDuration: 0,\n        exitDuration: 0\n      } : animation,\n      centered: true,\n      persistent: true\n    });\n  }\n  /**\n   * Fades out the given ripple.\n   * Also hides the value indicator if no ripple is showing.\n   */\n  _hideRipple(rippleRef) {\n    rippleRef?.fadeOut();\n    if (this._isShowingAnyRipple()) {\n      return;\n    }\n    if (!this._slider._isRange) {\n      this._hideValueIndicator();\n    }\n    const sibling = this._getSibling();\n    if (!sibling._isShowingAnyRipple()) {\n      this._hideValueIndicator();\n      sibling._hideValueIndicator();\n    }\n  }\n  /** Shows the value indicator ui. */\n  _showValueIndicator() {\n    this._hostElement.classList.add('mdc-slider__thumb--with-indicator');\n  }\n  /** Hides the value indicator ui. */\n  _hideValueIndicator() {\n    this._hostElement.classList.remove('mdc-slider__thumb--with-indicator');\n  }\n  _getSibling() {\n    return this._slider._getThumb(this.thumbPosition === _MatThumb.START ? _MatThumb.END : _MatThumb.START);\n  }\n  /** Gets the value indicator container's native HTML element. */\n  _getValueIndicatorContainer() {\n    return this._valueIndicatorContainer?.nativeElement;\n  }\n  /** Gets the native HTML element of the slider thumb knob. */\n  _getKnob() {\n    return this._knob.nativeElement;\n  }\n  _isShowingAnyRipple() {\n    return this._isShowingRipple(this._hoverRippleRef) || this._isShowingRipple(this._focusRippleRef) || this._isShowingRipple(this._activeRippleRef);\n  }\n  static ɵfac = function MatSliderVisualThumb_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatSliderVisualThumb)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatSliderVisualThumb,\n    selectors: [[\"mat-slider-visual-thumb\"]],\n    viewQuery: function MatSliderVisualThumb_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatRipple, 5);\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._ripple = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._knob = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._valueIndicatorContainer = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mdc-slider__thumb\", \"mat-mdc-slider-visual-thumb\"],\n    inputs: {\n      discrete: \"discrete\",\n      thumbPosition: \"thumbPosition\",\n      valueIndicatorText: \"valueIndicatorText\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_SLIDER_VISUAL_THUMB,\n      useExisting: MatSliderVisualThumb\n    }])],\n    decls: 4,\n    vars: 2,\n    consts: [[\"knob\", \"\"], [\"valueIndicatorContainer\", \"\"], [1, \"mdc-slider__value-indicator-container\"], [1, \"mdc-slider__thumb-knob\"], [\"matRipple\", \"\", 1, \"mat-focus-indicator\", 3, \"matRippleDisabled\"], [1, \"mdc-slider__value-indicator\"], [1, \"mdc-slider__value-indicator-text\"]],\n    template: function MatSliderVisualThumb_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵconditionalCreate(0, MatSliderVisualThumb_Conditional_0_Template, 5, 1, \"div\", 2);\n        i0.ɵɵelement(1, \"div\", 3, 0)(3, \"div\", 4);\n      }\n      if (rf & 2) {\n        i0.ɵɵconditional(ctx.discrete ? 0 : -1);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matRippleDisabled\", true);\n      }\n    },\n    dependencies: [MatRipple],\n    styles: [\".mat-mdc-slider-visual-thumb .mat-ripple{height:100%;width:100%}.mat-mdc-slider .mdc-slider__tick-marks{justify-content:start}.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--active,.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--inactive{position:absolute;left:2px}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSliderVisualThumb, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slider-visual-thumb',\n      host: {\n        'class': 'mdc-slider__thumb mat-mdc-slider-visual-thumb'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: MAT_SLIDER_VISUAL_THUMB,\n        useExisting: MatSliderVisualThumb\n      }],\n      imports: [MatRipple],\n      template: \"@if (discrete) {\\n  <div class=\\\"mdc-slider__value-indicator-container\\\" #valueIndicatorContainer>\\n    <div class=\\\"mdc-slider__value-indicator\\\">\\n      <span class=\\\"mdc-slider__value-indicator-text\\\">{{valueIndicatorText}}</span>\\n    </div>\\n  </div>\\n}\\n<div class=\\\"mdc-slider__thumb-knob\\\" #knob></div>\\n<div matRipple class=\\\"mat-focus-indicator\\\" [matRippleDisabled]=\\\"true\\\"></div>\\n\",\n      styles: [\".mat-mdc-slider-visual-thumb .mat-ripple{height:100%;width:100%}.mat-mdc-slider .mdc-slider__tick-marks{justify-content:start}.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--active,.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--inactive{position:absolute;left:2px}\\n\"]\n    }]\n  }], () => [], {\n    discrete: [{\n      type: Input\n    }],\n    thumbPosition: [{\n      type: Input\n    }],\n    valueIndicatorText: [{\n      type: Input\n    }],\n    _ripple: [{\n      type: ViewChild,\n      args: [MatRipple]\n    }],\n    _knob: [{\n      type: ViewChild,\n      args: ['knob']\n    }],\n    _valueIndicatorContainer: [{\n      type: ViewChild,\n      args: ['valueIndicatorContainer']\n    }]\n  });\n})();\n\n// TODO(wagnermaciel): maybe handle the following edge case:\n// 1. start dragging discrete slider\n// 2. tab to disable checkbox\n// 3. without ending drag, disable the slider\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nclass MatSlider {\n  _ngZone = inject(NgZone);\n  _cdr = inject(ChangeDetectorRef);\n  _elementRef = inject(ElementRef);\n  _dir = inject(Directionality, {\n    optional: true\n  });\n  _globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {\n    optional: true\n  });\n  /** The active portion of the slider track. */\n  _trackActive;\n  /** The slider thumb(s). */\n  _thumbs;\n  /** The sliders hidden range input(s). */\n  _input;\n  /** The sliders hidden range input(s). */\n  _inputs;\n  /** Whether the slider is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(v) {\n    this._disabled = v;\n    const endInput = this._getInput(_MatThumb.END);\n    const startInput = this._getInput(_MatThumb.START);\n    if (endInput) {\n      endInput.disabled = this._disabled;\n    }\n    if (startInput) {\n      startInput.disabled = this._disabled;\n    }\n  }\n  _disabled = false;\n  /** Whether the slider displays a numeric value label upon pressing the thumb. */\n  get discrete() {\n    return this._discrete;\n  }\n  set discrete(v) {\n    this._discrete = v;\n    this._updateValueIndicatorUIs();\n  }\n  _discrete = false;\n  /** Whether the slider displays tick marks along the slider track. */\n  get showTickMarks() {\n    return this._showTickMarks;\n  }\n  set showTickMarks(value) {\n    this._showTickMarks = value;\n    if (this._hasViewInitialized) {\n      this._updateTickMarkUI();\n      this._updateTickMarkTrackUI();\n    }\n  }\n  _showTickMarks = false;\n  /** The minimum value that the slider can have. */\n  get min() {\n    return this._min;\n  }\n  set min(v) {\n    const min = v === undefined || v === null || isNaN(v) ? this._min : v;\n    if (this._min !== min) {\n      this._updateMin(min);\n    }\n  }\n  _min = 0;\n  /**\n   * Theme color of the slider. This API is supported in M2 themes only, it\n   * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/slider/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  color;\n  /** Whether ripples are disabled in the slider. */\n  disableRipple = false;\n  _updateMin(min) {\n    const prevMin = this._min;\n    this._min = min;\n    this._isRange ? this._updateMinRange({\n      old: prevMin,\n      new: min\n    }) : this._updateMinNonRange(min);\n    this._onMinMaxOrStepChange();\n  }\n  _updateMinRange(min) {\n    const endInput = this._getInput(_MatThumb.END);\n    const startInput = this._getInput(_MatThumb.START);\n    const oldEndValue = endInput.value;\n    const oldStartValue = startInput.value;\n    startInput.min = min.new;\n    endInput.min = Math.max(min.new, startInput.value);\n    startInput.max = Math.min(endInput.max, endInput.value);\n    startInput._updateWidthInactive();\n    endInput._updateWidthInactive();\n    min.new < min.old ? this._onTranslateXChangeBySideEffect(endInput, startInput) : this._onTranslateXChangeBySideEffect(startInput, endInput);\n    if (oldEndValue !== endInput.value) {\n      this._onValueChange(endInput);\n    }\n    if (oldStartValue !== startInput.value) {\n      this._onValueChange(startInput);\n    }\n  }\n  _updateMinNonRange(min) {\n    const input = this._getInput(_MatThumb.END);\n    if (input) {\n      const oldValue = input.value;\n      input.min = min;\n      input._updateThumbUIByValue();\n      this._updateTrackUI(input);\n      if (oldValue !== input.value) {\n        this._onValueChange(input);\n      }\n    }\n  }\n  /** The maximum value that the slider can have. */\n  get max() {\n    return this._max;\n  }\n  set max(v) {\n    const max = v === undefined || v === null || isNaN(v) ? this._max : v;\n    if (this._max !== max) {\n      this._updateMax(max);\n    }\n  }\n  _max = 100;\n  _updateMax(max) {\n    const prevMax = this._max;\n    this._max = max;\n    this._isRange ? this._updateMaxRange({\n      old: prevMax,\n      new: max\n    }) : this._updateMaxNonRange(max);\n    this._onMinMaxOrStepChange();\n  }\n  _updateMaxRange(max) {\n    const endInput = this._getInput(_MatThumb.END);\n    const startInput = this._getInput(_MatThumb.START);\n    const oldEndValue = endInput.value;\n    const oldStartValue = startInput.value;\n    endInput.max = max.new;\n    startInput.max = Math.min(max.new, endInput.value);\n    endInput.min = startInput.value;\n    endInput._updateWidthInactive();\n    startInput._updateWidthInactive();\n    max.new > max.old ? this._onTranslateXChangeBySideEffect(startInput, endInput) : this._onTranslateXChangeBySideEffect(endInput, startInput);\n    if (oldEndValue !== endInput.value) {\n      this._onValueChange(endInput);\n    }\n    if (oldStartValue !== startInput.value) {\n      this._onValueChange(startInput);\n    }\n  }\n  _updateMaxNonRange(max) {\n    const input = this._getInput(_MatThumb.END);\n    if (input) {\n      const oldValue = input.value;\n      input.max = max;\n      input._updateThumbUIByValue();\n      this._updateTrackUI(input);\n      if (oldValue !== input.value) {\n        this._onValueChange(input);\n      }\n    }\n  }\n  /** The values at which the thumb will snap. */\n  get step() {\n    return this._step;\n  }\n  set step(v) {\n    const step = isNaN(v) ? this._step : v;\n    if (this._step !== step) {\n      this._updateStep(step);\n    }\n  }\n  _step = 1;\n  _updateStep(step) {\n    this._step = step;\n    this._isRange ? this._updateStepRange() : this._updateStepNonRange();\n    this._onMinMaxOrStepChange();\n  }\n  _updateStepRange() {\n    const endInput = this._getInput(_MatThumb.END);\n    const startInput = this._getInput(_MatThumb.START);\n    const oldEndValue = endInput.value;\n    const oldStartValue = startInput.value;\n    const prevStartValue = startInput.value;\n    endInput.min = this._min;\n    startInput.max = this._max;\n    endInput.step = this._step;\n    startInput.step = this._step;\n    if (this._platform.SAFARI) {\n      endInput.value = endInput.value;\n      startInput.value = startInput.value;\n    }\n    endInput.min = Math.max(this._min, startInput.value);\n    startInput.max = Math.min(this._max, endInput.value);\n    startInput._updateWidthInactive();\n    endInput._updateWidthInactive();\n    endInput.value < prevStartValue ? this._onTranslateXChangeBySideEffect(startInput, endInput) : this._onTranslateXChangeBySideEffect(endInput, startInput);\n    if (oldEndValue !== endInput.value) {\n      this._onValueChange(endInput);\n    }\n    if (oldStartValue !== startInput.value) {\n      this._onValueChange(startInput);\n    }\n  }\n  _updateStepNonRange() {\n    const input = this._getInput(_MatThumb.END);\n    if (input) {\n      const oldValue = input.value;\n      input.step = this._step;\n      if (this._platform.SAFARI) {\n        input.value = input.value;\n      }\n      input._updateThumbUIByValue();\n      if (oldValue !== input.value) {\n        this._onValueChange(input);\n      }\n    }\n  }\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  displayWith = value => `${value}`;\n  /** Used to keep track of & render the active & inactive tick marks on the slider track. */\n  _tickMarks;\n  /** Whether animations have been disabled. */\n  _noopAnimations = _animationsDisabled();\n  /** Subscription to changes to the directionality (LTR / RTL) context for the application. */\n  _dirChangeSubscription;\n  /** Observer used to monitor size changes in the slider. */\n  _resizeObserver;\n  // Stored dimensions to avoid calling getBoundingClientRect redundantly.\n  _cachedWidth;\n  _cachedLeft;\n  _rippleRadius = 24;\n  // The value indicator tooltip text for the visual slider thumb(s).\n  /** @docs-private */\n  startValueIndicatorText = '';\n  /** @docs-private */\n  endValueIndicatorText = '';\n  // Used to control the translateX of the visual slider thumb(s).\n  _endThumbTransform;\n  _startThumbTransform;\n  _isRange = false;\n  /** Whether the slider is rtl. */\n  _isRtl = false;\n  _hasViewInitialized = false;\n  /**\n   * The width of the tick mark track.\n   * The tick mark track width is different from full track width\n   */\n  _tickMarkTrackWidth = 0;\n  _hasAnimation = false;\n  _resizeTimer = null;\n  _platform = inject(Platform);\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => this._onDirChange());\n      this._isRtl = this._dir.value === 'rtl';\n    }\n  }\n  /** The radius of the native slider's knob. AFAIK there is no way to avoid hardcoding this. */\n  _knobRadius = 8;\n  _inputPadding;\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._updateDimensions();\n    }\n    const eInput = this._getInput(_MatThumb.END);\n    const sInput = this._getInput(_MatThumb.START);\n    this._isRange = !!eInput && !!sInput;\n    this._cdr.detectChanges();\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      _validateInputs(this._isRange, this._getInput(_MatThumb.END), this._getInput(_MatThumb.START));\n    }\n    const thumb = this._getThumb(_MatThumb.END);\n    this._rippleRadius = thumb._ripple.radius;\n    this._inputPadding = this._rippleRadius - this._knobRadius;\n    this._isRange ? this._initUIRange(eInput, sInput) : this._initUINonRange(eInput);\n    this._updateTrackUI(eInput);\n    this._updateTickMarkUI();\n    this._updateTickMarkTrackUI();\n    this._observeHostResize();\n    this._cdr.detectChanges();\n  }\n  _initUINonRange(eInput) {\n    eInput.initProps();\n    eInput.initUI();\n    this._updateValueIndicatorUI(eInput);\n    this._hasViewInitialized = true;\n    eInput._updateThumbUIByValue();\n  }\n  _initUIRange(eInput, sInput) {\n    eInput.initProps();\n    eInput.initUI();\n    sInput.initProps();\n    sInput.initUI();\n    eInput._updateMinMax();\n    sInput._updateMinMax();\n    eInput._updateStaticStyles();\n    sInput._updateStaticStyles();\n    this._updateValueIndicatorUIs();\n    this._hasViewInitialized = true;\n    eInput._updateThumbUIByValue();\n    sInput._updateThumbUIByValue();\n  }\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._resizeObserver?.disconnect();\n    this._resizeObserver = null;\n  }\n  /** Handles updating the slider ui after a dir change. */\n  _onDirChange() {\n    this._isRtl = this._dir?.value === 'rtl';\n    this._isRange ? this._onDirChangeRange() : this._onDirChangeNonRange();\n    this._updateTickMarkUI();\n  }\n  _onDirChangeRange() {\n    const endInput = this._getInput(_MatThumb.END);\n    const startInput = this._getInput(_MatThumb.START);\n    endInput._setIsLeftThumb();\n    startInput._setIsLeftThumb();\n    endInput.translateX = endInput._calcTranslateXByValue();\n    startInput.translateX = startInput._calcTranslateXByValue();\n    endInput._updateStaticStyles();\n    startInput._updateStaticStyles();\n    endInput._updateWidthInactive();\n    startInput._updateWidthInactive();\n    endInput._updateThumbUIByValue();\n    startInput._updateThumbUIByValue();\n  }\n  _onDirChangeNonRange() {\n    const input = this._getInput(_MatThumb.END);\n    input._updateThumbUIByValue();\n  }\n  /** Starts observing and updating the slider if the host changes its size. */\n  _observeHostResize() {\n    if (typeof ResizeObserver === 'undefined' || !ResizeObserver) {\n      return;\n    }\n    this._ngZone.runOutsideAngular(() => {\n      this._resizeObserver = new ResizeObserver(() => {\n        if (this._isActive()) {\n          return;\n        }\n        if (this._resizeTimer) {\n          clearTimeout(this._resizeTimer);\n        }\n        this._onResize();\n      });\n      this._resizeObserver.observe(this._elementRef.nativeElement);\n    });\n  }\n  /** Whether any of the thumbs are currently active. */\n  _isActive() {\n    return this._getThumb(_MatThumb.START)._isActive || this._getThumb(_MatThumb.END)._isActive;\n  }\n  _getValue(thumbPosition = _MatThumb.END) {\n    const input = this._getInput(thumbPosition);\n    if (!input) {\n      return this.min;\n    }\n    return input.value;\n  }\n  _skipUpdate() {\n    return !!(this._getInput(_MatThumb.START)?._skipUIUpdate || this._getInput(_MatThumb.END)?._skipUIUpdate);\n  }\n  /** Stores the slider dimensions. */\n  _updateDimensions() {\n    this._cachedWidth = this._elementRef.nativeElement.offsetWidth;\n    this._cachedLeft = this._elementRef.nativeElement.getBoundingClientRect().left;\n  }\n  /** Sets the styles for the active portion of the track. */\n  _setTrackActiveStyles(styles) {\n    const trackStyle = this._trackActive.nativeElement.style;\n    trackStyle.left = styles.left;\n    trackStyle.right = styles.right;\n    trackStyle.transformOrigin = styles.transformOrigin;\n    trackStyle.transform = styles.transform;\n  }\n  /** Returns the translateX positioning for a tick mark based on it's index. */\n  _calcTickMarkTransform(index) {\n    // TODO(wagnermaciel): See if we can avoid doing this and just using flex to position these.\n    const offset = index * (this._tickMarkTrackWidth / (this._tickMarks.length - 1));\n    const translateX = this._isRtl ? this._cachedWidth - 6 - offset : offset;\n    return `translateX(${translateX}px`;\n  }\n  // Handlers for updating the slider ui.\n  _onTranslateXChange(source) {\n    if (!this._hasViewInitialized) {\n      return;\n    }\n    this._updateThumbUI(source);\n    this._updateTrackUI(source);\n    this._updateOverlappingThumbUI(source);\n  }\n  _onTranslateXChangeBySideEffect(input1, input2) {\n    if (!this._hasViewInitialized) {\n      return;\n    }\n    input1._updateThumbUIByValue();\n    input2._updateThumbUIByValue();\n  }\n  _onValueChange(source) {\n    if (!this._hasViewInitialized) {\n      return;\n    }\n    this._updateValueIndicatorUI(source);\n    this._updateTickMarkUI();\n    this._cdr.detectChanges();\n  }\n  _onMinMaxOrStepChange() {\n    if (!this._hasViewInitialized) {\n      return;\n    }\n    this._updateTickMarkUI();\n    this._updateTickMarkTrackUI();\n    this._cdr.markForCheck();\n  }\n  _onResize() {\n    if (!this._hasViewInitialized) {\n      return;\n    }\n    this._updateDimensions();\n    if (this._isRange) {\n      const eInput = this._getInput(_MatThumb.END);\n      const sInput = this._getInput(_MatThumb.START);\n      eInput._updateThumbUIByValue();\n      sInput._updateThumbUIByValue();\n      eInput._updateStaticStyles();\n      sInput._updateStaticStyles();\n      eInput._updateMinMax();\n      sInput._updateMinMax();\n      eInput._updateWidthInactive();\n      sInput._updateWidthInactive();\n    } else {\n      const eInput = this._getInput(_MatThumb.END);\n      if (eInput) {\n        eInput._updateThumbUIByValue();\n      }\n    }\n    this._updateTickMarkUI();\n    this._updateTickMarkTrackUI();\n    this._cdr.detectChanges();\n  }\n  /** Whether or not the slider thumbs overlap. */\n  _thumbsOverlap = false;\n  /** Returns true if the slider knobs are overlapping one another. */\n  _areThumbsOverlapping() {\n    const startInput = this._getInput(_MatThumb.START);\n    const endInput = this._getInput(_MatThumb.END);\n    if (!startInput || !endInput) {\n      return false;\n    }\n    return endInput.translateX - startInput.translateX < 20;\n  }\n  /**\n   * Updates the class names of overlapping slider thumbs so\n   * that the current active thumb is styled to be on \"top\".\n   */\n  _updateOverlappingThumbClassNames(source) {\n    const sibling = source.getSibling();\n    const sourceThumb = this._getThumb(source.thumbPosition);\n    const siblingThumb = this._getThumb(sibling.thumbPosition);\n    siblingThumb._hostElement.classList.remove('mdc-slider__thumb--top');\n    sourceThumb._hostElement.classList.toggle('mdc-slider__thumb--top', this._thumbsOverlap);\n  }\n  /** Updates the UI of slider thumbs when they begin or stop overlapping. */\n  _updateOverlappingThumbUI(source) {\n    if (!this._isRange || this._skipUpdate()) {\n      return;\n    }\n    if (this._thumbsOverlap !== this._areThumbsOverlapping()) {\n      this._thumbsOverlap = !this._thumbsOverlap;\n      this._updateOverlappingThumbClassNames(source);\n    }\n  }\n  // _MatThumb styles update conditions\n  //\n  // 1. TranslateX, resize, or dir change\n  //    - Reason: The thumb styles need to be updated according to the new translateX.\n  // 2. Min, max, or step\n  //    - Reason: The value may have silently changed.\n  /** Updates the translateX of the given thumb. */\n  _updateThumbUI(source) {\n    if (this._skipUpdate()) {\n      return;\n    }\n    const thumb = this._getThumb(source.thumbPosition === _MatThumb.END ? _MatThumb.END : _MatThumb.START);\n    thumb._hostElement.style.transform = `translateX(${source.translateX}px)`;\n  }\n  // Value indicator text update conditions\n  //\n  // 1. Value\n  //    - Reason: The value displayed needs to be updated.\n  // 2. Min, max, or step\n  //    - Reason: The value may have silently changed.\n  /** Updates the value indicator tooltip ui for the given thumb. */\n  _updateValueIndicatorUI(source) {\n    if (this._skipUpdate()) {\n      return;\n    }\n    const valuetext = this.displayWith(source.value);\n    this._hasViewInitialized ? source._valuetext.set(valuetext) : source._hostElement.setAttribute('aria-valuetext', valuetext);\n    if (this.discrete) {\n      source.thumbPosition === _MatThumb.START ? this.startValueIndicatorText = valuetext : this.endValueIndicatorText = valuetext;\n      const visualThumb = this._getThumb(source.thumbPosition);\n      valuetext.length < 3 ? visualThumb._hostElement.classList.add('mdc-slider__thumb--short-value') : visualThumb._hostElement.classList.remove('mdc-slider__thumb--short-value');\n    }\n  }\n  /** Updates all value indicator UIs in the slider. */\n  _updateValueIndicatorUIs() {\n    const eInput = this._getInput(_MatThumb.END);\n    const sInput = this._getInput(_MatThumb.START);\n    if (eInput) {\n      this._updateValueIndicatorUI(eInput);\n    }\n    if (sInput) {\n      this._updateValueIndicatorUI(sInput);\n    }\n  }\n  // Update Tick Mark Track Width\n  //\n  // 1. Min, max, or step\n  //    - Reason: The maximum reachable value may have changed.\n  //    - Side note: The maximum reachable value is different from the maximum value set by the\n  //      user. For example, a slider with [min: 5, max: 100, step: 10] would have a maximum\n  //      reachable value of 95.\n  // 2. Resize\n  //    - Reason: The position for the maximum reachable value needs to be recalculated.\n  /** Updates the width of the tick mark track. */\n  _updateTickMarkTrackUI() {\n    if (!this.showTickMarks || this._skipUpdate()) {\n      return;\n    }\n    const step = this._step && this._step > 0 ? this._step : 1;\n    const maxValue = Math.floor(this.max / step) * step;\n    const percentage = (maxValue - this.min) / (this.max - this.min);\n    this._tickMarkTrackWidth = (this._cachedWidth - 6) * percentage;\n  }\n  // Track active update conditions\n  //\n  // 1. TranslateX\n  //    - Reason: The track active should line up with the new thumb position.\n  // 2. Min or max\n  //    - Reason #1: The 'active' percentage needs to be recalculated.\n  //    - Reason #2: The value may have silently changed.\n  // 3. Step\n  //    - Reason: The value may have silently changed causing the thumb(s) to shift.\n  // 4. Dir change\n  //    - Reason: The track active will need to be updated according to the new thumb position(s).\n  // 5. Resize\n  //    - Reason: The total width the 'active' tracks translateX is based on has changed.\n  /** Updates the scale on the active portion of the track. */\n  _updateTrackUI(source) {\n    if (this._skipUpdate()) {\n      return;\n    }\n    this._isRange ? this._updateTrackUIRange(source) : this._updateTrackUINonRange(source);\n  }\n  _updateTrackUIRange(source) {\n    const sibling = source.getSibling();\n    if (!sibling || !this._cachedWidth) {\n      return;\n    }\n    const activePercentage = Math.abs(sibling.translateX - source.translateX) / this._cachedWidth;\n    if (source._isLeftThumb && this._cachedWidth) {\n      this._setTrackActiveStyles({\n        left: 'auto',\n        right: `${this._cachedWidth - sibling.translateX}px`,\n        transformOrigin: 'right',\n        transform: `scaleX(${activePercentage})`\n      });\n    } else {\n      this._setTrackActiveStyles({\n        left: `${sibling.translateX}px`,\n        right: 'auto',\n        transformOrigin: 'left',\n        transform: `scaleX(${activePercentage})`\n      });\n    }\n  }\n  _updateTrackUINonRange(source) {\n    this._isRtl ? this._setTrackActiveStyles({\n      left: 'auto',\n      right: '0px',\n      transformOrigin: 'right',\n      transform: `scaleX(${1 - source.fillPercentage})`\n    }) : this._setTrackActiveStyles({\n      left: '0px',\n      right: 'auto',\n      transformOrigin: 'left',\n      transform: `scaleX(${source.fillPercentage})`\n    });\n  }\n  // Tick mark update conditions\n  //\n  // 1. Value\n  //    - Reason: a tick mark which was once active might now be inactive or vice versa.\n  // 2. Min, max, or step\n  //    - Reason #1: the number of tick marks may have changed.\n  //    - Reason #2: The value may have silently changed.\n  /** Updates the dots along the slider track. */\n  _updateTickMarkUI() {\n    if (!this.showTickMarks || this.step === undefined || this.min === undefined || this.max === undefined) {\n      return;\n    }\n    const step = this.step > 0 ? this.step : 1;\n    this._isRange ? this._updateTickMarkUIRange(step) : this._updateTickMarkUINonRange(step);\n  }\n  _updateTickMarkUINonRange(step) {\n    const value = this._getValue();\n    let numActive = Math.max(Math.round((value - this.min) / step), 0) + 1;\n    let numInactive = Math.max(Math.round((this.max - value) / step), 0) - 1;\n    this._isRtl ? numActive++ : numInactive++;\n    this._tickMarks = Array(numActive).fill(_MatTickMark.ACTIVE).concat(Array(numInactive).fill(_MatTickMark.INACTIVE));\n  }\n  _updateTickMarkUIRange(step) {\n    const endValue = this._getValue();\n    const startValue = this._getValue(_MatThumb.START);\n    const numInactiveBeforeStartThumb = Math.max(Math.round((startValue - this.min) / step), 0);\n    const numActive = Math.max(Math.round((endValue - startValue) / step) + 1, 0);\n    const numInactiveAfterEndThumb = Math.max(Math.round((this.max - endValue) / step), 0);\n    this._tickMarks = Array(numInactiveBeforeStartThumb).fill(_MatTickMark.INACTIVE).concat(Array(numActive).fill(_MatTickMark.ACTIVE), Array(numInactiveAfterEndThumb).fill(_MatTickMark.INACTIVE));\n  }\n  /** Gets the slider thumb input of the given thumb position. */\n  _getInput(thumbPosition) {\n    if (thumbPosition === _MatThumb.END && this._input) {\n      return this._input;\n    }\n    if (this._inputs?.length) {\n      return thumbPosition === _MatThumb.START ? this._inputs.first : this._inputs.last;\n    }\n    return;\n  }\n  /** Gets the slider thumb HTML input element of the given thumb position. */\n  _getThumb(thumbPosition) {\n    return thumbPosition === _MatThumb.END ? this._thumbs?.last : this._thumbs?.first;\n  }\n  _setTransition(withAnimation) {\n    this._hasAnimation = !this._platform.IOS && withAnimation && !this._noopAnimations;\n    this._elementRef.nativeElement.classList.toggle('mat-mdc-slider-with-animation', this._hasAnimation);\n  }\n  /** Whether the given pointer event occurred within the bounds of the slider pointer's DOM Rect. */\n  _isCursorOnSliderThumb(event, rect) {\n    const radius = rect.width / 2;\n    const centerX = rect.x + radius;\n    const centerY = rect.y + radius;\n    const dx = event.clientX - centerX;\n    const dy = event.clientY - centerY;\n    return Math.pow(dx, 2) + Math.pow(dy, 2) < Math.pow(radius, 2);\n  }\n  static ɵfac = function MatSlider_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatSlider)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatSlider,\n    selectors: [[\"mat-slider\"]],\n    contentQueries: function MatSlider_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MAT_SLIDER_THUMB, 5);\n        i0.ɵɵcontentQuery(dirIndex, MAT_SLIDER_RANGE_THUMB, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._input = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputs = _t);\n      }\n    },\n    viewQuery: function MatSlider_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(MAT_SLIDER_VISUAL_THUMB, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._trackActive = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._thumbs = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-mdc-slider\", \"mdc-slider\"],\n    hostVars: 12,\n    hostBindings: function MatSlider_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(\"mat-\" + (ctx.color || \"primary\"));\n        i0.ɵɵclassProp(\"mdc-slider--range\", ctx._isRange)(\"mdc-slider--disabled\", ctx.disabled)(\"mdc-slider--discrete\", ctx.discrete)(\"mdc-slider--tick-marks\", ctx.showTickMarks)(\"_mat-animation-noopable\", ctx._noopAnimations);\n      }\n    },\n    inputs: {\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n      discrete: [2, \"discrete\", \"discrete\", booleanAttribute],\n      showTickMarks: [2, \"showTickMarks\", \"showTickMarks\", booleanAttribute],\n      min: [2, \"min\", \"min\", numberAttribute],\n      color: \"color\",\n      disableRipple: [2, \"disableRipple\", \"disableRipple\", booleanAttribute],\n      max: [2, \"max\", \"max\", numberAttribute],\n      step: [2, \"step\", \"step\", numberAttribute],\n      displayWith: \"displayWith\"\n    },\n    exportAs: [\"matSlider\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_SLIDER,\n      useExisting: MatSlider\n    }])],\n    ngContentSelectors: _c3,\n    decls: 9,\n    vars: 5,\n    consts: [[\"trackActive\", \"\"], [\"tickMarkContainer\", \"\"], [1, \"mdc-slider__track\"], [1, \"mdc-slider__track--inactive\"], [1, \"mdc-slider__track--active\"], [1, \"mdc-slider__track--active_fill\"], [1, \"mdc-slider__tick-marks\"], [3, \"discrete\", \"thumbPosition\", \"valueIndicatorText\"], [3, \"class\", \"transform\"]],\n    template: function MatSlider_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n        i0.ɵɵelementStart(1, \"div\", 2);\n        i0.ɵɵelement(2, \"div\", 3);\n        i0.ɵɵelementStart(3, \"div\", 4);\n        i0.ɵɵelement(4, \"div\", 5, 0);\n        i0.ɵɵelementEnd();\n        i0.ɵɵconditionalCreate(6, MatSlider_Conditional_6_Template, 3, 1, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵconditionalCreate(7, MatSlider_Conditional_7_Template, 1, 3, \"mat-slider-visual-thumb\", 7);\n        i0.ɵɵelement(8, \"mat-slider-visual-thumb\", 7);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵconditional(ctx.showTickMarks ? 6 : -1);\n        i0.ɵɵadvance();\n        i0.ɵɵconditional(ctx._isRange ? 7 : -1);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"discrete\", ctx.discrete)(\"thumbPosition\", 2)(\"valueIndicatorText\", ctx.endValueIndicatorText);\n      }\n    },\n    dependencies: [MatSliderVisualThumb],\n    styles: [\".mdc-slider__track{position:absolute;top:50%;transform:translateY(-50%);width:100%;pointer-events:none;height:var(--mat-slider-inactive-track-height, 4px)}.mdc-slider__track--active,.mdc-slider__track--inactive{display:flex;height:100%;position:absolute;width:100%}.mdc-slider__track--active{overflow:hidden;border-radius:var(--mat-slider-active-track-shape, var(--mat-sys-corner-full));height:var(--mat-slider-active-track-height, 4px);top:calc((var(--mat-slider-inactive-track-height, 4px) - var(--mat-slider-active-track-height, 4px))/2)}.mdc-slider__track--active_fill{border-top-style:solid;box-sizing:border-box;height:100%;width:100%;position:relative;transform-origin:left;transition:transform 80ms ease;border-color:var(--mat-slider-active-track-color, var(--mat-sys-primary));border-top-width:var(--mat-slider-active-track-height, 4px)}.mdc-slider--disabled .mdc-slider__track--active_fill{border-color:var(--mat-slider-disabled-active-track-color, var(--mat-sys-on-surface))}[dir=rtl] .mdc-slider__track--active_fill{-webkit-transform-origin:right;transform-origin:right}.mdc-slider__track--inactive{left:0;top:0;opacity:.24;background-color:var(--mat-slider-inactive-track-color, var(--mat-sys-surface-variant));height:var(--mat-slider-inactive-track-height, 4px);border-radius:var(--mat-slider-inactive-track-shape, var(--mat-sys-corner-full))}.mdc-slider--disabled .mdc-slider__track--inactive{background-color:var(--mat-slider-disabled-inactive-track-color, var(--mat-sys-on-surface));opacity:.24}.mdc-slider__track--inactive::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media(forced-colors: active){.mdc-slider__track--inactive::before{border-color:CanvasText}}.mdc-slider__value-indicator-container{bottom:44px;left:50%;pointer-events:none;position:absolute;transform:var(--mat-slider-value-indicator-container-transform, translateX(-50%) rotate(-45deg))}.mdc-slider__thumb--with-indicator .mdc-slider__value-indicator-container{pointer-events:auto}.mdc-slider__value-indicator{display:flex;align-items:center;transform:scale(0);transform-origin:bottom;transition:transform 100ms cubic-bezier(0.4, 0, 1, 1);word-break:normal;background-color:var(--mat-slider-label-container-color, var(--mat-sys-primary));color:var(--mat-slider-label-label-text-color, var(--mat-sys-on-primary));width:var(--mat-slider-value-indicator-width, 28px);height:var(--mat-slider-value-indicator-height, 28px);padding:var(--mat-slider-value-indicator-padding, 0);opacity:var(--mat-slider-value-indicator-opacity, 1);border-radius:var(--mat-slider-value-indicator-border-radius, 50% 50% 50% 0)}.mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:transform 100ms cubic-bezier(0, 0, 0.2, 1);transform:scale(1)}.mdc-slider__value-indicator::before{border-left:6px solid rgba(0,0,0,0);border-right:6px solid rgba(0,0,0,0);border-top:6px solid;bottom:-5px;content:\\\"\\\";height:0;left:50%;position:absolute;transform:translateX(-50%);width:0;display:var(--mat-slider-value-indicator-caret-display, none);border-top-color:var(--mat-slider-label-container-color, var(--mat-sys-primary))}.mdc-slider__value-indicator::after{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media(forced-colors: active){.mdc-slider__value-indicator::after{border-color:CanvasText}}.mdc-slider__value-indicator-text{text-align:center;width:var(--mat-slider-value-indicator-width, 28px);transform:var(--mat-slider-value-indicator-text-transform, rotate(45deg));font-family:var(--mat-slider-label-label-text-font, var(--mat-sys-label-medium-font));font-size:var(--mat-slider-label-label-text-size, var(--mat-sys-label-medium-size));font-weight:var(--mat-slider-label-label-text-weight, var(--mat-sys-label-medium-weight));line-height:var(--mat-slider-label-label-text-line-height, var(--mat-sys-label-medium-line-height));letter-spacing:var(--mat-slider-label-label-text-tracking, var(--mat-sys-label-medium-tracking))}.mdc-slider__thumb{-webkit-user-select:none;user-select:none;display:flex;left:-24px;outline:none;position:absolute;height:48px;width:48px;pointer-events:none}.mdc-slider--discrete .mdc-slider__thumb{transition:transform 80ms ease}.mdc-slider--disabled .mdc-slider__thumb{pointer-events:none}.mdc-slider__thumb--top{z-index:1}.mdc-slider__thumb-knob{position:absolute;box-sizing:border-box;left:50%;top:50%;transform:translate(-50%, -50%);border-style:solid;width:var(--mat-slider-handle-width, 20px);height:var(--mat-slider-handle-height, 20px);border-width:calc(var(--mat-slider-handle-height, 20px)/2) calc(var(--mat-slider-handle-width, 20px)/2);box-shadow:var(--mat-slider-handle-elevation, var(--mat-sys-level1));background-color:var(--mat-slider-handle-color, var(--mat-sys-primary));border-color:var(--mat-slider-handle-color, var(--mat-sys-primary));border-radius:var(--mat-slider-handle-shape, var(--mat-sys-corner-full))}.mdc-slider__thumb:hover .mdc-slider__thumb-knob{background-color:var(--mat-slider-hover-handle-color, var(--mat-sys-primary));border-color:var(--mat-slider-hover-handle-color, var(--mat-sys-primary))}.mdc-slider__thumb--focused .mdc-slider__thumb-knob{background-color:var(--mat-slider-focus-handle-color, var(--mat-sys-primary));border-color:var(--mat-slider-focus-handle-color, var(--mat-sys-primary))}.mdc-slider--disabled .mdc-slider__thumb-knob{background-color:var(--mat-slider-disabled-handle-color, var(--mat-sys-on-surface));border-color:var(--mat-slider-disabled-handle-color, var(--mat-sys-on-surface))}.mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border:solid 1px #fff;box-sizing:content-box;border-color:var(--mat-slider-with-overlap-handle-outline-color, var(--mat-sys-on-primary));border-width:var(--mat-slider-with-overlap-handle-outline-width, 1px)}.mdc-slider__tick-marks{align-items:center;box-sizing:border-box;display:flex;height:100%;justify-content:space-between;padding:0 1px;position:absolute;width:100%}.mdc-slider__tick-mark--active,.mdc-slider__tick-mark--inactive{width:var(--mat-slider-with-tick-marks-container-size, 2px);height:var(--mat-slider-with-tick-marks-container-size, 2px);border-radius:var(--mat-slider-with-tick-marks-container-shape, var(--mat-sys-corner-full))}.mdc-slider__tick-mark--inactive{opacity:var(--mat-slider-with-tick-marks-inactive-container-opacity, 0.38);background-color:var(--mat-slider-with-tick-marks-inactive-container-color, var(--mat-sys-on-surface-variant))}.mdc-slider--disabled .mdc-slider__tick-mark--inactive{opacity:var(--mat-slider-with-tick-marks-inactive-container-opacity, 0.38);background-color:var(--mat-slider-with-tick-marks-disabled-container-color, var(--mat-sys-on-surface))}.mdc-slider__tick-mark--active{opacity:var(--mat-slider-with-tick-marks-active-container-opacity, 0.38);background-color:var(--mat-slider-with-tick-marks-active-container-color, var(--mat-sys-on-primary))}.mdc-slider__input{cursor:pointer;left:2px;margin:0;height:44px;opacity:0;position:absolute;top:2px;width:44px;box-sizing:content-box}.mdc-slider__input.mat-mdc-slider-input-no-pointer-events{pointer-events:none}.mdc-slider__input.mat-slider__right-input{left:auto;right:0}.mat-mdc-slider{display:inline-block;box-sizing:border-box;outline:none;vertical-align:middle;cursor:pointer;height:48px;margin:0 8px;position:relative;touch-action:pan-y;width:auto;min-width:112px;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-slider.mdc-slider--disabled{cursor:auto;opacity:.38}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__input{cursor:auto}.mat-mdc-slider .mdc-slider__thumb,.mat-mdc-slider .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider.mdc-slider--discrete .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider .mat-ripple .mat-ripple-element{background-color:var(--mat-slider-ripple-color, var(--mat-sys-primary))}.mat-mdc-slider .mat-ripple .mat-mdc-slider-hover-ripple{background-color:var(--mat-slider-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-primary) 5%, transparent))}.mat-mdc-slider .mat-ripple .mat-mdc-slider-focus-ripple,.mat-mdc-slider .mat-ripple .mat-mdc-slider-active-ripple{background-color:var(--mat-slider-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-primary) 20%, transparent))}.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__track--active_fill,.mat-mdc-slider._mat-animation-noopable .mdc-slider__value-indicator{transition:none}.mat-mdc-slider .mat-focus-indicator::before{border-radius:50%}.mdc-slider__thumb--focused .mat-focus-indicator::before{content:\\\"\\\"}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSlider, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slider',\n      host: {\n        'class': 'mat-mdc-slider mdc-slider',\n        '[class]': '\"mat-\" + (color || \"primary\")',\n        '[class.mdc-slider--range]': '_isRange',\n        '[class.mdc-slider--disabled]': 'disabled',\n        '[class.mdc-slider--discrete]': 'discrete',\n        '[class.mdc-slider--tick-marks]': 'showTickMarks',\n        '[class._mat-animation-noopable]': '_noopAnimations'\n      },\n      exportAs: 'matSlider',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: MAT_SLIDER,\n        useExisting: MatSlider\n      }],\n      imports: [MatSliderVisualThumb],\n      template: \"<!-- Inputs -->\\n<ng-content></ng-content>\\n\\n<!-- Track -->\\n<div class=\\\"mdc-slider__track\\\">\\n  <div class=\\\"mdc-slider__track--inactive\\\"></div>\\n  <div class=\\\"mdc-slider__track--active\\\">\\n    <div #trackActive class=\\\"mdc-slider__track--active_fill\\\"></div>\\n  </div>\\n  @if (showTickMarks) {\\n    <div class=\\\"mdc-slider__tick-marks\\\" #tickMarkContainer>\\n      @if (_cachedWidth) {\\n        @for (tickMark of _tickMarks; track i; let i = $index) {\\n          <div\\n            [class]=\\\"tickMark === 0 ? 'mdc-slider__tick-mark--active' : 'mdc-slider__tick-mark--inactive'\\\"\\n            [style.transform]=\\\"_calcTickMarkTransform(i)\\\"></div>\\n        }\\n      }\\n    </div>\\n  }\\n</div>\\n\\n<!-- Thumbs -->\\n@if (_isRange) {\\n  <mat-slider-visual-thumb\\n    [discrete]=\\\"discrete\\\"\\n    [thumbPosition]=\\\"1\\\"\\n    [valueIndicatorText]=\\\"startValueIndicatorText\\\">\\n  </mat-slider-visual-thumb>\\n}\\n\\n<mat-slider-visual-thumb\\n  [discrete]=\\\"discrete\\\"\\n  [thumbPosition]=\\\"2\\\"\\n  [valueIndicatorText]=\\\"endValueIndicatorText\\\">\\n</mat-slider-visual-thumb>\\n\",\n      styles: [\".mdc-slider__track{position:absolute;top:50%;transform:translateY(-50%);width:100%;pointer-events:none;height:var(--mat-slider-inactive-track-height, 4px)}.mdc-slider__track--active,.mdc-slider__track--inactive{display:flex;height:100%;position:absolute;width:100%}.mdc-slider__track--active{overflow:hidden;border-radius:var(--mat-slider-active-track-shape, var(--mat-sys-corner-full));height:var(--mat-slider-active-track-height, 4px);top:calc((var(--mat-slider-inactive-track-height, 4px) - var(--mat-slider-active-track-height, 4px))/2)}.mdc-slider__track--active_fill{border-top-style:solid;box-sizing:border-box;height:100%;width:100%;position:relative;transform-origin:left;transition:transform 80ms ease;border-color:var(--mat-slider-active-track-color, var(--mat-sys-primary));border-top-width:var(--mat-slider-active-track-height, 4px)}.mdc-slider--disabled .mdc-slider__track--active_fill{border-color:var(--mat-slider-disabled-active-track-color, var(--mat-sys-on-surface))}[dir=rtl] .mdc-slider__track--active_fill{-webkit-transform-origin:right;transform-origin:right}.mdc-slider__track--inactive{left:0;top:0;opacity:.24;background-color:var(--mat-slider-inactive-track-color, var(--mat-sys-surface-variant));height:var(--mat-slider-inactive-track-height, 4px);border-radius:var(--mat-slider-inactive-track-shape, var(--mat-sys-corner-full))}.mdc-slider--disabled .mdc-slider__track--inactive{background-color:var(--mat-slider-disabled-inactive-track-color, var(--mat-sys-on-surface));opacity:.24}.mdc-slider__track--inactive::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media(forced-colors: active){.mdc-slider__track--inactive::before{border-color:CanvasText}}.mdc-slider__value-indicator-container{bottom:44px;left:50%;pointer-events:none;position:absolute;transform:var(--mat-slider-value-indicator-container-transform, translateX(-50%) rotate(-45deg))}.mdc-slider__thumb--with-indicator .mdc-slider__value-indicator-container{pointer-events:auto}.mdc-slider__value-indicator{display:flex;align-items:center;transform:scale(0);transform-origin:bottom;transition:transform 100ms cubic-bezier(0.4, 0, 1, 1);word-break:normal;background-color:var(--mat-slider-label-container-color, var(--mat-sys-primary));color:var(--mat-slider-label-label-text-color, var(--mat-sys-on-primary));width:var(--mat-slider-value-indicator-width, 28px);height:var(--mat-slider-value-indicator-height, 28px);padding:var(--mat-slider-value-indicator-padding, 0);opacity:var(--mat-slider-value-indicator-opacity, 1);border-radius:var(--mat-slider-value-indicator-border-radius, 50% 50% 50% 0)}.mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:transform 100ms cubic-bezier(0, 0, 0.2, 1);transform:scale(1)}.mdc-slider__value-indicator::before{border-left:6px solid rgba(0,0,0,0);border-right:6px solid rgba(0,0,0,0);border-top:6px solid;bottom:-5px;content:\\\"\\\";height:0;left:50%;position:absolute;transform:translateX(-50%);width:0;display:var(--mat-slider-value-indicator-caret-display, none);border-top-color:var(--mat-slider-label-container-color, var(--mat-sys-primary))}.mdc-slider__value-indicator::after{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media(forced-colors: active){.mdc-slider__value-indicator::after{border-color:CanvasText}}.mdc-slider__value-indicator-text{text-align:center;width:var(--mat-slider-value-indicator-width, 28px);transform:var(--mat-slider-value-indicator-text-transform, rotate(45deg));font-family:var(--mat-slider-label-label-text-font, var(--mat-sys-label-medium-font));font-size:var(--mat-slider-label-label-text-size, var(--mat-sys-label-medium-size));font-weight:var(--mat-slider-label-label-text-weight, var(--mat-sys-label-medium-weight));line-height:var(--mat-slider-label-label-text-line-height, var(--mat-sys-label-medium-line-height));letter-spacing:var(--mat-slider-label-label-text-tracking, var(--mat-sys-label-medium-tracking))}.mdc-slider__thumb{-webkit-user-select:none;user-select:none;display:flex;left:-24px;outline:none;position:absolute;height:48px;width:48px;pointer-events:none}.mdc-slider--discrete .mdc-slider__thumb{transition:transform 80ms ease}.mdc-slider--disabled .mdc-slider__thumb{pointer-events:none}.mdc-slider__thumb--top{z-index:1}.mdc-slider__thumb-knob{position:absolute;box-sizing:border-box;left:50%;top:50%;transform:translate(-50%, -50%);border-style:solid;width:var(--mat-slider-handle-width, 20px);height:var(--mat-slider-handle-height, 20px);border-width:calc(var(--mat-slider-handle-height, 20px)/2) calc(var(--mat-slider-handle-width, 20px)/2);box-shadow:var(--mat-slider-handle-elevation, var(--mat-sys-level1));background-color:var(--mat-slider-handle-color, var(--mat-sys-primary));border-color:var(--mat-slider-handle-color, var(--mat-sys-primary));border-radius:var(--mat-slider-handle-shape, var(--mat-sys-corner-full))}.mdc-slider__thumb:hover .mdc-slider__thumb-knob{background-color:var(--mat-slider-hover-handle-color, var(--mat-sys-primary));border-color:var(--mat-slider-hover-handle-color, var(--mat-sys-primary))}.mdc-slider__thumb--focused .mdc-slider__thumb-knob{background-color:var(--mat-slider-focus-handle-color, var(--mat-sys-primary));border-color:var(--mat-slider-focus-handle-color, var(--mat-sys-primary))}.mdc-slider--disabled .mdc-slider__thumb-knob{background-color:var(--mat-slider-disabled-handle-color, var(--mat-sys-on-surface));border-color:var(--mat-slider-disabled-handle-color, var(--mat-sys-on-surface))}.mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border:solid 1px #fff;box-sizing:content-box;border-color:var(--mat-slider-with-overlap-handle-outline-color, var(--mat-sys-on-primary));border-width:var(--mat-slider-with-overlap-handle-outline-width, 1px)}.mdc-slider__tick-marks{align-items:center;box-sizing:border-box;display:flex;height:100%;justify-content:space-between;padding:0 1px;position:absolute;width:100%}.mdc-slider__tick-mark--active,.mdc-slider__tick-mark--inactive{width:var(--mat-slider-with-tick-marks-container-size, 2px);height:var(--mat-slider-with-tick-marks-container-size, 2px);border-radius:var(--mat-slider-with-tick-marks-container-shape, var(--mat-sys-corner-full))}.mdc-slider__tick-mark--inactive{opacity:var(--mat-slider-with-tick-marks-inactive-container-opacity, 0.38);background-color:var(--mat-slider-with-tick-marks-inactive-container-color, var(--mat-sys-on-surface-variant))}.mdc-slider--disabled .mdc-slider__tick-mark--inactive{opacity:var(--mat-slider-with-tick-marks-inactive-container-opacity, 0.38);background-color:var(--mat-slider-with-tick-marks-disabled-container-color, var(--mat-sys-on-surface))}.mdc-slider__tick-mark--active{opacity:var(--mat-slider-with-tick-marks-active-container-opacity, 0.38);background-color:var(--mat-slider-with-tick-marks-active-container-color, var(--mat-sys-on-primary))}.mdc-slider__input{cursor:pointer;left:2px;margin:0;height:44px;opacity:0;position:absolute;top:2px;width:44px;box-sizing:content-box}.mdc-slider__input.mat-mdc-slider-input-no-pointer-events{pointer-events:none}.mdc-slider__input.mat-slider__right-input{left:auto;right:0}.mat-mdc-slider{display:inline-block;box-sizing:border-box;outline:none;vertical-align:middle;cursor:pointer;height:48px;margin:0 8px;position:relative;touch-action:pan-y;width:auto;min-width:112px;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-slider.mdc-slider--disabled{cursor:auto;opacity:.38}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__input{cursor:auto}.mat-mdc-slider .mdc-slider__thumb,.mat-mdc-slider .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider.mdc-slider--discrete .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider .mat-ripple .mat-ripple-element{background-color:var(--mat-slider-ripple-color, var(--mat-sys-primary))}.mat-mdc-slider .mat-ripple .mat-mdc-slider-hover-ripple{background-color:var(--mat-slider-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-primary) 5%, transparent))}.mat-mdc-slider .mat-ripple .mat-mdc-slider-focus-ripple,.mat-mdc-slider .mat-ripple .mat-mdc-slider-active-ripple{background-color:var(--mat-slider-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-primary) 20%, transparent))}.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__track--active_fill,.mat-mdc-slider._mat-animation-noopable .mdc-slider__value-indicator{transition:none}.mat-mdc-slider .mat-focus-indicator::before{border-radius:50%}.mdc-slider__thumb--focused .mat-focus-indicator::before{content:\\\"\\\"}\\n\"]\n    }]\n  }], () => [], {\n    _trackActive: [{\n      type: ViewChild,\n      args: ['trackActive']\n    }],\n    _thumbs: [{\n      type: ViewChildren,\n      args: [MAT_SLIDER_VISUAL_THUMB]\n    }],\n    _input: [{\n      type: ContentChild,\n      args: [MAT_SLIDER_THUMB]\n    }],\n    _inputs: [{\n      type: ContentChildren,\n      args: [MAT_SLIDER_RANGE_THUMB, {\n        descendants: false\n      }]\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    discrete: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showTickMarks: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    min: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    color: [{\n      type: Input\n    }],\n    disableRipple: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    max: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    step: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    displayWith: [{\n      type: Input\n    }]\n  });\n})();\n/** Ensures that there is not an invalid configuration for the slider thumb inputs. */\nfunction _validateInputs(isRange, endInputElement, startInputElement) {\n  const startValid = !isRange || startInputElement?._hostElement.hasAttribute('matSliderStartThumb');\n  const endValid = endInputElement?._hostElement.hasAttribute(isRange ? 'matSliderEndThumb' : 'matSliderThumb');\n  if (!startValid || !endValid) {\n    _throwInvalidInputConfigurationError();\n  }\n}\nfunction _throwInvalidInputConfigurationError() {\n  throw Error(`Invalid slider thumb input configuration!\n\n   Valid configurations are as follows:\n\n     <mat-slider>\n       <input matSliderThumb>\n     </mat-slider>\n\n     or\n\n     <mat-slider>\n       <input matSliderStartThumb>\n       <input matSliderEndThumb>\n     </mat-slider>\n   `);\n}\n\n/**\n * Provider that allows the slider thumb to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_SLIDER_THUMB_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSliderThumb),\n  multi: true\n};\n/**\n * Provider that allows the range slider thumb to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_SLIDER_RANGE_THUMB_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSliderRangeThumb),\n  multi: true\n};\n/**\n * Directive that adds slider-specific behaviors to an input element inside `<mat-slider>`.\n * Up to two may be placed inside of a `<mat-slider>`.\n *\n * If one is used, the selector `matSliderThumb` must be used, and the outcome will be a normal\n * slider. If two are used, the selectors `matSliderStartThumb` and `matSliderEndThumb` must be\n * used, and the outcome will be a range slider with two slider thumbs.\n */\nclass MatSliderThumb {\n  _ngZone = inject(NgZone);\n  _elementRef = inject(ElementRef);\n  _cdr = inject(ChangeDetectorRef);\n  _slider = inject(MAT_SLIDER);\n  _platform = inject(Platform);\n  _listenerCleanups;\n  get value() {\n    return numberAttribute(this._hostElement.value, 0);\n  }\n  set value(value) {\n    if (value === null) {\n      value = this._getDefaultValue();\n    }\n    value = isNaN(value) ? 0 : value;\n    const stringValue = value + '';\n    if (!this._hasSetInitialValue) {\n      this._initialValue = stringValue;\n      return;\n    }\n    if (this._isActive) {\n      return;\n    }\n    this._setValue(stringValue);\n  }\n  /**\n   * Handles programmatic value setting. This has been split out to\n   * allow the range thumb to override it and add additional necessary logic.\n   */\n  _setValue(value) {\n    this._hostElement.value = value;\n    this._updateThumbUIByValue();\n    this._slider._onValueChange(this);\n    this._cdr.detectChanges();\n    this._slider._cdr.markForCheck();\n  }\n  /** Event emitted when the `value` is changed. */\n  valueChange = new EventEmitter();\n  /** Event emitted when the slider thumb starts being dragged. */\n  dragStart = new EventEmitter();\n  /** Event emitted when the slider thumb stops being dragged. */\n  dragEnd = new EventEmitter();\n  /**\n   * The current translateX in px of the slider visual thumb.\n   * @docs-private\n   */\n  get translateX() {\n    if (this._slider.min >= this._slider.max) {\n      this._translateX = this._tickMarkOffset;\n      return this._translateX;\n    }\n    if (this._translateX === undefined) {\n      this._translateX = this._calcTranslateXByValue();\n    }\n    return this._translateX;\n  }\n  set translateX(v) {\n    this._translateX = v;\n  }\n  _translateX;\n  /**\n   * Indicates whether this thumb is the start or end thumb.\n   * @docs-private\n   */\n  thumbPosition = _MatThumb.END;\n  /** @docs-private */\n  get min() {\n    return numberAttribute(this._hostElement.min, 0);\n  }\n  set min(v) {\n    this._hostElement.min = v + '';\n    this._cdr.detectChanges();\n  }\n  /** @docs-private */\n  get max() {\n    return numberAttribute(this._hostElement.max, 0);\n  }\n  set max(v) {\n    this._hostElement.max = v + '';\n    this._cdr.detectChanges();\n  }\n  get step() {\n    return numberAttribute(this._hostElement.step, 0);\n  }\n  set step(v) {\n    this._hostElement.step = v + '';\n    this._cdr.detectChanges();\n  }\n  /** @docs-private */\n  get disabled() {\n    return booleanAttribute(this._hostElement.disabled);\n  }\n  set disabled(v) {\n    this._hostElement.disabled = v;\n    this._cdr.detectChanges();\n    if (this._slider.disabled !== this.disabled) {\n      this._slider.disabled = this.disabled;\n    }\n  }\n  /** The percentage of the slider that coincides with the value. */\n  get percentage() {\n    if (this._slider.min >= this._slider.max) {\n      return this._slider._isRtl ? 1 : 0;\n    }\n    return (this.value - this._slider.min) / (this._slider.max - this._slider.min);\n  }\n  /** @docs-private */\n  get fillPercentage() {\n    if (!this._slider._cachedWidth) {\n      return this._slider._isRtl ? 1 : 0;\n    }\n    if (this._translateX === 0) {\n      return 0;\n    }\n    return this.translateX / this._slider._cachedWidth;\n  }\n  /** The host native HTML input element. */\n  _hostElement = this._elementRef.nativeElement;\n  /** The aria-valuetext string representation of the input's value. */\n  _valuetext = signal('', ...(ngDevMode ? [{\n    debugName: \"_valuetext\"\n  }] : []));\n  /** The radius of a native html slider's knob. */\n  _knobRadius = 8;\n  /** The distance in px from the start of the slider track to the first tick mark. */\n  _tickMarkOffset = 3;\n  /** Whether user's cursor is currently in a mouse down state on the input. */\n  _isActive = false;\n  /** Whether the input is currently focused (either by tab or after clicking). */\n  _isFocused = false;\n  /** Used to relay updates to _isFocused to the slider visual thumbs. */\n  _setIsFocused(v) {\n    this._isFocused = v;\n  }\n  /**\n   * Whether the initial value has been set.\n   * This exists because the initial value cannot be immediately set because the min and max\n   * must first be relayed from the parent MatSlider component, which can only happen later\n   * in the component lifecycle.\n   */\n  _hasSetInitialValue = false;\n  /** The stored initial value. */\n  _initialValue;\n  /** Defined when a user is using a form control to manage slider value & validation. */\n  _formControl;\n  /** Emits when the component is destroyed. */\n  _destroyed = new Subject();\n  /**\n   * Indicates whether UI updates should be skipped.\n   *\n   * This flag is used to avoid flickering\n   * when correcting values on pointer up/down.\n   */\n  _skipUIUpdate = false;\n  /** Callback called when the slider input value changes. */\n  _onChangeFn;\n  /** Callback called when the slider input has been touched. */\n  _onTouchedFn = () => {};\n  /**\n   * Whether the NgModel has been initialized.\n   *\n   * This flag is used to ignore ghost null calls to\n   * writeValue which can break slider initialization.\n   *\n   * See https://github.com/angular/angular/issues/14988.\n   */\n  _isControlInitialized = false;\n  constructor() {\n    const renderer = inject(Renderer2);\n    this._ngZone.runOutsideAngular(() => {\n      this._listenerCleanups = [renderer.listen(this._hostElement, 'pointerdown', this._onPointerDown.bind(this)), renderer.listen(this._hostElement, 'pointermove', this._onPointerMove.bind(this)), renderer.listen(this._hostElement, 'pointerup', this._onPointerUp.bind(this))];\n    });\n  }\n  ngOnDestroy() {\n    this._listenerCleanups.forEach(cleanup => cleanup());\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.dragStart.complete();\n    this.dragEnd.complete();\n  }\n  /** @docs-private */\n  initProps() {\n    this._updateWidthInactive();\n    // If this or the parent slider is disabled, just make everything disabled.\n    if (this.disabled !== this._slider.disabled) {\n      // The MatSlider setter for disabled will relay this and disable both inputs.\n      this._slider.disabled = true;\n    }\n    this.step = this._slider.step;\n    this.min = this._slider.min;\n    this.max = this._slider.max;\n    this._initValue();\n  }\n  /** @docs-private */\n  initUI() {\n    this._updateThumbUIByValue();\n  }\n  _initValue() {\n    this._hasSetInitialValue = true;\n    if (this._initialValue === undefined) {\n      this.value = this._getDefaultValue();\n    } else {\n      this._hostElement.value = this._initialValue;\n      this._updateThumbUIByValue();\n      this._slider._onValueChange(this);\n      this._cdr.detectChanges();\n    }\n  }\n  _getDefaultValue() {\n    return this.min;\n  }\n  _onBlur() {\n    this._setIsFocused(false);\n    this._onTouchedFn();\n  }\n  _onFocus() {\n    this._slider._setTransition(false);\n    this._slider._updateTrackUI(this);\n    this._setIsFocused(true);\n  }\n  _onChange() {\n    this.valueChange.emit(this.value);\n    // only used to handle the edge case where user\n    // mousedown on the slider then uses arrow keys.\n    if (this._isActive) {\n      this._updateThumbUIByValue({\n        withAnimation: true\n      });\n    }\n  }\n  _onInput() {\n    this._onChangeFn?.(this.value);\n    // handles arrowing and updating the value when\n    // a step is defined.\n    if (this._slider.step || !this._isActive) {\n      this._updateThumbUIByValue({\n        withAnimation: true\n      });\n    }\n    this._slider._onValueChange(this);\n  }\n  _onNgControlValueChange() {\n    // only used to handle when the value change\n    // originates outside of the slider.\n    if (!this._isActive || !this._isFocused) {\n      this._slider._onValueChange(this);\n      this._updateThumbUIByValue();\n    }\n    this._slider.disabled = this._formControl.disabled;\n  }\n  _onPointerDown(event) {\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n    // On IOS, dragging only works if the pointer down happens on the\n    // slider thumb and the slider does not receive focus from pointer events.\n    if (this._platform.IOS) {\n      const isCursorOnSliderThumb = this._slider._isCursorOnSliderThumb(event, this._slider._getThumb(this.thumbPosition)._hostElement.getBoundingClientRect());\n      this._isActive = isCursorOnSliderThumb;\n      this._updateWidthActive();\n      this._slider._updateDimensions();\n      return;\n    }\n    this._isActive = true;\n    this._setIsFocused(true);\n    this._updateWidthActive();\n    this._slider._updateDimensions();\n    // Does nothing if a step is defined because we\n    // want the value to snap to the values on input.\n    if (!this._slider.step) {\n      this._updateThumbUIByPointerEvent(event, {\n        withAnimation: true\n      });\n    }\n    if (!this.disabled) {\n      this._handleValueCorrection(event);\n      this.dragStart.emit({\n        source: this,\n        parent: this._slider,\n        value: this.value\n      });\n    }\n  }\n  /**\n   * Corrects the value of the slider on pointer up/down.\n   *\n   * Called on pointer down and up because the value is set based\n   * on the inactive width instead of the active width.\n   */\n  _handleValueCorrection(event) {\n    // Don't update the UI with the current value! The value on pointerdown\n    // and pointerup is calculated in the split second before the input(s)\n    // resize. See _updateWidthInactive() and _updateWidthActive() for more\n    // details.\n    this._skipUIUpdate = true;\n    // Note that this function gets triggered before the actual value of the\n    // slider is updated. This means if we were to set the value here, it\n    // would immediately be overwritten. Using setTimeout ensures the setting\n    // of the value happens after the value has been updated by the\n    // pointerdown event.\n    setTimeout(() => {\n      this._skipUIUpdate = false;\n      this._fixValue(event);\n    }, 0);\n  }\n  /** Corrects the value of the slider based on the pointer event's position. */\n  _fixValue(event) {\n    const xPos = event.clientX - this._slider._cachedLeft;\n    const width = this._slider._cachedWidth;\n    const step = this._slider.step === 0 ? 1 : this._slider.step;\n    const numSteps = Math.floor((this._slider.max - this._slider.min) / step);\n    const percentage = this._slider._isRtl ? 1 - xPos / width : xPos / width;\n    // To ensure the percentage is rounded to the necessary number of decimals.\n    const fixedPercentage = Math.round(percentage * numSteps) / numSteps;\n    const impreciseValue = fixedPercentage * (this._slider.max - this._slider.min) + this._slider.min;\n    const value = Math.round(impreciseValue / step) * step;\n    const prevValue = this.value;\n    if (value === prevValue) {\n      // Because we prevented UI updates, if it turns out that the race\n      // condition didn't happen and the value is already correct, we\n      // have to apply the ui updates now.\n      this._slider._onValueChange(this);\n      this._slider.step > 0 ? this._updateThumbUIByValue() : this._updateThumbUIByPointerEvent(event, {\n        withAnimation: this._slider._hasAnimation\n      });\n      return;\n    }\n    this.value = value;\n    this.valueChange.emit(this.value);\n    this._onChangeFn?.(this.value);\n    this._slider._onValueChange(this);\n    this._slider.step > 0 ? this._updateThumbUIByValue() : this._updateThumbUIByPointerEvent(event, {\n      withAnimation: this._slider._hasAnimation\n    });\n  }\n  _onPointerMove(event) {\n    // Again, does nothing if a step is defined because\n    // we want the value to snap to the values on input.\n    if (!this._slider.step && this._isActive) {\n      this._updateThumbUIByPointerEvent(event);\n    }\n  }\n  _onPointerUp() {\n    if (this._isActive) {\n      this._isActive = false;\n      if (this._platform.SAFARI) {\n        this._setIsFocused(false);\n      }\n      this.dragEnd.emit({\n        source: this,\n        parent: this._slider,\n        value: this.value\n      });\n      // This setTimeout is to prevent the pointerup from triggering a value\n      // change on the input based on the inactive width. It's not clear why\n      // but for some reason on IOS this race condition is even more common so\n      // the timeout needs to be increased.\n      setTimeout(() => this._updateWidthInactive(), this._platform.IOS ? 10 : 0);\n    }\n  }\n  _clamp(v) {\n    const min = this._tickMarkOffset;\n    const max = this._slider._cachedWidth - this._tickMarkOffset;\n    return Math.max(Math.min(v, max), min);\n  }\n  _calcTranslateXByValue() {\n    if (this._slider._isRtl) {\n      return (1 - this.percentage) * (this._slider._cachedWidth - this._tickMarkOffset * 2) + this._tickMarkOffset;\n    }\n    return this.percentage * (this._slider._cachedWidth - this._tickMarkOffset * 2) + this._tickMarkOffset;\n  }\n  _calcTranslateXByPointerEvent(event) {\n    return event.clientX - this._slider._cachedLeft;\n  }\n  /**\n   * Used to set the slider width to the correct\n   * dimensions while the user is dragging.\n   */\n  _updateWidthActive() {}\n  /**\n   * Sets the slider input to disproportionate dimensions to allow for touch\n   * events to be captured on touch devices.\n   */\n  _updateWidthInactive() {\n    this._hostElement.style.padding = `0 ${this._slider._inputPadding}px`;\n    this._hostElement.style.width = `calc(100% + ${this._slider._inputPadding - this._tickMarkOffset * 2}px)`;\n    this._hostElement.style.left = `-${this._slider._rippleRadius - this._tickMarkOffset}px`;\n  }\n  _updateThumbUIByValue(options) {\n    this.translateX = this._clamp(this._calcTranslateXByValue());\n    this._updateThumbUI(options);\n  }\n  _updateThumbUIByPointerEvent(event, options) {\n    this.translateX = this._clamp(this._calcTranslateXByPointerEvent(event));\n    this._updateThumbUI(options);\n  }\n  _updateThumbUI(options) {\n    this._slider._setTransition(!!options?.withAnimation);\n    this._slider._onTranslateXChange(this);\n  }\n  /**\n   * Sets the input's value.\n   * @param value The new value of the input\n   * @docs-private\n   */\n  writeValue(value) {\n    if (this._isControlInitialized || value !== null) {\n      this.value = value;\n    }\n  }\n  /**\n   * Registers a callback to be invoked when the input's value changes from user input.\n   * @param fn The callback to register\n   * @docs-private\n   */\n  registerOnChange(fn) {\n    this._onChangeFn = fn;\n    this._isControlInitialized = true;\n  }\n  /**\n   * Registers a callback to be invoked when the input is blurred by the user.\n   * @param fn The callback to register\n   * @docs-private\n   */\n  registerOnTouched(fn) {\n    this._onTouchedFn = fn;\n  }\n  /**\n   * Sets the disabled state of the slider.\n   * @param isDisabled The new disabled state\n   * @docs-private\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  focus() {\n    this._hostElement.focus();\n  }\n  blur() {\n    this._hostElement.blur();\n  }\n  static ɵfac = function MatSliderThumb_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatSliderThumb)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatSliderThumb,\n    selectors: [[\"input\", \"matSliderThumb\", \"\"]],\n    hostAttrs: [\"type\", \"range\", 1, \"mdc-slider__input\"],\n    hostVars: 1,\n    hostBindings: function MatSliderThumb_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"change\", function MatSliderThumb_change_HostBindingHandler() {\n          return ctx._onChange();\n        })(\"input\", function MatSliderThumb_input_HostBindingHandler() {\n          return ctx._onInput();\n        })(\"blur\", function MatSliderThumb_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        })(\"focus\", function MatSliderThumb_focus_HostBindingHandler() {\n          return ctx._onFocus();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-valuetext\", ctx._valuetext());\n      }\n    },\n    inputs: {\n      value: [2, \"value\", \"value\", numberAttribute]\n    },\n    outputs: {\n      valueChange: \"valueChange\",\n      dragStart: \"dragStart\",\n      dragEnd: \"dragEnd\"\n    },\n    exportAs: [\"matSliderThumb\"],\n    features: [i0.ɵɵProvidersFeature([MAT_SLIDER_THUMB_VALUE_ACCESSOR, {\n      provide: MAT_SLIDER_THUMB,\n      useExisting: MatSliderThumb\n    }])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSliderThumb, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matSliderThumb]',\n      exportAs: 'matSliderThumb',\n      host: {\n        'class': 'mdc-slider__input',\n        'type': 'range',\n        '[attr.aria-valuetext]': '_valuetext()',\n        '(change)': '_onChange()',\n        '(input)': '_onInput()',\n        // TODO(wagnermaciel): Consider using a global event listener instead.\n        // Reason: I have found a semi-consistent way to mouse up without triggering this event.\n        '(blur)': '_onBlur()',\n        '(focus)': '_onFocus()'\n      },\n      providers: [MAT_SLIDER_THUMB_VALUE_ACCESSOR, {\n        provide: MAT_SLIDER_THUMB,\n        useExisting: MatSliderThumb\n      }]\n    }]\n  }], () => [], {\n    value: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    dragStart: [{\n      type: Output\n    }],\n    dragEnd: [{\n      type: Output\n    }]\n  });\n})();\nclass MatSliderRangeThumb extends MatSliderThumb {\n  _cdr = inject(ChangeDetectorRef);\n  /** @docs-private */\n  getSibling() {\n    if (!this._sibling) {\n      this._sibling = this._slider._getInput(this._isEndThumb ? _MatThumb.START : _MatThumb.END);\n    }\n    return this._sibling;\n  }\n  _sibling;\n  /**\n   * Returns the minimum translateX position allowed for this slider input's visual thumb.\n   * @docs-private\n   */\n  getMinPos() {\n    const sibling = this.getSibling();\n    if (!this._isLeftThumb && sibling) {\n      return sibling.translateX;\n    }\n    return this._tickMarkOffset;\n  }\n  /**\n   * Returns the maximum translateX position allowed for this slider input's visual thumb.\n   * @docs-private\n   */\n  getMaxPos() {\n    const sibling = this.getSibling();\n    if (this._isLeftThumb && sibling) {\n      return sibling.translateX;\n    }\n    return this._slider._cachedWidth - this._tickMarkOffset;\n  }\n  _setIsLeftThumb() {\n    this._isLeftThumb = this._isEndThumb && this._slider._isRtl || !this._isEndThumb && !this._slider._isRtl;\n  }\n  /** Whether this slider corresponds to the input on the left hand side. */\n  _isLeftThumb;\n  /** Whether this slider corresponds to the input with greater value. */\n  _isEndThumb;\n  constructor() {\n    super();\n    this._isEndThumb = this._hostElement.hasAttribute('matSliderEndThumb');\n    this._setIsLeftThumb();\n    this.thumbPosition = this._isEndThumb ? _MatThumb.END : _MatThumb.START;\n  }\n  _getDefaultValue() {\n    return this._isEndThumb && this._slider._isRange ? this.max : this.min;\n  }\n  _onInput() {\n    super._onInput();\n    this._updateSibling();\n    if (!this._isActive) {\n      this._updateWidthInactive();\n    }\n  }\n  _onNgControlValueChange() {\n    super._onNgControlValueChange();\n    this.getSibling()?._updateMinMax();\n  }\n  _onPointerDown(event) {\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n    if (this._sibling) {\n      this._sibling._updateWidthActive();\n      this._sibling._hostElement.classList.add('mat-mdc-slider-input-no-pointer-events');\n    }\n    super._onPointerDown(event);\n  }\n  _onPointerUp() {\n    super._onPointerUp();\n    if (this._sibling) {\n      setTimeout(() => {\n        this._sibling._updateWidthInactive();\n        this._sibling._hostElement.classList.remove('mat-mdc-slider-input-no-pointer-events');\n      });\n    }\n  }\n  _onPointerMove(event) {\n    super._onPointerMove(event);\n    if (!this._slider.step && this._isActive) {\n      this._updateSibling();\n    }\n  }\n  _fixValue(event) {\n    super._fixValue(event);\n    this._sibling?._updateMinMax();\n  }\n  _clamp(v) {\n    return Math.max(Math.min(v, this.getMaxPos()), this.getMinPos());\n  }\n  _updateMinMax() {\n    const sibling = this.getSibling();\n    if (!sibling) {\n      return;\n    }\n    if (this._isEndThumb) {\n      this.min = Math.max(this._slider.min, sibling.value);\n      this.max = this._slider.max;\n    } else {\n      this.min = this._slider.min;\n      this.max = Math.min(this._slider.max, sibling.value);\n    }\n  }\n  _updateWidthActive() {\n    const minWidth = this._slider._rippleRadius * 2 - this._slider._inputPadding * 2;\n    const maxWidth = this._slider._cachedWidth + this._slider._inputPadding - minWidth - this._tickMarkOffset * 2;\n    const percentage = this._slider.min < this._slider.max ? (this.max - this.min) / (this._slider.max - this._slider.min) : 1;\n    const width = maxWidth * percentage + minWidth;\n    this._hostElement.style.width = `${width}px`;\n    this._hostElement.style.padding = `0 ${this._slider._inputPadding}px`;\n  }\n  _updateWidthInactive() {\n    const sibling = this.getSibling();\n    if (!sibling) {\n      return;\n    }\n    const maxWidth = this._slider._cachedWidth - this._tickMarkOffset * 2;\n    const midValue = this._isEndThumb ? this.value - (this.value - sibling.value) / 2 : this.value + (sibling.value - this.value) / 2;\n    const _percentage = this._isEndThumb ? (this.max - midValue) / (this._slider.max - this._slider.min) : (midValue - this.min) / (this._slider.max - this._slider.min);\n    const percentage = this._slider.min < this._slider.max ? _percentage : 1;\n    // Extend the native input width by the radius of the ripple\n    let ripplePadding = this._slider._rippleRadius;\n    // If one of the inputs is maximally sized (the value of both thumbs is\n    // equal to the min or max), make that input take up all of the width and\n    // make the other unselectable.\n    if (percentage === 1) {\n      ripplePadding = 48;\n    } else if (percentage === 0) {\n      ripplePadding = 0;\n    }\n    const width = maxWidth * percentage + ripplePadding;\n    this._hostElement.style.width = `${width}px`;\n    this._hostElement.style.padding = '0px';\n    if (this._isLeftThumb) {\n      this._hostElement.style.left = `-${this._slider._rippleRadius - this._tickMarkOffset}px`;\n      this._hostElement.style.right = 'auto';\n    } else {\n      this._hostElement.style.left = 'auto';\n      this._hostElement.style.right = `-${this._slider._rippleRadius - this._tickMarkOffset}px`;\n    }\n  }\n  _updateStaticStyles() {\n    this._hostElement.classList.toggle('mat-slider__right-input', !this._isLeftThumb);\n  }\n  _updateSibling() {\n    const sibling = this.getSibling();\n    if (!sibling) {\n      return;\n    }\n    sibling._updateMinMax();\n    if (this._isActive) {\n      sibling._updateWidthActive();\n    } else {\n      sibling._updateWidthInactive();\n    }\n  }\n  /**\n   * Sets the input's value.\n   * @param value The new value of the input\n   * @docs-private\n   */\n  writeValue(value) {\n    if (this._isControlInitialized || value !== null) {\n      this.value = value;\n      this._updateWidthInactive();\n      this._updateSibling();\n    }\n  }\n  _setValue(value) {\n    super._setValue(value);\n    this._updateWidthInactive();\n    this._updateSibling();\n  }\n  static ɵfac = function MatSliderRangeThumb_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatSliderRangeThumb)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatSliderRangeThumb,\n    selectors: [[\"input\", \"matSliderStartThumb\", \"\"], [\"input\", \"matSliderEndThumb\", \"\"]],\n    exportAs: [\"matSliderRangeThumb\"],\n    features: [i0.ɵɵProvidersFeature([MAT_SLIDER_RANGE_THUMB_VALUE_ACCESSOR, {\n      provide: MAT_SLIDER_RANGE_THUMB,\n      useExisting: MatSliderRangeThumb\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSliderRangeThumb, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matSliderStartThumb], input[matSliderEndThumb]',\n      exportAs: 'matSliderRangeThumb',\n      providers: [MAT_SLIDER_RANGE_THUMB_VALUE_ACCESSOR, {\n        provide: MAT_SLIDER_RANGE_THUMB,\n        useExisting: MatSliderRangeThumb\n      }]\n    }]\n  }], () => [], null);\n})();\nclass MatSliderModule {\n  static ɵfac = function MatSliderModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatSliderModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatSliderModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatCommonModule, MatRippleModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSliderModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatRippleModule, MatSlider, MatSliderThumb, MatSliderRangeThumb, MatSliderVisualThumb],\n      exports: [MatSlider, MatSliderThumb, MatSliderRangeThumb]\n    }]\n  }], null, null);\n})();\nexport { MatSlider, MatSliderChange, MatSliderModule, MatSliderRangeThumb, MatSliderThumb, MatSliderVisualThumb };","map":{"version":3,"names":["Directionality","Platform","i0","InjectionToken","inject","ChangeDetectorRef","NgZone","Renderer2","ElementRef","Component","ChangeDetectionStrategy","ViewEncapsulation","Input","ViewChild","booleanAttribute","numberAttribute","ViewChildren","ContentChild","ContentChildren","forwardRef","EventEmitter","signal","Directive","Output","NgModule","RippleState","MatRipple","MAT_RIPPLE_GLOBAL_OPTIONS","_CdkPrivateStyleLoader","_animationsDisabled","_StructuralStylesLoader","NG_VALUE_ACCESSOR","Subject","MatCommonModule","MatRippleModule","_c0","_c1","MatSliderVisualThumb_Conditional_0_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","valueIndicatorText","_c2","_c3","MatSlider_Conditional_6_Conditional_2_For_1_Template","ɵɵelement","tickMark_r1","$implicit","ɵ$index_14_r2","$index","ctx_r2","ɵɵclassMap","ɵɵstyleProp","_calcTickMarkTransform","MatSlider_Conditional_6_Conditional_2_Template","ɵɵrepeaterCreate","ɵɵrepeaterTrackByIndex","ɵɵrepeater","_tickMarks","MatSlider_Conditional_6_Template","ɵɵconditionalCreate","ɵɵconditional","_cachedWidth","MatSlider_Conditional_7_Template","ɵɵproperty","discrete","startValueIndicatorText","_MatThumb","_MatTickMark","MAT_SLIDER","MAT_SLIDER_THUMB","MAT_SLIDER_RANGE_THUMB","MAT_SLIDER_VISUAL_THUMB","MatSliderChange","source","parent","value","MatSliderVisualThumb","_cdr","_ngZone","_slider","_renderer","_listenerCleanups","thumbPosition","_ripple","_knob","_valueIndicatorContainer","_sliderInput","_sliderInputEl","_hoverRippleRef","_focusRippleRef","_activeRippleRef","_isHovered","_isActive","_isValueIndicatorVisible","_hostElement","nativeElement","_platform","constructor","ngAfterViewInit","sliderInput","_getInput","radius","runOutsideAngular","input","renderer","listen","_onPointerMove","_onDragStart","_onDragEnd","_onMouseLeave","_onFocus","_onBlur","ngOnDestroy","forEach","cleanup","event","_isFocused","rect","getBoundingClientRect","isHovered","_isCursorOnSliderThumb","_showHoverRipple","_hideRipple","_showFocusRipple","classList","add","remove","button","_showActiveRipple","SAFARI","_isShowingRipple","_showRipple","enterDuration","exitDuration","element","rippleRef","state","FADING_IN","VISIBLE","animation","ignoreGlobalRippleConfig","disabled","_showValueIndicator","_isRange","sibling","_getThumb","START","END","_globalRippleOptions","launch","_noopAnimations","centered","persistent","fadeOut","_isShowingAnyRipple","_hideValueIndicator","_getSibling","_getValueIndicatorContainer","_getKnob","ɵfac","MatSliderVisualThumb_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatSliderVisualThumb_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","inputs","features","ɵɵProvidersFeature","provide","useExisting","decls","vars","consts","template","MatSliderVisualThumb_Template","dependencies","styles","encapsulation","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","host","OnPush","None","providers","imports","MatSlider","_elementRef","_dir","optional","_trackActive","_thumbs","_input","_inputs","_disabled","v","endInput","startInput","_discrete","_updateValueIndicatorUIs","showTickMarks","_showTickMarks","_hasViewInitialized","_updateTickMarkUI","_updateTickMarkTrackUI","min","_min","undefined","isNaN","_updateMin","color","disableRipple","prevMin","_updateMinRange","old","new","_updateMinNonRange","_onMinMaxOrStepChange","oldEndValue","oldStartValue","Math","max","_updateWidthInactive","_onTranslateXChangeBySideEffect","_onValueChange","oldValue","_updateThumbUIByValue","_updateTrackUI","_max","_updateMax","prevMax","_updateMaxRange","_updateMaxNonRange","step","_step","_updateStep","_updateStepRange","_updateStepNonRange","prevStartValue","displayWith","_dirChangeSubscription","_resizeObserver","_cachedLeft","_rippleRadius","endValueIndicatorText","_endThumbTransform","_startThumbTransform","_isRtl","_tickMarkTrackWidth","_hasAnimation","_resizeTimer","load","change","subscribe","_onDirChange","_knobRadius","_inputPadding","isBrowser","_updateDimensions","eInput","sInput","detectChanges","_validateInputs","thumb","_initUIRange","_initUINonRange","_observeHostResize","initProps","initUI","_updateValueIndicatorUI","_updateMinMax","_updateStaticStyles","unsubscribe","disconnect","_onDirChangeRange","_onDirChangeNonRange","_setIsLeftThumb","translateX","_calcTranslateXByValue","ResizeObserver","clearTimeout","_onResize","observe","_getValue","_skipUpdate","_skipUIUpdate","offsetWidth","left","_setTrackActiveStyles","trackStyle","style","right","transformOrigin","transform","index","offset","length","_onTranslateXChange","_updateThumbUI","_updateOverlappingThumbUI","input1","input2","markForCheck","_thumbsOverlap","_areThumbsOverlapping","_updateOverlappingThumbClassNames","getSibling","sourceThumb","siblingThumb","toggle","valuetext","_valuetext","set","setAttribute","visualThumb","maxValue","floor","percentage","_updateTrackUIRange","_updateTrackUINonRange","activePercentage","abs","_isLeftThumb","fillPercentage","_updateTickMarkUIRange","_updateTickMarkUINonRange","numActive","round","numInactive","Array","fill","ACTIVE","concat","INACTIVE","endValue","startValue","numInactiveBeforeStartThumb","numInactiveAfterEndThumb","last","_setTransition","withAnimation","IOS","width","centerX","x","centerY","y","dx","clientX","dy","clientY","pow","MatSlider_Factory","contentQueries","MatSlider_ContentQueries","dirIndex","ɵɵcontentQuery","MatSlider_Query","hostVars","hostBindings","MatSlider_HostBindings","ɵɵclassProp","exportAs","ngContentSelectors","MatSlider_Template","ɵɵprojectionDef","ɵɵprojection","descendants","isRange","endInputElement","startInputElement","startValid","hasAttribute","endValid","_throwInvalidInputConfigurationError","Error","MAT_SLIDER_THUMB_VALUE_ACCESSOR","MatSliderThumb","multi","MAT_SLIDER_RANGE_THUMB_VALUE_ACCESSOR","MatSliderRangeThumb","_getDefaultValue","stringValue","_hasSetInitialValue","_initialValue","_setValue","valueChange","dragStart","dragEnd","_translateX","_tickMarkOffset","debugName","_setIsFocused","_formControl","_destroyed","_onChangeFn","_onTouchedFn","_isControlInitialized","_onPointerDown","bind","_onPointerUp","next","complete","_initValue","_onChange","emit","_onInput","_onNgControlValueChange","isCursorOnSliderThumb","_updateWidthActive","_updateThumbUIByPointerEvent","_handleValueCorrection","setTimeout","_fixValue","xPos","numSteps","fixedPercentage","impreciseValue","prevValue","_clamp","_calcTranslateXByPointerEvent","padding","options","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focus","blur","MatSliderThumb_Factory","ɵdir","ɵɵdefineDirective","MatSliderThumb_HostBindings","ɵɵlistener","MatSliderThumb_change_HostBindingHandler","MatSliderThumb_input_HostBindingHandler","MatSliderThumb_blur_HostBindingHandler","MatSliderThumb_focus_HostBindingHandler","ɵɵattribute","outputs","_sibling","_isEndThumb","getMinPos","getMaxPos","_updateSibling","minWidth","maxWidth","midValue","_percentage","ripplePadding","MatSliderRangeThumb_Factory","ɵɵInheritDefinitionFeature","MatSliderModule","MatSliderModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/node_modules/@angular/material/fesm2022/slider.mjs"],"sourcesContent":["import { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, NgZone, Renderer2, ElementRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ViewChild, booleanAttribute, numberAttribute, ViewChildren, ContentChild, ContentChildren, forwardRef, EventEmitter, signal, Directive, Output, NgModule } from '@angular/core';\nimport { RippleState, MatRipple, MAT_RIPPLE_GLOBAL_OPTIONS } from './ripple.mjs';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { _animationsDisabled } from './animation.mjs';\nimport { _StructuralStylesLoader } from './structural-styles.mjs';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { MatCommonModule } from './common-module.mjs';\nimport { MatRippleModule } from './ripple-module.mjs';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/coercion';\nimport '@angular/cdk/layout';\n\n/**\n * Thumb types: range slider has two thumbs (START, END) whereas single point\n * slider only has one thumb (END).\n */\nvar _MatThumb;\n(function (_MatThumb) {\n    _MatThumb[_MatThumb[\"START\"] = 1] = \"START\";\n    _MatThumb[_MatThumb[\"END\"] = 2] = \"END\";\n})(_MatThumb || (_MatThumb = {}));\n/** Tick mark enum, for discrete sliders. */\nvar _MatTickMark;\n(function (_MatTickMark) {\n    _MatTickMark[_MatTickMark[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    _MatTickMark[_MatTickMark[\"INACTIVE\"] = 1] = \"INACTIVE\";\n})(_MatTickMark || (_MatTickMark = {}));\n/**\n * Injection token that can be used for a `MatSlider` to provide itself as a\n * parent to the `MatSliderThumb` and `MatSliderRangeThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER = new InjectionToken('_MatSlider');\n/**\n * Injection token that can be used to query for a `MatSliderThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER_THUMB = new InjectionToken('_MatSliderThumb');\n/**\n * Injection token that can be used to query for a `MatSliderRangeThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER_RANGE_THUMB = new InjectionToken('_MatSliderRangeThumb');\n/**\n * Injection token that can be used to query for a `MatSliderVisualThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER_VISUAL_THUMB = new InjectionToken('_MatSliderVisualThumb');\n/**\n * A simple change event emitted by the MatSlider component.\n * @deprecated Use event bindings directly on the MatSliderThumbs for `change` and `input` events. See https://v17.material.angular.dev/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatSliderChange {\n    /** The MatSliderThumb that was interacted with. */\n    source;\n    /** The MatSlider that was interacted with. */\n    parent;\n    /** The new value of the source slider. */\n    value;\n}\n\n/**\n * The visual slider thumb.\n *\n * Handles the slider thumb ripple states (hover, focus, and active),\n * and displaying the value tooltip on discrete sliders.\n * @docs-private\n */\nclass MatSliderVisualThumb {\n    _cdr = inject(ChangeDetectorRef);\n    _ngZone = inject(NgZone);\n    _slider = inject(MAT_SLIDER);\n    _renderer = inject(Renderer2);\n    _listenerCleanups;\n    /** Whether the slider displays a numeric value label upon pressing the thumb. */\n    discrete;\n    /** Indicates which slider thumb this input corresponds to. */\n    thumbPosition;\n    /** The display value of the slider thumb. */\n    valueIndicatorText;\n    /** The MatRipple for this slider thumb. */\n    _ripple;\n    /** The slider thumb knob. */\n    _knob;\n    /** The slider thumb value indicator container. */\n    _valueIndicatorContainer;\n    /** The slider input corresponding to this slider thumb. */\n    _sliderInput;\n    /** The native html element of the slider input corresponding to this thumb. */\n    _sliderInputEl;\n    /** The RippleRef for the slider thumbs hover state. */\n    _hoverRippleRef;\n    /** The RippleRef for the slider thumbs focus state. */\n    _focusRippleRef;\n    /** The RippleRef for the slider thumbs active state. */\n    _activeRippleRef;\n    /** Whether the slider thumb is currently being hovered. */\n    _isHovered = false;\n    /** Whether the slider thumb is currently being pressed. */\n    _isActive = false;\n    /** Whether the value indicator tooltip is visible. */\n    _isValueIndicatorVisible = false;\n    /** The host native HTML input element. */\n    _hostElement = inject(ElementRef).nativeElement;\n    _platform = inject(Platform);\n    constructor() { }\n    ngAfterViewInit() {\n        const sliderInput = this._slider._getInput(this.thumbPosition);\n        // No-op if the slider isn't configured properly. `MatSlider` will\n        // throw an error instructing the user how to set up the slider.\n        if (!sliderInput) {\n            return;\n        }\n        this._ripple.radius = 24;\n        this._sliderInput = sliderInput;\n        this._sliderInputEl = this._sliderInput._hostElement;\n        // These listeners don't update any data bindings so we bind them outside\n        // of the NgZone to prevent Angular from needlessly running change detection.\n        this._ngZone.runOutsideAngular(() => {\n            const input = this._sliderInputEl;\n            const renderer = this._renderer;\n            this._listenerCleanups = [\n                renderer.listen(input, 'pointermove', this._onPointerMove),\n                renderer.listen(input, 'pointerdown', this._onDragStart),\n                renderer.listen(input, 'pointerup', this._onDragEnd),\n                renderer.listen(input, 'pointerleave', this._onMouseLeave),\n                renderer.listen(input, 'focus', this._onFocus),\n                renderer.listen(input, 'blur', this._onBlur),\n            ];\n        });\n    }\n    ngOnDestroy() {\n        this._listenerCleanups?.forEach(cleanup => cleanup());\n    }\n    _onPointerMove = (event) => {\n        if (this._sliderInput._isFocused) {\n            return;\n        }\n        const rect = this._hostElement.getBoundingClientRect();\n        const isHovered = this._slider._isCursorOnSliderThumb(event, rect);\n        this._isHovered = isHovered;\n        if (isHovered) {\n            this._showHoverRipple();\n        }\n        else {\n            this._hideRipple(this._hoverRippleRef);\n        }\n    };\n    _onMouseLeave = () => {\n        this._isHovered = false;\n        this._hideRipple(this._hoverRippleRef);\n    };\n    _onFocus = () => {\n        // We don't want to show the hover ripple on top of the focus ripple.\n        // Happen when the users cursor is over a thumb and then the user tabs to it.\n        this._hideRipple(this._hoverRippleRef);\n        this._showFocusRipple();\n        this._hostElement.classList.add('mdc-slider__thumb--focused');\n    };\n    _onBlur = () => {\n        // Happens when the user tabs away while still dragging a thumb.\n        if (!this._isActive) {\n            this._hideRipple(this._focusRippleRef);\n        }\n        // Happens when the user tabs away from a thumb but their cursor is still over it.\n        if (this._isHovered) {\n            this._showHoverRipple();\n        }\n        this._hostElement.classList.remove('mdc-slider__thumb--focused');\n    };\n    _onDragStart = (event) => {\n        if (event.button !== 0) {\n            return;\n        }\n        this._isActive = true;\n        this._showActiveRipple();\n    };\n    _onDragEnd = () => {\n        this._isActive = false;\n        this._hideRipple(this._activeRippleRef);\n        // Happens when the user starts dragging a thumb, tabs away, and then stops dragging.\n        if (!this._sliderInput._isFocused) {\n            this._hideRipple(this._focusRippleRef);\n        }\n        // On Safari we need to immediately re-show the hover ripple because\n        // sliders do not retain focus from pointer events on that platform.\n        if (this._platform.SAFARI) {\n            this._showHoverRipple();\n        }\n    };\n    /** Handles displaying the hover ripple. */\n    _showHoverRipple() {\n        if (!this._isShowingRipple(this._hoverRippleRef)) {\n            this._hoverRippleRef = this._showRipple({ enterDuration: 0, exitDuration: 0 });\n            this._hoverRippleRef?.element.classList.add('mat-mdc-slider-hover-ripple');\n        }\n    }\n    /** Handles displaying the focus ripple. */\n    _showFocusRipple() {\n        // Show the focus ripple event if noop animations are enabled.\n        if (!this._isShowingRipple(this._focusRippleRef)) {\n            this._focusRippleRef = this._showRipple({ enterDuration: 0, exitDuration: 0 }, true);\n            this._focusRippleRef?.element.classList.add('mat-mdc-slider-focus-ripple');\n        }\n    }\n    /** Handles displaying the active ripple. */\n    _showActiveRipple() {\n        if (!this._isShowingRipple(this._activeRippleRef)) {\n            this._activeRippleRef = this._showRipple({ enterDuration: 225, exitDuration: 400 });\n            this._activeRippleRef?.element.classList.add('mat-mdc-slider-active-ripple');\n        }\n    }\n    /** Whether the given rippleRef is currently fading in or visible. */\n    _isShowingRipple(rippleRef) {\n        return rippleRef?.state === RippleState.FADING_IN || rippleRef?.state === RippleState.VISIBLE;\n    }\n    /** Manually launches the slider thumb ripple using the specified ripple animation config. */\n    _showRipple(animation, ignoreGlobalRippleConfig) {\n        if (this._slider.disabled) {\n            return;\n        }\n        this._showValueIndicator();\n        if (this._slider._isRange) {\n            const sibling = this._slider._getThumb(this.thumbPosition === _MatThumb.START ? _MatThumb.END : _MatThumb.START);\n            sibling._showValueIndicator();\n        }\n        if (this._slider._globalRippleOptions?.disabled && !ignoreGlobalRippleConfig) {\n            return;\n        }\n        return this._ripple.launch({\n            animation: this._slider._noopAnimations ? { enterDuration: 0, exitDuration: 0 } : animation,\n            centered: true,\n            persistent: true,\n        });\n    }\n    /**\n     * Fades out the given ripple.\n     * Also hides the value indicator if no ripple is showing.\n     */\n    _hideRipple(rippleRef) {\n        rippleRef?.fadeOut();\n        if (this._isShowingAnyRipple()) {\n            return;\n        }\n        if (!this._slider._isRange) {\n            this._hideValueIndicator();\n        }\n        const sibling = this._getSibling();\n        if (!sibling._isShowingAnyRipple()) {\n            this._hideValueIndicator();\n            sibling._hideValueIndicator();\n        }\n    }\n    /** Shows the value indicator ui. */\n    _showValueIndicator() {\n        this._hostElement.classList.add('mdc-slider__thumb--with-indicator');\n    }\n    /** Hides the value indicator ui. */\n    _hideValueIndicator() {\n        this._hostElement.classList.remove('mdc-slider__thumb--with-indicator');\n    }\n    _getSibling() {\n        return this._slider._getThumb(this.thumbPosition === _MatThumb.START ? _MatThumb.END : _MatThumb.START);\n    }\n    /** Gets the value indicator container's native HTML element. */\n    _getValueIndicatorContainer() {\n        return this._valueIndicatorContainer?.nativeElement;\n    }\n    /** Gets the native HTML element of the slider thumb knob. */\n    _getKnob() {\n        return this._knob.nativeElement;\n    }\n    _isShowingAnyRipple() {\n        return (this._isShowingRipple(this._hoverRippleRef) ||\n            this._isShowingRipple(this._focusRippleRef) ||\n            this._isShowingRipple(this._activeRippleRef));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSliderVisualThumb, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.2.0-rc.1\", type: MatSliderVisualThumb, isStandalone: true, selector: \"mat-slider-visual-thumb\", inputs: { discrete: \"discrete\", thumbPosition: \"thumbPosition\", valueIndicatorText: \"valueIndicatorText\" }, host: { classAttribute: \"mdc-slider__thumb mat-mdc-slider-visual-thumb\" }, providers: [{ provide: MAT_SLIDER_VISUAL_THUMB, useExisting: MatSliderVisualThumb }], viewQueries: [{ propertyName: \"_ripple\", first: true, predicate: MatRipple, descendants: true }, { propertyName: \"_knob\", first: true, predicate: [\"knob\"], descendants: true }, { propertyName: \"_valueIndicatorContainer\", first: true, predicate: [\"valueIndicatorContainer\"], descendants: true }], ngImport: i0, template: \"@if (discrete) {\\n  <div class=\\\"mdc-slider__value-indicator-container\\\" #valueIndicatorContainer>\\n    <div class=\\\"mdc-slider__value-indicator\\\">\\n      <span class=\\\"mdc-slider__value-indicator-text\\\">{{valueIndicatorText}}</span>\\n    </div>\\n  </div>\\n}\\n<div class=\\\"mdc-slider__thumb-knob\\\" #knob></div>\\n<div matRipple class=\\\"mat-focus-indicator\\\" [matRippleDisabled]=\\\"true\\\"></div>\\n\", styles: [\".mat-mdc-slider-visual-thumb .mat-ripple{height:100%;width:100%}.mat-mdc-slider .mdc-slider__tick-marks{justify-content:start}.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--active,.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--inactive{position:absolute;left:2px}\\n\"], dependencies: [{ kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSliderVisualThumb, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-slider-visual-thumb', host: {\n                        'class': 'mdc-slider__thumb mat-mdc-slider-visual-thumb',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [{ provide: MAT_SLIDER_VISUAL_THUMB, useExisting: MatSliderVisualThumb }], imports: [MatRipple], template: \"@if (discrete) {\\n  <div class=\\\"mdc-slider__value-indicator-container\\\" #valueIndicatorContainer>\\n    <div class=\\\"mdc-slider__value-indicator\\\">\\n      <span class=\\\"mdc-slider__value-indicator-text\\\">{{valueIndicatorText}}</span>\\n    </div>\\n  </div>\\n}\\n<div class=\\\"mdc-slider__thumb-knob\\\" #knob></div>\\n<div matRipple class=\\\"mat-focus-indicator\\\" [matRippleDisabled]=\\\"true\\\"></div>\\n\", styles: [\".mat-mdc-slider-visual-thumb .mat-ripple{height:100%;width:100%}.mat-mdc-slider .mdc-slider__tick-marks{justify-content:start}.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--active,.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--inactive{position:absolute;left:2px}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { discrete: [{\n                type: Input\n            }], thumbPosition: [{\n                type: Input\n            }], valueIndicatorText: [{\n                type: Input\n            }], _ripple: [{\n                type: ViewChild,\n                args: [MatRipple]\n            }], _knob: [{\n                type: ViewChild,\n                args: ['knob']\n            }], _valueIndicatorContainer: [{\n                type: ViewChild,\n                args: ['valueIndicatorContainer']\n            }] } });\n\n// TODO(wagnermaciel): maybe handle the following edge case:\n// 1. start dragging discrete slider\n// 2. tab to disable checkbox\n// 3. without ending drag, disable the slider\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nclass MatSlider {\n    _ngZone = inject(NgZone);\n    _cdr = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dir = inject(Directionality, { optional: true });\n    _globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {\n        optional: true,\n    });\n    /** The active portion of the slider track. */\n    _trackActive;\n    /** The slider thumb(s). */\n    _thumbs;\n    /** The sliders hidden range input(s). */\n    _input;\n    /** The sliders hidden range input(s). */\n    _inputs;\n    /** Whether the slider is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(v) {\n        this._disabled = v;\n        const endInput = this._getInput(_MatThumb.END);\n        const startInput = this._getInput(_MatThumb.START);\n        if (endInput) {\n            endInput.disabled = this._disabled;\n        }\n        if (startInput) {\n            startInput.disabled = this._disabled;\n        }\n    }\n    _disabled = false;\n    /** Whether the slider displays a numeric value label upon pressing the thumb. */\n    get discrete() {\n        return this._discrete;\n    }\n    set discrete(v) {\n        this._discrete = v;\n        this._updateValueIndicatorUIs();\n    }\n    _discrete = false;\n    /** Whether the slider displays tick marks along the slider track. */\n    get showTickMarks() {\n        return this._showTickMarks;\n    }\n    set showTickMarks(value) {\n        this._showTickMarks = value;\n        if (this._hasViewInitialized) {\n            this._updateTickMarkUI();\n            this._updateTickMarkTrackUI();\n        }\n    }\n    _showTickMarks = false;\n    /** The minimum value that the slider can have. */\n    get min() {\n        return this._min;\n    }\n    set min(v) {\n        const min = v === undefined || v === null || isNaN(v) ? this._min : v;\n        if (this._min !== min) {\n            this._updateMin(min);\n        }\n    }\n    _min = 0;\n    /**\n     * Theme color of the slider. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/slider/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    color;\n    /** Whether ripples are disabled in the slider. */\n    disableRipple = false;\n    _updateMin(min) {\n        const prevMin = this._min;\n        this._min = min;\n        this._isRange ? this._updateMinRange({ old: prevMin, new: min }) : this._updateMinNonRange(min);\n        this._onMinMaxOrStepChange();\n    }\n    _updateMinRange(min) {\n        const endInput = this._getInput(_MatThumb.END);\n        const startInput = this._getInput(_MatThumb.START);\n        const oldEndValue = endInput.value;\n        const oldStartValue = startInput.value;\n        startInput.min = min.new;\n        endInput.min = Math.max(min.new, startInput.value);\n        startInput.max = Math.min(endInput.max, endInput.value);\n        startInput._updateWidthInactive();\n        endInput._updateWidthInactive();\n        min.new < min.old\n            ? this._onTranslateXChangeBySideEffect(endInput, startInput)\n            : this._onTranslateXChangeBySideEffect(startInput, endInput);\n        if (oldEndValue !== endInput.value) {\n            this._onValueChange(endInput);\n        }\n        if (oldStartValue !== startInput.value) {\n            this._onValueChange(startInput);\n        }\n    }\n    _updateMinNonRange(min) {\n        const input = this._getInput(_MatThumb.END);\n        if (input) {\n            const oldValue = input.value;\n            input.min = min;\n            input._updateThumbUIByValue();\n            this._updateTrackUI(input);\n            if (oldValue !== input.value) {\n                this._onValueChange(input);\n            }\n        }\n    }\n    /** The maximum value that the slider can have. */\n    get max() {\n        return this._max;\n    }\n    set max(v) {\n        const max = v === undefined || v === null || isNaN(v) ? this._max : v;\n        if (this._max !== max) {\n            this._updateMax(max);\n        }\n    }\n    _max = 100;\n    _updateMax(max) {\n        const prevMax = this._max;\n        this._max = max;\n        this._isRange ? this._updateMaxRange({ old: prevMax, new: max }) : this._updateMaxNonRange(max);\n        this._onMinMaxOrStepChange();\n    }\n    _updateMaxRange(max) {\n        const endInput = this._getInput(_MatThumb.END);\n        const startInput = this._getInput(_MatThumb.START);\n        const oldEndValue = endInput.value;\n        const oldStartValue = startInput.value;\n        endInput.max = max.new;\n        startInput.max = Math.min(max.new, endInput.value);\n        endInput.min = startInput.value;\n        endInput._updateWidthInactive();\n        startInput._updateWidthInactive();\n        max.new > max.old\n            ? this._onTranslateXChangeBySideEffect(startInput, endInput)\n            : this._onTranslateXChangeBySideEffect(endInput, startInput);\n        if (oldEndValue !== endInput.value) {\n            this._onValueChange(endInput);\n        }\n        if (oldStartValue !== startInput.value) {\n            this._onValueChange(startInput);\n        }\n    }\n    _updateMaxNonRange(max) {\n        const input = this._getInput(_MatThumb.END);\n        if (input) {\n            const oldValue = input.value;\n            input.max = max;\n            input._updateThumbUIByValue();\n            this._updateTrackUI(input);\n            if (oldValue !== input.value) {\n                this._onValueChange(input);\n            }\n        }\n    }\n    /** The values at which the thumb will snap. */\n    get step() {\n        return this._step;\n    }\n    set step(v) {\n        const step = isNaN(v) ? this._step : v;\n        if (this._step !== step) {\n            this._updateStep(step);\n        }\n    }\n    _step = 1;\n    _updateStep(step) {\n        this._step = step;\n        this._isRange ? this._updateStepRange() : this._updateStepNonRange();\n        this._onMinMaxOrStepChange();\n    }\n    _updateStepRange() {\n        const endInput = this._getInput(_MatThumb.END);\n        const startInput = this._getInput(_MatThumb.START);\n        const oldEndValue = endInput.value;\n        const oldStartValue = startInput.value;\n        const prevStartValue = startInput.value;\n        endInput.min = this._min;\n        startInput.max = this._max;\n        endInput.step = this._step;\n        startInput.step = this._step;\n        if (this._platform.SAFARI) {\n            endInput.value = endInput.value;\n            startInput.value = startInput.value;\n        }\n        endInput.min = Math.max(this._min, startInput.value);\n        startInput.max = Math.min(this._max, endInput.value);\n        startInput._updateWidthInactive();\n        endInput._updateWidthInactive();\n        endInput.value < prevStartValue\n            ? this._onTranslateXChangeBySideEffect(startInput, endInput)\n            : this._onTranslateXChangeBySideEffect(endInput, startInput);\n        if (oldEndValue !== endInput.value) {\n            this._onValueChange(endInput);\n        }\n        if (oldStartValue !== startInput.value) {\n            this._onValueChange(startInput);\n        }\n    }\n    _updateStepNonRange() {\n        const input = this._getInput(_MatThumb.END);\n        if (input) {\n            const oldValue = input.value;\n            input.step = this._step;\n            if (this._platform.SAFARI) {\n                input.value = input.value;\n            }\n            input._updateThumbUIByValue();\n            if (oldValue !== input.value) {\n                this._onValueChange(input);\n            }\n        }\n    }\n    /**\n     * Function that will be used to format the value before it is displayed\n     * in the thumb label. Can be used to format very large number in order\n     * for them to fit into the slider thumb.\n     */\n    displayWith = (value) => `${value}`;\n    /** Used to keep track of & render the active & inactive tick marks on the slider track. */\n    _tickMarks;\n    /** Whether animations have been disabled. */\n    _noopAnimations = _animationsDisabled();\n    /** Subscription to changes to the directionality (LTR / RTL) context for the application. */\n    _dirChangeSubscription;\n    /** Observer used to monitor size changes in the slider. */\n    _resizeObserver;\n    // Stored dimensions to avoid calling getBoundingClientRect redundantly.\n    _cachedWidth;\n    _cachedLeft;\n    _rippleRadius = 24;\n    // The value indicator tooltip text for the visual slider thumb(s).\n    /** @docs-private */\n    startValueIndicatorText = '';\n    /** @docs-private */\n    endValueIndicatorText = '';\n    // Used to control the translateX of the visual slider thumb(s).\n    _endThumbTransform;\n    _startThumbTransform;\n    _isRange = false;\n    /** Whether the slider is rtl. */\n    _isRtl = false;\n    _hasViewInitialized = false;\n    /**\n     * The width of the tick mark track.\n     * The tick mark track width is different from full track width\n     */\n    _tickMarkTrackWidth = 0;\n    _hasAnimation = false;\n    _resizeTimer = null;\n    _platform = inject(Platform);\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n        if (this._dir) {\n            this._dirChangeSubscription = this._dir.change.subscribe(() => this._onDirChange());\n            this._isRtl = this._dir.value === 'rtl';\n        }\n    }\n    /** The radius of the native slider's knob. AFAIK there is no way to avoid hardcoding this. */\n    _knobRadius = 8;\n    _inputPadding;\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._updateDimensions();\n        }\n        const eInput = this._getInput(_MatThumb.END);\n        const sInput = this._getInput(_MatThumb.START);\n        this._isRange = !!eInput && !!sInput;\n        this._cdr.detectChanges();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            _validateInputs(this._isRange, this._getInput(_MatThumb.END), this._getInput(_MatThumb.START));\n        }\n        const thumb = this._getThumb(_MatThumb.END);\n        this._rippleRadius = thumb._ripple.radius;\n        this._inputPadding = this._rippleRadius - this._knobRadius;\n        this._isRange\n            ? this._initUIRange(eInput, sInput)\n            : this._initUINonRange(eInput);\n        this._updateTrackUI(eInput);\n        this._updateTickMarkUI();\n        this._updateTickMarkTrackUI();\n        this._observeHostResize();\n        this._cdr.detectChanges();\n    }\n    _initUINonRange(eInput) {\n        eInput.initProps();\n        eInput.initUI();\n        this._updateValueIndicatorUI(eInput);\n        this._hasViewInitialized = true;\n        eInput._updateThumbUIByValue();\n    }\n    _initUIRange(eInput, sInput) {\n        eInput.initProps();\n        eInput.initUI();\n        sInput.initProps();\n        sInput.initUI();\n        eInput._updateMinMax();\n        sInput._updateMinMax();\n        eInput._updateStaticStyles();\n        sInput._updateStaticStyles();\n        this._updateValueIndicatorUIs();\n        this._hasViewInitialized = true;\n        eInput._updateThumbUIByValue();\n        sInput._updateThumbUIByValue();\n    }\n    ngOnDestroy() {\n        this._dirChangeSubscription.unsubscribe();\n        this._resizeObserver?.disconnect();\n        this._resizeObserver = null;\n    }\n    /** Handles updating the slider ui after a dir change. */\n    _onDirChange() {\n        this._isRtl = this._dir?.value === 'rtl';\n        this._isRange ? this._onDirChangeRange() : this._onDirChangeNonRange();\n        this._updateTickMarkUI();\n    }\n    _onDirChangeRange() {\n        const endInput = this._getInput(_MatThumb.END);\n        const startInput = this._getInput(_MatThumb.START);\n        endInput._setIsLeftThumb();\n        startInput._setIsLeftThumb();\n        endInput.translateX = endInput._calcTranslateXByValue();\n        startInput.translateX = startInput._calcTranslateXByValue();\n        endInput._updateStaticStyles();\n        startInput._updateStaticStyles();\n        endInput._updateWidthInactive();\n        startInput._updateWidthInactive();\n        endInput._updateThumbUIByValue();\n        startInput._updateThumbUIByValue();\n    }\n    _onDirChangeNonRange() {\n        const input = this._getInput(_MatThumb.END);\n        input._updateThumbUIByValue();\n    }\n    /** Starts observing and updating the slider if the host changes its size. */\n    _observeHostResize() {\n        if (typeof ResizeObserver === 'undefined' || !ResizeObserver) {\n            return;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver = new ResizeObserver(() => {\n                if (this._isActive()) {\n                    return;\n                }\n                if (this._resizeTimer) {\n                    clearTimeout(this._resizeTimer);\n                }\n                this._onResize();\n            });\n            this._resizeObserver.observe(this._elementRef.nativeElement);\n        });\n    }\n    /** Whether any of the thumbs are currently active. */\n    _isActive() {\n        return this._getThumb(_MatThumb.START)._isActive || this._getThumb(_MatThumb.END)._isActive;\n    }\n    _getValue(thumbPosition = _MatThumb.END) {\n        const input = this._getInput(thumbPosition);\n        if (!input) {\n            return this.min;\n        }\n        return input.value;\n    }\n    _skipUpdate() {\n        return !!(this._getInput(_MatThumb.START)?._skipUIUpdate || this._getInput(_MatThumb.END)?._skipUIUpdate);\n    }\n    /** Stores the slider dimensions. */\n    _updateDimensions() {\n        this._cachedWidth = this._elementRef.nativeElement.offsetWidth;\n        this._cachedLeft = this._elementRef.nativeElement.getBoundingClientRect().left;\n    }\n    /** Sets the styles for the active portion of the track. */\n    _setTrackActiveStyles(styles) {\n        const trackStyle = this._trackActive.nativeElement.style;\n        trackStyle.left = styles.left;\n        trackStyle.right = styles.right;\n        trackStyle.transformOrigin = styles.transformOrigin;\n        trackStyle.transform = styles.transform;\n    }\n    /** Returns the translateX positioning for a tick mark based on it's index. */\n    _calcTickMarkTransform(index) {\n        // TODO(wagnermaciel): See if we can avoid doing this and just using flex to position these.\n        const offset = index * (this._tickMarkTrackWidth / (this._tickMarks.length - 1));\n        const translateX = this._isRtl ? this._cachedWidth - 6 - offset : offset;\n        return `translateX(${translateX}px`;\n    }\n    // Handlers for updating the slider ui.\n    _onTranslateXChange(source) {\n        if (!this._hasViewInitialized) {\n            return;\n        }\n        this._updateThumbUI(source);\n        this._updateTrackUI(source);\n        this._updateOverlappingThumbUI(source);\n    }\n    _onTranslateXChangeBySideEffect(input1, input2) {\n        if (!this._hasViewInitialized) {\n            return;\n        }\n        input1._updateThumbUIByValue();\n        input2._updateThumbUIByValue();\n    }\n    _onValueChange(source) {\n        if (!this._hasViewInitialized) {\n            return;\n        }\n        this._updateValueIndicatorUI(source);\n        this._updateTickMarkUI();\n        this._cdr.detectChanges();\n    }\n    _onMinMaxOrStepChange() {\n        if (!this._hasViewInitialized) {\n            return;\n        }\n        this._updateTickMarkUI();\n        this._updateTickMarkTrackUI();\n        this._cdr.markForCheck();\n    }\n    _onResize() {\n        if (!this._hasViewInitialized) {\n            return;\n        }\n        this._updateDimensions();\n        if (this._isRange) {\n            const eInput = this._getInput(_MatThumb.END);\n            const sInput = this._getInput(_MatThumb.START);\n            eInput._updateThumbUIByValue();\n            sInput._updateThumbUIByValue();\n            eInput._updateStaticStyles();\n            sInput._updateStaticStyles();\n            eInput._updateMinMax();\n            sInput._updateMinMax();\n            eInput._updateWidthInactive();\n            sInput._updateWidthInactive();\n        }\n        else {\n            const eInput = this._getInput(_MatThumb.END);\n            if (eInput) {\n                eInput._updateThumbUIByValue();\n            }\n        }\n        this._updateTickMarkUI();\n        this._updateTickMarkTrackUI();\n        this._cdr.detectChanges();\n    }\n    /** Whether or not the slider thumbs overlap. */\n    _thumbsOverlap = false;\n    /** Returns true if the slider knobs are overlapping one another. */\n    _areThumbsOverlapping() {\n        const startInput = this._getInput(_MatThumb.START);\n        const endInput = this._getInput(_MatThumb.END);\n        if (!startInput || !endInput) {\n            return false;\n        }\n        return endInput.translateX - startInput.translateX < 20;\n    }\n    /**\n     * Updates the class names of overlapping slider thumbs so\n     * that the current active thumb is styled to be on \"top\".\n     */\n    _updateOverlappingThumbClassNames(source) {\n        const sibling = source.getSibling();\n        const sourceThumb = this._getThumb(source.thumbPosition);\n        const siblingThumb = this._getThumb(sibling.thumbPosition);\n        siblingThumb._hostElement.classList.remove('mdc-slider__thumb--top');\n        sourceThumb._hostElement.classList.toggle('mdc-slider__thumb--top', this._thumbsOverlap);\n    }\n    /** Updates the UI of slider thumbs when they begin or stop overlapping. */\n    _updateOverlappingThumbUI(source) {\n        if (!this._isRange || this._skipUpdate()) {\n            return;\n        }\n        if (this._thumbsOverlap !== this._areThumbsOverlapping()) {\n            this._thumbsOverlap = !this._thumbsOverlap;\n            this._updateOverlappingThumbClassNames(source);\n        }\n    }\n    // _MatThumb styles update conditions\n    //\n    // 1. TranslateX, resize, or dir change\n    //    - Reason: The thumb styles need to be updated according to the new translateX.\n    // 2. Min, max, or step\n    //    - Reason: The value may have silently changed.\n    /** Updates the translateX of the given thumb. */\n    _updateThumbUI(source) {\n        if (this._skipUpdate()) {\n            return;\n        }\n        const thumb = this._getThumb(source.thumbPosition === _MatThumb.END ? _MatThumb.END : _MatThumb.START);\n        thumb._hostElement.style.transform = `translateX(${source.translateX}px)`;\n    }\n    // Value indicator text update conditions\n    //\n    // 1. Value\n    //    - Reason: The value displayed needs to be updated.\n    // 2. Min, max, or step\n    //    - Reason: The value may have silently changed.\n    /** Updates the value indicator tooltip ui for the given thumb. */\n    _updateValueIndicatorUI(source) {\n        if (this._skipUpdate()) {\n            return;\n        }\n        const valuetext = this.displayWith(source.value);\n        this._hasViewInitialized\n            ? source._valuetext.set(valuetext)\n            : source._hostElement.setAttribute('aria-valuetext', valuetext);\n        if (this.discrete) {\n            source.thumbPosition === _MatThumb.START\n                ? (this.startValueIndicatorText = valuetext)\n                : (this.endValueIndicatorText = valuetext);\n            const visualThumb = this._getThumb(source.thumbPosition);\n            valuetext.length < 3\n                ? visualThumb._hostElement.classList.add('mdc-slider__thumb--short-value')\n                : visualThumb._hostElement.classList.remove('mdc-slider__thumb--short-value');\n        }\n    }\n    /** Updates all value indicator UIs in the slider. */\n    _updateValueIndicatorUIs() {\n        const eInput = this._getInput(_MatThumb.END);\n        const sInput = this._getInput(_MatThumb.START);\n        if (eInput) {\n            this._updateValueIndicatorUI(eInput);\n        }\n        if (sInput) {\n            this._updateValueIndicatorUI(sInput);\n        }\n    }\n    // Update Tick Mark Track Width\n    //\n    // 1. Min, max, or step\n    //    - Reason: The maximum reachable value may have changed.\n    //    - Side note: The maximum reachable value is different from the maximum value set by the\n    //      user. For example, a slider with [min: 5, max: 100, step: 10] would have a maximum\n    //      reachable value of 95.\n    // 2. Resize\n    //    - Reason: The position for the maximum reachable value needs to be recalculated.\n    /** Updates the width of the tick mark track. */\n    _updateTickMarkTrackUI() {\n        if (!this.showTickMarks || this._skipUpdate()) {\n            return;\n        }\n        const step = this._step && this._step > 0 ? this._step : 1;\n        const maxValue = Math.floor(this.max / step) * step;\n        const percentage = (maxValue - this.min) / (this.max - this.min);\n        this._tickMarkTrackWidth = (this._cachedWidth - 6) * percentage;\n    }\n    // Track active update conditions\n    //\n    // 1. TranslateX\n    //    - Reason: The track active should line up with the new thumb position.\n    // 2. Min or max\n    //    - Reason #1: The 'active' percentage needs to be recalculated.\n    //    - Reason #2: The value may have silently changed.\n    // 3. Step\n    //    - Reason: The value may have silently changed causing the thumb(s) to shift.\n    // 4. Dir change\n    //    - Reason: The track active will need to be updated according to the new thumb position(s).\n    // 5. Resize\n    //    - Reason: The total width the 'active' tracks translateX is based on has changed.\n    /** Updates the scale on the active portion of the track. */\n    _updateTrackUI(source) {\n        if (this._skipUpdate()) {\n            return;\n        }\n        this._isRange\n            ? this._updateTrackUIRange(source)\n            : this._updateTrackUINonRange(source);\n    }\n    _updateTrackUIRange(source) {\n        const sibling = source.getSibling();\n        if (!sibling || !this._cachedWidth) {\n            return;\n        }\n        const activePercentage = Math.abs(sibling.translateX - source.translateX) / this._cachedWidth;\n        if (source._isLeftThumb && this._cachedWidth) {\n            this._setTrackActiveStyles({\n                left: 'auto',\n                right: `${this._cachedWidth - sibling.translateX}px`,\n                transformOrigin: 'right',\n                transform: `scaleX(${activePercentage})`,\n            });\n        }\n        else {\n            this._setTrackActiveStyles({\n                left: `${sibling.translateX}px`,\n                right: 'auto',\n                transformOrigin: 'left',\n                transform: `scaleX(${activePercentage})`,\n            });\n        }\n    }\n    _updateTrackUINonRange(source) {\n        this._isRtl\n            ? this._setTrackActiveStyles({\n                left: 'auto',\n                right: '0px',\n                transformOrigin: 'right',\n                transform: `scaleX(${1 - source.fillPercentage})`,\n            })\n            : this._setTrackActiveStyles({\n                left: '0px',\n                right: 'auto',\n                transformOrigin: 'left',\n                transform: `scaleX(${source.fillPercentage})`,\n            });\n    }\n    // Tick mark update conditions\n    //\n    // 1. Value\n    //    - Reason: a tick mark which was once active might now be inactive or vice versa.\n    // 2. Min, max, or step\n    //    - Reason #1: the number of tick marks may have changed.\n    //    - Reason #2: The value may have silently changed.\n    /** Updates the dots along the slider track. */\n    _updateTickMarkUI() {\n        if (!this.showTickMarks ||\n            this.step === undefined ||\n            this.min === undefined ||\n            this.max === undefined) {\n            return;\n        }\n        const step = this.step > 0 ? this.step : 1;\n        this._isRange ? this._updateTickMarkUIRange(step) : this._updateTickMarkUINonRange(step);\n    }\n    _updateTickMarkUINonRange(step) {\n        const value = this._getValue();\n        let numActive = Math.max(Math.round((value - this.min) / step), 0) + 1;\n        let numInactive = Math.max(Math.round((this.max - value) / step), 0) - 1;\n        this._isRtl ? numActive++ : numInactive++;\n        this._tickMarks = Array(numActive)\n            .fill(_MatTickMark.ACTIVE)\n            .concat(Array(numInactive).fill(_MatTickMark.INACTIVE));\n    }\n    _updateTickMarkUIRange(step) {\n        const endValue = this._getValue();\n        const startValue = this._getValue(_MatThumb.START);\n        const numInactiveBeforeStartThumb = Math.max(Math.round((startValue - this.min) / step), 0);\n        const numActive = Math.max(Math.round((endValue - startValue) / step) + 1, 0);\n        const numInactiveAfterEndThumb = Math.max(Math.round((this.max - endValue) / step), 0);\n        this._tickMarks = Array(numInactiveBeforeStartThumb)\n            .fill(_MatTickMark.INACTIVE)\n            .concat(Array(numActive).fill(_MatTickMark.ACTIVE), Array(numInactiveAfterEndThumb).fill(_MatTickMark.INACTIVE));\n    }\n    /** Gets the slider thumb input of the given thumb position. */\n    _getInput(thumbPosition) {\n        if (thumbPosition === _MatThumb.END && this._input) {\n            return this._input;\n        }\n        if (this._inputs?.length) {\n            return thumbPosition === _MatThumb.START ? this._inputs.first : this._inputs.last;\n        }\n        return;\n    }\n    /** Gets the slider thumb HTML input element of the given thumb position. */\n    _getThumb(thumbPosition) {\n        return thumbPosition === _MatThumb.END ? this._thumbs?.last : this._thumbs?.first;\n    }\n    _setTransition(withAnimation) {\n        this._hasAnimation = !this._platform.IOS && withAnimation && !this._noopAnimations;\n        this._elementRef.nativeElement.classList.toggle('mat-mdc-slider-with-animation', this._hasAnimation);\n    }\n    /** Whether the given pointer event occurred within the bounds of the slider pointer's DOM Rect. */\n    _isCursorOnSliderThumb(event, rect) {\n        const radius = rect.width / 2;\n        const centerX = rect.x + radius;\n        const centerY = rect.y + radius;\n        const dx = event.clientX - centerX;\n        const dy = event.clientY - centerY;\n        return Math.pow(dx, 2) + Math.pow(dy, 2) < Math.pow(radius, 2);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSlider, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.2.0-rc.1\", type: MatSlider, isStandalone: true, selector: \"mat-slider\", inputs: { disabled: [\"disabled\", \"disabled\", booleanAttribute], discrete: [\"discrete\", \"discrete\", booleanAttribute], showTickMarks: [\"showTickMarks\", \"showTickMarks\", booleanAttribute], min: [\"min\", \"min\", numberAttribute], color: \"color\", disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], max: [\"max\", \"max\", numberAttribute], step: [\"step\", \"step\", numberAttribute], displayWith: \"displayWith\" }, host: { properties: { \"class\": \"\\\"mat-\\\" + (color || \\\"primary\\\")\", \"class.mdc-slider--range\": \"_isRange\", \"class.mdc-slider--disabled\": \"disabled\", \"class.mdc-slider--discrete\": \"discrete\", \"class.mdc-slider--tick-marks\": \"showTickMarks\", \"class._mat-animation-noopable\": \"_noopAnimations\" }, classAttribute: \"mat-mdc-slider mdc-slider\" }, providers: [{ provide: MAT_SLIDER, useExisting: MatSlider }], queries: [{ propertyName: \"_input\", first: true, predicate: MAT_SLIDER_THUMB, descendants: true }, { propertyName: \"_inputs\", predicate: MAT_SLIDER_RANGE_THUMB }], viewQueries: [{ propertyName: \"_trackActive\", first: true, predicate: [\"trackActive\"], descendants: true }, { propertyName: \"_thumbs\", predicate: MAT_SLIDER_VISUAL_THUMB, descendants: true }], exportAs: [\"matSlider\"], ngImport: i0, template: \"<!-- Inputs -->\\n<ng-content></ng-content>\\n\\n<!-- Track -->\\n<div class=\\\"mdc-slider__track\\\">\\n  <div class=\\\"mdc-slider__track--inactive\\\"></div>\\n  <div class=\\\"mdc-slider__track--active\\\">\\n    <div #trackActive class=\\\"mdc-slider__track--active_fill\\\"></div>\\n  </div>\\n  @if (showTickMarks) {\\n    <div class=\\\"mdc-slider__tick-marks\\\" #tickMarkContainer>\\n      @if (_cachedWidth) {\\n        @for (tickMark of _tickMarks; track i; let i = $index) {\\n          <div\\n            [class]=\\\"tickMark === 0 ? 'mdc-slider__tick-mark--active' : 'mdc-slider__tick-mark--inactive'\\\"\\n            [style.transform]=\\\"_calcTickMarkTransform(i)\\\"></div>\\n        }\\n      }\\n    </div>\\n  }\\n</div>\\n\\n<!-- Thumbs -->\\n@if (_isRange) {\\n  <mat-slider-visual-thumb\\n    [discrete]=\\\"discrete\\\"\\n    [thumbPosition]=\\\"1\\\"\\n    [valueIndicatorText]=\\\"startValueIndicatorText\\\">\\n  </mat-slider-visual-thumb>\\n}\\n\\n<mat-slider-visual-thumb\\n  [discrete]=\\\"discrete\\\"\\n  [thumbPosition]=\\\"2\\\"\\n  [valueIndicatorText]=\\\"endValueIndicatorText\\\">\\n</mat-slider-visual-thumb>\\n\", styles: [\".mdc-slider__track{position:absolute;top:50%;transform:translateY(-50%);width:100%;pointer-events:none;height:var(--mat-slider-inactive-track-height, 4px)}.mdc-slider__track--active,.mdc-slider__track--inactive{display:flex;height:100%;position:absolute;width:100%}.mdc-slider__track--active{overflow:hidden;border-radius:var(--mat-slider-active-track-shape, var(--mat-sys-corner-full));height:var(--mat-slider-active-track-height, 4px);top:calc((var(--mat-slider-inactive-track-height, 4px) - var(--mat-slider-active-track-height, 4px))/2)}.mdc-slider__track--active_fill{border-top-style:solid;box-sizing:border-box;height:100%;width:100%;position:relative;transform-origin:left;transition:transform 80ms ease;border-color:var(--mat-slider-active-track-color, var(--mat-sys-primary));border-top-width:var(--mat-slider-active-track-height, 4px)}.mdc-slider--disabled .mdc-slider__track--active_fill{border-color:var(--mat-slider-disabled-active-track-color, var(--mat-sys-on-surface))}[dir=rtl] .mdc-slider__track--active_fill{-webkit-transform-origin:right;transform-origin:right}.mdc-slider__track--inactive{left:0;top:0;opacity:.24;background-color:var(--mat-slider-inactive-track-color, var(--mat-sys-surface-variant));height:var(--mat-slider-inactive-track-height, 4px);border-radius:var(--mat-slider-inactive-track-shape, var(--mat-sys-corner-full))}.mdc-slider--disabled .mdc-slider__track--inactive{background-color:var(--mat-slider-disabled-inactive-track-color, var(--mat-sys-on-surface));opacity:.24}.mdc-slider__track--inactive::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media(forced-colors: active){.mdc-slider__track--inactive::before{border-color:CanvasText}}.mdc-slider__value-indicator-container{bottom:44px;left:50%;pointer-events:none;position:absolute;transform:var(--mat-slider-value-indicator-container-transform, translateX(-50%) rotate(-45deg))}.mdc-slider__thumb--with-indicator .mdc-slider__value-indicator-container{pointer-events:auto}.mdc-slider__value-indicator{display:flex;align-items:center;transform:scale(0);transform-origin:bottom;transition:transform 100ms cubic-bezier(0.4, 0, 1, 1);word-break:normal;background-color:var(--mat-slider-label-container-color, var(--mat-sys-primary));color:var(--mat-slider-label-label-text-color, var(--mat-sys-on-primary));width:var(--mat-slider-value-indicator-width, 28px);height:var(--mat-slider-value-indicator-height, 28px);padding:var(--mat-slider-value-indicator-padding, 0);opacity:var(--mat-slider-value-indicator-opacity, 1);border-radius:var(--mat-slider-value-indicator-border-radius, 50% 50% 50% 0)}.mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:transform 100ms cubic-bezier(0, 0, 0.2, 1);transform:scale(1)}.mdc-slider__value-indicator::before{border-left:6px solid rgba(0,0,0,0);border-right:6px solid rgba(0,0,0,0);border-top:6px solid;bottom:-5px;content:\\\"\\\";height:0;left:50%;position:absolute;transform:translateX(-50%);width:0;display:var(--mat-slider-value-indicator-caret-display, none);border-top-color:var(--mat-slider-label-container-color, var(--mat-sys-primary))}.mdc-slider__value-indicator::after{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media(forced-colors: active){.mdc-slider__value-indicator::after{border-color:CanvasText}}.mdc-slider__value-indicator-text{text-align:center;width:var(--mat-slider-value-indicator-width, 28px);transform:var(--mat-slider-value-indicator-text-transform, rotate(45deg));font-family:var(--mat-slider-label-label-text-font, var(--mat-sys-label-medium-font));font-size:var(--mat-slider-label-label-text-size, var(--mat-sys-label-medium-size));font-weight:var(--mat-slider-label-label-text-weight, var(--mat-sys-label-medium-weight));line-height:var(--mat-slider-label-label-text-line-height, var(--mat-sys-label-medium-line-height));letter-spacing:var(--mat-slider-label-label-text-tracking, var(--mat-sys-label-medium-tracking))}.mdc-slider__thumb{-webkit-user-select:none;user-select:none;display:flex;left:-24px;outline:none;position:absolute;height:48px;width:48px;pointer-events:none}.mdc-slider--discrete .mdc-slider__thumb{transition:transform 80ms ease}.mdc-slider--disabled .mdc-slider__thumb{pointer-events:none}.mdc-slider__thumb--top{z-index:1}.mdc-slider__thumb-knob{position:absolute;box-sizing:border-box;left:50%;top:50%;transform:translate(-50%, -50%);border-style:solid;width:var(--mat-slider-handle-width, 20px);height:var(--mat-slider-handle-height, 20px);border-width:calc(var(--mat-slider-handle-height, 20px)/2) calc(var(--mat-slider-handle-width, 20px)/2);box-shadow:var(--mat-slider-handle-elevation, var(--mat-sys-level1));background-color:var(--mat-slider-handle-color, var(--mat-sys-primary));border-color:var(--mat-slider-handle-color, var(--mat-sys-primary));border-radius:var(--mat-slider-handle-shape, var(--mat-sys-corner-full))}.mdc-slider__thumb:hover .mdc-slider__thumb-knob{background-color:var(--mat-slider-hover-handle-color, var(--mat-sys-primary));border-color:var(--mat-slider-hover-handle-color, var(--mat-sys-primary))}.mdc-slider__thumb--focused .mdc-slider__thumb-knob{background-color:var(--mat-slider-focus-handle-color, var(--mat-sys-primary));border-color:var(--mat-slider-focus-handle-color, var(--mat-sys-primary))}.mdc-slider--disabled .mdc-slider__thumb-knob{background-color:var(--mat-slider-disabled-handle-color, var(--mat-sys-on-surface));border-color:var(--mat-slider-disabled-handle-color, var(--mat-sys-on-surface))}.mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border:solid 1px #fff;box-sizing:content-box;border-color:var(--mat-slider-with-overlap-handle-outline-color, var(--mat-sys-on-primary));border-width:var(--mat-slider-with-overlap-handle-outline-width, 1px)}.mdc-slider__tick-marks{align-items:center;box-sizing:border-box;display:flex;height:100%;justify-content:space-between;padding:0 1px;position:absolute;width:100%}.mdc-slider__tick-mark--active,.mdc-slider__tick-mark--inactive{width:var(--mat-slider-with-tick-marks-container-size, 2px);height:var(--mat-slider-with-tick-marks-container-size, 2px);border-radius:var(--mat-slider-with-tick-marks-container-shape, var(--mat-sys-corner-full))}.mdc-slider__tick-mark--inactive{opacity:var(--mat-slider-with-tick-marks-inactive-container-opacity, 0.38);background-color:var(--mat-slider-with-tick-marks-inactive-container-color, var(--mat-sys-on-surface-variant))}.mdc-slider--disabled .mdc-slider__tick-mark--inactive{opacity:var(--mat-slider-with-tick-marks-inactive-container-opacity, 0.38);background-color:var(--mat-slider-with-tick-marks-disabled-container-color, var(--mat-sys-on-surface))}.mdc-slider__tick-mark--active{opacity:var(--mat-slider-with-tick-marks-active-container-opacity, 0.38);background-color:var(--mat-slider-with-tick-marks-active-container-color, var(--mat-sys-on-primary))}.mdc-slider__input{cursor:pointer;left:2px;margin:0;height:44px;opacity:0;position:absolute;top:2px;width:44px;box-sizing:content-box}.mdc-slider__input.mat-mdc-slider-input-no-pointer-events{pointer-events:none}.mdc-slider__input.mat-slider__right-input{left:auto;right:0}.mat-mdc-slider{display:inline-block;box-sizing:border-box;outline:none;vertical-align:middle;cursor:pointer;height:48px;margin:0 8px;position:relative;touch-action:pan-y;width:auto;min-width:112px;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-slider.mdc-slider--disabled{cursor:auto;opacity:.38}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__input{cursor:auto}.mat-mdc-slider .mdc-slider__thumb,.mat-mdc-slider .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider.mdc-slider--discrete .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider .mat-ripple .mat-ripple-element{background-color:var(--mat-slider-ripple-color, var(--mat-sys-primary))}.mat-mdc-slider .mat-ripple .mat-mdc-slider-hover-ripple{background-color:var(--mat-slider-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-primary) 5%, transparent))}.mat-mdc-slider .mat-ripple .mat-mdc-slider-focus-ripple,.mat-mdc-slider .mat-ripple .mat-mdc-slider-active-ripple{background-color:var(--mat-slider-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-primary) 20%, transparent))}.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__track--active_fill,.mat-mdc-slider._mat-animation-noopable .mdc-slider__value-indicator{transition:none}.mat-mdc-slider .mat-focus-indicator::before{border-radius:50%}.mdc-slider__thumb--focused .mat-focus-indicator::before{content:\\\"\\\"}\\n\"], dependencies: [{ kind: \"component\", type: MatSliderVisualThumb, selector: \"mat-slider-visual-thumb\", inputs: [\"discrete\", \"thumbPosition\", \"valueIndicatorText\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSlider, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-slider', host: {\n                        'class': 'mat-mdc-slider mdc-slider',\n                        '[class]': '\"mat-\" + (color || \"primary\")',\n                        '[class.mdc-slider--range]': '_isRange',\n                        '[class.mdc-slider--disabled]': 'disabled',\n                        '[class.mdc-slider--discrete]': 'discrete',\n                        '[class.mdc-slider--tick-marks]': 'showTickMarks',\n                        '[class._mat-animation-noopable]': '_noopAnimations',\n                    }, exportAs: 'matSlider', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [{ provide: MAT_SLIDER, useExisting: MatSlider }], imports: [MatSliderVisualThumb], template: \"<!-- Inputs -->\\n<ng-content></ng-content>\\n\\n<!-- Track -->\\n<div class=\\\"mdc-slider__track\\\">\\n  <div class=\\\"mdc-slider__track--inactive\\\"></div>\\n  <div class=\\\"mdc-slider__track--active\\\">\\n    <div #trackActive class=\\\"mdc-slider__track--active_fill\\\"></div>\\n  </div>\\n  @if (showTickMarks) {\\n    <div class=\\\"mdc-slider__tick-marks\\\" #tickMarkContainer>\\n      @if (_cachedWidth) {\\n        @for (tickMark of _tickMarks; track i; let i = $index) {\\n          <div\\n            [class]=\\\"tickMark === 0 ? 'mdc-slider__tick-mark--active' : 'mdc-slider__tick-mark--inactive'\\\"\\n            [style.transform]=\\\"_calcTickMarkTransform(i)\\\"></div>\\n        }\\n      }\\n    </div>\\n  }\\n</div>\\n\\n<!-- Thumbs -->\\n@if (_isRange) {\\n  <mat-slider-visual-thumb\\n    [discrete]=\\\"discrete\\\"\\n    [thumbPosition]=\\\"1\\\"\\n    [valueIndicatorText]=\\\"startValueIndicatorText\\\">\\n  </mat-slider-visual-thumb>\\n}\\n\\n<mat-slider-visual-thumb\\n  [discrete]=\\\"discrete\\\"\\n  [thumbPosition]=\\\"2\\\"\\n  [valueIndicatorText]=\\\"endValueIndicatorText\\\">\\n</mat-slider-visual-thumb>\\n\", styles: [\".mdc-slider__track{position:absolute;top:50%;transform:translateY(-50%);width:100%;pointer-events:none;height:var(--mat-slider-inactive-track-height, 4px)}.mdc-slider__track--active,.mdc-slider__track--inactive{display:flex;height:100%;position:absolute;width:100%}.mdc-slider__track--active{overflow:hidden;border-radius:var(--mat-slider-active-track-shape, var(--mat-sys-corner-full));height:var(--mat-slider-active-track-height, 4px);top:calc((var(--mat-slider-inactive-track-height, 4px) - var(--mat-slider-active-track-height, 4px))/2)}.mdc-slider__track--active_fill{border-top-style:solid;box-sizing:border-box;height:100%;width:100%;position:relative;transform-origin:left;transition:transform 80ms ease;border-color:var(--mat-slider-active-track-color, var(--mat-sys-primary));border-top-width:var(--mat-slider-active-track-height, 4px)}.mdc-slider--disabled .mdc-slider__track--active_fill{border-color:var(--mat-slider-disabled-active-track-color, var(--mat-sys-on-surface))}[dir=rtl] .mdc-slider__track--active_fill{-webkit-transform-origin:right;transform-origin:right}.mdc-slider__track--inactive{left:0;top:0;opacity:.24;background-color:var(--mat-slider-inactive-track-color, var(--mat-sys-surface-variant));height:var(--mat-slider-inactive-track-height, 4px);border-radius:var(--mat-slider-inactive-track-shape, var(--mat-sys-corner-full))}.mdc-slider--disabled .mdc-slider__track--inactive{background-color:var(--mat-slider-disabled-inactive-track-color, var(--mat-sys-on-surface));opacity:.24}.mdc-slider__track--inactive::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media(forced-colors: active){.mdc-slider__track--inactive::before{border-color:CanvasText}}.mdc-slider__value-indicator-container{bottom:44px;left:50%;pointer-events:none;position:absolute;transform:var(--mat-slider-value-indicator-container-transform, translateX(-50%) rotate(-45deg))}.mdc-slider__thumb--with-indicator .mdc-slider__value-indicator-container{pointer-events:auto}.mdc-slider__value-indicator{display:flex;align-items:center;transform:scale(0);transform-origin:bottom;transition:transform 100ms cubic-bezier(0.4, 0, 1, 1);word-break:normal;background-color:var(--mat-slider-label-container-color, var(--mat-sys-primary));color:var(--mat-slider-label-label-text-color, var(--mat-sys-on-primary));width:var(--mat-slider-value-indicator-width, 28px);height:var(--mat-slider-value-indicator-height, 28px);padding:var(--mat-slider-value-indicator-padding, 0);opacity:var(--mat-slider-value-indicator-opacity, 1);border-radius:var(--mat-slider-value-indicator-border-radius, 50% 50% 50% 0)}.mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:transform 100ms cubic-bezier(0, 0, 0.2, 1);transform:scale(1)}.mdc-slider__value-indicator::before{border-left:6px solid rgba(0,0,0,0);border-right:6px solid rgba(0,0,0,0);border-top:6px solid;bottom:-5px;content:\\\"\\\";height:0;left:50%;position:absolute;transform:translateX(-50%);width:0;display:var(--mat-slider-value-indicator-caret-display, none);border-top-color:var(--mat-slider-label-container-color, var(--mat-sys-primary))}.mdc-slider__value-indicator::after{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media(forced-colors: active){.mdc-slider__value-indicator::after{border-color:CanvasText}}.mdc-slider__value-indicator-text{text-align:center;width:var(--mat-slider-value-indicator-width, 28px);transform:var(--mat-slider-value-indicator-text-transform, rotate(45deg));font-family:var(--mat-slider-label-label-text-font, var(--mat-sys-label-medium-font));font-size:var(--mat-slider-label-label-text-size, var(--mat-sys-label-medium-size));font-weight:var(--mat-slider-label-label-text-weight, var(--mat-sys-label-medium-weight));line-height:var(--mat-slider-label-label-text-line-height, var(--mat-sys-label-medium-line-height));letter-spacing:var(--mat-slider-label-label-text-tracking, var(--mat-sys-label-medium-tracking))}.mdc-slider__thumb{-webkit-user-select:none;user-select:none;display:flex;left:-24px;outline:none;position:absolute;height:48px;width:48px;pointer-events:none}.mdc-slider--discrete .mdc-slider__thumb{transition:transform 80ms ease}.mdc-slider--disabled .mdc-slider__thumb{pointer-events:none}.mdc-slider__thumb--top{z-index:1}.mdc-slider__thumb-knob{position:absolute;box-sizing:border-box;left:50%;top:50%;transform:translate(-50%, -50%);border-style:solid;width:var(--mat-slider-handle-width, 20px);height:var(--mat-slider-handle-height, 20px);border-width:calc(var(--mat-slider-handle-height, 20px)/2) calc(var(--mat-slider-handle-width, 20px)/2);box-shadow:var(--mat-slider-handle-elevation, var(--mat-sys-level1));background-color:var(--mat-slider-handle-color, var(--mat-sys-primary));border-color:var(--mat-slider-handle-color, var(--mat-sys-primary));border-radius:var(--mat-slider-handle-shape, var(--mat-sys-corner-full))}.mdc-slider__thumb:hover .mdc-slider__thumb-knob{background-color:var(--mat-slider-hover-handle-color, var(--mat-sys-primary));border-color:var(--mat-slider-hover-handle-color, var(--mat-sys-primary))}.mdc-slider__thumb--focused .mdc-slider__thumb-knob{background-color:var(--mat-slider-focus-handle-color, var(--mat-sys-primary));border-color:var(--mat-slider-focus-handle-color, var(--mat-sys-primary))}.mdc-slider--disabled .mdc-slider__thumb-knob{background-color:var(--mat-slider-disabled-handle-color, var(--mat-sys-on-surface));border-color:var(--mat-slider-disabled-handle-color, var(--mat-sys-on-surface))}.mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border:solid 1px #fff;box-sizing:content-box;border-color:var(--mat-slider-with-overlap-handle-outline-color, var(--mat-sys-on-primary));border-width:var(--mat-slider-with-overlap-handle-outline-width, 1px)}.mdc-slider__tick-marks{align-items:center;box-sizing:border-box;display:flex;height:100%;justify-content:space-between;padding:0 1px;position:absolute;width:100%}.mdc-slider__tick-mark--active,.mdc-slider__tick-mark--inactive{width:var(--mat-slider-with-tick-marks-container-size, 2px);height:var(--mat-slider-with-tick-marks-container-size, 2px);border-radius:var(--mat-slider-with-tick-marks-container-shape, var(--mat-sys-corner-full))}.mdc-slider__tick-mark--inactive{opacity:var(--mat-slider-with-tick-marks-inactive-container-opacity, 0.38);background-color:var(--mat-slider-with-tick-marks-inactive-container-color, var(--mat-sys-on-surface-variant))}.mdc-slider--disabled .mdc-slider__tick-mark--inactive{opacity:var(--mat-slider-with-tick-marks-inactive-container-opacity, 0.38);background-color:var(--mat-slider-with-tick-marks-disabled-container-color, var(--mat-sys-on-surface))}.mdc-slider__tick-mark--active{opacity:var(--mat-slider-with-tick-marks-active-container-opacity, 0.38);background-color:var(--mat-slider-with-tick-marks-active-container-color, var(--mat-sys-on-primary))}.mdc-slider__input{cursor:pointer;left:2px;margin:0;height:44px;opacity:0;position:absolute;top:2px;width:44px;box-sizing:content-box}.mdc-slider__input.mat-mdc-slider-input-no-pointer-events{pointer-events:none}.mdc-slider__input.mat-slider__right-input{left:auto;right:0}.mat-mdc-slider{display:inline-block;box-sizing:border-box;outline:none;vertical-align:middle;cursor:pointer;height:48px;margin:0 8px;position:relative;touch-action:pan-y;width:auto;min-width:112px;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-slider.mdc-slider--disabled{cursor:auto;opacity:.38}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__input{cursor:auto}.mat-mdc-slider .mdc-slider__thumb,.mat-mdc-slider .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider.mdc-slider--discrete .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider .mat-ripple .mat-ripple-element{background-color:var(--mat-slider-ripple-color, var(--mat-sys-primary))}.mat-mdc-slider .mat-ripple .mat-mdc-slider-hover-ripple{background-color:var(--mat-slider-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-primary) 5%, transparent))}.mat-mdc-slider .mat-ripple .mat-mdc-slider-focus-ripple,.mat-mdc-slider .mat-ripple .mat-mdc-slider-active-ripple{background-color:var(--mat-slider-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-primary) 20%, transparent))}.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__track--active_fill,.mat-mdc-slider._mat-animation-noopable .mdc-slider__value-indicator{transition:none}.mat-mdc-slider .mat-focus-indicator::before{border-radius:50%}.mdc-slider__thumb--focused .mat-focus-indicator::before{content:\\\"\\\"}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { _trackActive: [{\n                type: ViewChild,\n                args: ['trackActive']\n            }], _thumbs: [{\n                type: ViewChildren,\n                args: [MAT_SLIDER_VISUAL_THUMB]\n            }], _input: [{\n                type: ContentChild,\n                args: [MAT_SLIDER_THUMB]\n            }], _inputs: [{\n                type: ContentChildren,\n                args: [MAT_SLIDER_RANGE_THUMB, { descendants: false }]\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], discrete: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], showTickMarks: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], min: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], color: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], max: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], step: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], displayWith: [{\n                type: Input\n            }] } });\n/** Ensures that there is not an invalid configuration for the slider thumb inputs. */\nfunction _validateInputs(isRange, endInputElement, startInputElement) {\n    const startValid = !isRange || startInputElement?._hostElement.hasAttribute('matSliderStartThumb');\n    const endValid = endInputElement?._hostElement.hasAttribute(isRange ? 'matSliderEndThumb' : 'matSliderThumb');\n    if (!startValid || !endValid) {\n        _throwInvalidInputConfigurationError();\n    }\n}\nfunction _throwInvalidInputConfigurationError() {\n    throw Error(`Invalid slider thumb input configuration!\n\n   Valid configurations are as follows:\n\n     <mat-slider>\n       <input matSliderThumb>\n     </mat-slider>\n\n     or\n\n     <mat-slider>\n       <input matSliderStartThumb>\n       <input matSliderEndThumb>\n     </mat-slider>\n   `);\n}\n\n/**\n * Provider that allows the slider thumb to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_SLIDER_THUMB_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSliderThumb),\n    multi: true,\n};\n/**\n * Provider that allows the range slider thumb to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_SLIDER_RANGE_THUMB_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSliderRangeThumb),\n    multi: true,\n};\n/**\n * Directive that adds slider-specific behaviors to an input element inside `<mat-slider>`.\n * Up to two may be placed inside of a `<mat-slider>`.\n *\n * If one is used, the selector `matSliderThumb` must be used, and the outcome will be a normal\n * slider. If two are used, the selectors `matSliderStartThumb` and `matSliderEndThumb` must be\n * used, and the outcome will be a range slider with two slider thumbs.\n */\nclass MatSliderThumb {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _cdr = inject(ChangeDetectorRef);\n    _slider = inject(MAT_SLIDER);\n    _platform = inject(Platform);\n    _listenerCleanups;\n    get value() {\n        return numberAttribute(this._hostElement.value, 0);\n    }\n    set value(value) {\n        if (value === null) {\n            value = this._getDefaultValue();\n        }\n        value = isNaN(value) ? 0 : value;\n        const stringValue = value + '';\n        if (!this._hasSetInitialValue) {\n            this._initialValue = stringValue;\n            return;\n        }\n        if (this._isActive) {\n            return;\n        }\n        this._setValue(stringValue);\n    }\n    /**\n     * Handles programmatic value setting. This has been split out to\n     * allow the range thumb to override it and add additional necessary logic.\n     */\n    _setValue(value) {\n        this._hostElement.value = value;\n        this._updateThumbUIByValue();\n        this._slider._onValueChange(this);\n        this._cdr.detectChanges();\n        this._slider._cdr.markForCheck();\n    }\n    /** Event emitted when the `value` is changed. */\n    valueChange = new EventEmitter();\n    /** Event emitted when the slider thumb starts being dragged. */\n    dragStart = new EventEmitter();\n    /** Event emitted when the slider thumb stops being dragged. */\n    dragEnd = new EventEmitter();\n    /**\n     * The current translateX in px of the slider visual thumb.\n     * @docs-private\n     */\n    get translateX() {\n        if (this._slider.min >= this._slider.max) {\n            this._translateX = this._tickMarkOffset;\n            return this._translateX;\n        }\n        if (this._translateX === undefined) {\n            this._translateX = this._calcTranslateXByValue();\n        }\n        return this._translateX;\n    }\n    set translateX(v) {\n        this._translateX = v;\n    }\n    _translateX;\n    /**\n     * Indicates whether this thumb is the start or end thumb.\n     * @docs-private\n     */\n    thumbPosition = _MatThumb.END;\n    /** @docs-private */\n    get min() {\n        return numberAttribute(this._hostElement.min, 0);\n    }\n    set min(v) {\n        this._hostElement.min = v + '';\n        this._cdr.detectChanges();\n    }\n    /** @docs-private */\n    get max() {\n        return numberAttribute(this._hostElement.max, 0);\n    }\n    set max(v) {\n        this._hostElement.max = v + '';\n        this._cdr.detectChanges();\n    }\n    get step() {\n        return numberAttribute(this._hostElement.step, 0);\n    }\n    set step(v) {\n        this._hostElement.step = v + '';\n        this._cdr.detectChanges();\n    }\n    /** @docs-private */\n    get disabled() {\n        return booleanAttribute(this._hostElement.disabled);\n    }\n    set disabled(v) {\n        this._hostElement.disabled = v;\n        this._cdr.detectChanges();\n        if (this._slider.disabled !== this.disabled) {\n            this._slider.disabled = this.disabled;\n        }\n    }\n    /** The percentage of the slider that coincides with the value. */\n    get percentage() {\n        if (this._slider.min >= this._slider.max) {\n            return this._slider._isRtl ? 1 : 0;\n        }\n        return (this.value - this._slider.min) / (this._slider.max - this._slider.min);\n    }\n    /** @docs-private */\n    get fillPercentage() {\n        if (!this._slider._cachedWidth) {\n            return this._slider._isRtl ? 1 : 0;\n        }\n        if (this._translateX === 0) {\n            return 0;\n        }\n        return this.translateX / this._slider._cachedWidth;\n    }\n    /** The host native HTML input element. */\n    _hostElement = this._elementRef.nativeElement;\n    /** The aria-valuetext string representation of the input's value. */\n    _valuetext = signal('', ...(ngDevMode ? [{ debugName: \"_valuetext\" }] : []));\n    /** The radius of a native html slider's knob. */\n    _knobRadius = 8;\n    /** The distance in px from the start of the slider track to the first tick mark. */\n    _tickMarkOffset = 3;\n    /** Whether user's cursor is currently in a mouse down state on the input. */\n    _isActive = false;\n    /** Whether the input is currently focused (either by tab or after clicking). */\n    _isFocused = false;\n    /** Used to relay updates to _isFocused to the slider visual thumbs. */\n    _setIsFocused(v) {\n        this._isFocused = v;\n    }\n    /**\n     * Whether the initial value has been set.\n     * This exists because the initial value cannot be immediately set because the min and max\n     * must first be relayed from the parent MatSlider component, which can only happen later\n     * in the component lifecycle.\n     */\n    _hasSetInitialValue = false;\n    /** The stored initial value. */\n    _initialValue;\n    /** Defined when a user is using a form control to manage slider value & validation. */\n    _formControl;\n    /** Emits when the component is destroyed. */\n    _destroyed = new Subject();\n    /**\n     * Indicates whether UI updates should be skipped.\n     *\n     * This flag is used to avoid flickering\n     * when correcting values on pointer up/down.\n     */\n    _skipUIUpdate = false;\n    /** Callback called when the slider input value changes. */\n    _onChangeFn;\n    /** Callback called when the slider input has been touched. */\n    _onTouchedFn = () => { };\n    /**\n     * Whether the NgModel has been initialized.\n     *\n     * This flag is used to ignore ghost null calls to\n     * writeValue which can break slider initialization.\n     *\n     * See https://github.com/angular/angular/issues/14988.\n     */\n    _isControlInitialized = false;\n    constructor() {\n        const renderer = inject(Renderer2);\n        this._ngZone.runOutsideAngular(() => {\n            this._listenerCleanups = [\n                renderer.listen(this._hostElement, 'pointerdown', this._onPointerDown.bind(this)),\n                renderer.listen(this._hostElement, 'pointermove', this._onPointerMove.bind(this)),\n                renderer.listen(this._hostElement, 'pointerup', this._onPointerUp.bind(this)),\n            ];\n        });\n    }\n    ngOnDestroy() {\n        this._listenerCleanups.forEach(cleanup => cleanup());\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.dragStart.complete();\n        this.dragEnd.complete();\n    }\n    /** @docs-private */\n    initProps() {\n        this._updateWidthInactive();\n        // If this or the parent slider is disabled, just make everything disabled.\n        if (this.disabled !== this._slider.disabled) {\n            // The MatSlider setter for disabled will relay this and disable both inputs.\n            this._slider.disabled = true;\n        }\n        this.step = this._slider.step;\n        this.min = this._slider.min;\n        this.max = this._slider.max;\n        this._initValue();\n    }\n    /** @docs-private */\n    initUI() {\n        this._updateThumbUIByValue();\n    }\n    _initValue() {\n        this._hasSetInitialValue = true;\n        if (this._initialValue === undefined) {\n            this.value = this._getDefaultValue();\n        }\n        else {\n            this._hostElement.value = this._initialValue;\n            this._updateThumbUIByValue();\n            this._slider._onValueChange(this);\n            this._cdr.detectChanges();\n        }\n    }\n    _getDefaultValue() {\n        return this.min;\n    }\n    _onBlur() {\n        this._setIsFocused(false);\n        this._onTouchedFn();\n    }\n    _onFocus() {\n        this._slider._setTransition(false);\n        this._slider._updateTrackUI(this);\n        this._setIsFocused(true);\n    }\n    _onChange() {\n        this.valueChange.emit(this.value);\n        // only used to handle the edge case where user\n        // mousedown on the slider then uses arrow keys.\n        if (this._isActive) {\n            this._updateThumbUIByValue({ withAnimation: true });\n        }\n    }\n    _onInput() {\n        this._onChangeFn?.(this.value);\n        // handles arrowing and updating the value when\n        // a step is defined.\n        if (this._slider.step || !this._isActive) {\n            this._updateThumbUIByValue({ withAnimation: true });\n        }\n        this._slider._onValueChange(this);\n    }\n    _onNgControlValueChange() {\n        // only used to handle when the value change\n        // originates outside of the slider.\n        if (!this._isActive || !this._isFocused) {\n            this._slider._onValueChange(this);\n            this._updateThumbUIByValue();\n        }\n        this._slider.disabled = this._formControl.disabled;\n    }\n    _onPointerDown(event) {\n        if (this.disabled || event.button !== 0) {\n            return;\n        }\n        // On IOS, dragging only works if the pointer down happens on the\n        // slider thumb and the slider does not receive focus from pointer events.\n        if (this._platform.IOS) {\n            const isCursorOnSliderThumb = this._slider._isCursorOnSliderThumb(event, this._slider._getThumb(this.thumbPosition)._hostElement.getBoundingClientRect());\n            this._isActive = isCursorOnSliderThumb;\n            this._updateWidthActive();\n            this._slider._updateDimensions();\n            return;\n        }\n        this._isActive = true;\n        this._setIsFocused(true);\n        this._updateWidthActive();\n        this._slider._updateDimensions();\n        // Does nothing if a step is defined because we\n        // want the value to snap to the values on input.\n        if (!this._slider.step) {\n            this._updateThumbUIByPointerEvent(event, { withAnimation: true });\n        }\n        if (!this.disabled) {\n            this._handleValueCorrection(event);\n            this.dragStart.emit({ source: this, parent: this._slider, value: this.value });\n        }\n    }\n    /**\n     * Corrects the value of the slider on pointer up/down.\n     *\n     * Called on pointer down and up because the value is set based\n     * on the inactive width instead of the active width.\n     */\n    _handleValueCorrection(event) {\n        // Don't update the UI with the current value! The value on pointerdown\n        // and pointerup is calculated in the split second before the input(s)\n        // resize. See _updateWidthInactive() and _updateWidthActive() for more\n        // details.\n        this._skipUIUpdate = true;\n        // Note that this function gets triggered before the actual value of the\n        // slider is updated. This means if we were to set the value here, it\n        // would immediately be overwritten. Using setTimeout ensures the setting\n        // of the value happens after the value has been updated by the\n        // pointerdown event.\n        setTimeout(() => {\n            this._skipUIUpdate = false;\n            this._fixValue(event);\n        }, 0);\n    }\n    /** Corrects the value of the slider based on the pointer event's position. */\n    _fixValue(event) {\n        const xPos = event.clientX - this._slider._cachedLeft;\n        const width = this._slider._cachedWidth;\n        const step = this._slider.step === 0 ? 1 : this._slider.step;\n        const numSteps = Math.floor((this._slider.max - this._slider.min) / step);\n        const percentage = this._slider._isRtl ? 1 - xPos / width : xPos / width;\n        // To ensure the percentage is rounded to the necessary number of decimals.\n        const fixedPercentage = Math.round(percentage * numSteps) / numSteps;\n        const impreciseValue = fixedPercentage * (this._slider.max - this._slider.min) + this._slider.min;\n        const value = Math.round(impreciseValue / step) * step;\n        const prevValue = this.value;\n        if (value === prevValue) {\n            // Because we prevented UI updates, if it turns out that the race\n            // condition didn't happen and the value is already correct, we\n            // have to apply the ui updates now.\n            this._slider._onValueChange(this);\n            this._slider.step > 0\n                ? this._updateThumbUIByValue()\n                : this._updateThumbUIByPointerEvent(event, { withAnimation: this._slider._hasAnimation });\n            return;\n        }\n        this.value = value;\n        this.valueChange.emit(this.value);\n        this._onChangeFn?.(this.value);\n        this._slider._onValueChange(this);\n        this._slider.step > 0\n            ? this._updateThumbUIByValue()\n            : this._updateThumbUIByPointerEvent(event, { withAnimation: this._slider._hasAnimation });\n    }\n    _onPointerMove(event) {\n        // Again, does nothing if a step is defined because\n        // we want the value to snap to the values on input.\n        if (!this._slider.step && this._isActive) {\n            this._updateThumbUIByPointerEvent(event);\n        }\n    }\n    _onPointerUp() {\n        if (this._isActive) {\n            this._isActive = false;\n            if (this._platform.SAFARI) {\n                this._setIsFocused(false);\n            }\n            this.dragEnd.emit({ source: this, parent: this._slider, value: this.value });\n            // This setTimeout is to prevent the pointerup from triggering a value\n            // change on the input based on the inactive width. It's not clear why\n            // but for some reason on IOS this race condition is even more common so\n            // the timeout needs to be increased.\n            setTimeout(() => this._updateWidthInactive(), this._platform.IOS ? 10 : 0);\n        }\n    }\n    _clamp(v) {\n        const min = this._tickMarkOffset;\n        const max = this._slider._cachedWidth - this._tickMarkOffset;\n        return Math.max(Math.min(v, max), min);\n    }\n    _calcTranslateXByValue() {\n        if (this._slider._isRtl) {\n            return ((1 - this.percentage) * (this._slider._cachedWidth - this._tickMarkOffset * 2) +\n                this._tickMarkOffset);\n        }\n        return (this.percentage * (this._slider._cachedWidth - this._tickMarkOffset * 2) +\n            this._tickMarkOffset);\n    }\n    _calcTranslateXByPointerEvent(event) {\n        return event.clientX - this._slider._cachedLeft;\n    }\n    /**\n     * Used to set the slider width to the correct\n     * dimensions while the user is dragging.\n     */\n    _updateWidthActive() { }\n    /**\n     * Sets the slider input to disproportionate dimensions to allow for touch\n     * events to be captured on touch devices.\n     */\n    _updateWidthInactive() {\n        this._hostElement.style.padding = `0 ${this._slider._inputPadding}px`;\n        this._hostElement.style.width = `calc(100% + ${this._slider._inputPadding - this._tickMarkOffset * 2}px)`;\n        this._hostElement.style.left = `-${this._slider._rippleRadius - this._tickMarkOffset}px`;\n    }\n    _updateThumbUIByValue(options) {\n        this.translateX = this._clamp(this._calcTranslateXByValue());\n        this._updateThumbUI(options);\n    }\n    _updateThumbUIByPointerEvent(event, options) {\n        this.translateX = this._clamp(this._calcTranslateXByPointerEvent(event));\n        this._updateThumbUI(options);\n    }\n    _updateThumbUI(options) {\n        this._slider._setTransition(!!options?.withAnimation);\n        this._slider._onTranslateXChange(this);\n    }\n    /**\n     * Sets the input's value.\n     * @param value The new value of the input\n     * @docs-private\n     */\n    writeValue(value) {\n        if (this._isControlInitialized || value !== null) {\n            this.value = value;\n        }\n    }\n    /**\n     * Registers a callback to be invoked when the input's value changes from user input.\n     * @param fn The callback to register\n     * @docs-private\n     */\n    registerOnChange(fn) {\n        this._onChangeFn = fn;\n        this._isControlInitialized = true;\n    }\n    /**\n     * Registers a callback to be invoked when the input is blurred by the user.\n     * @param fn The callback to register\n     * @docs-private\n     */\n    registerOnTouched(fn) {\n        this._onTouchedFn = fn;\n    }\n    /**\n     * Sets the disabled state of the slider.\n     * @param isDisabled The new disabled state\n     * @docs-private\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    focus() {\n        this._hostElement.focus();\n    }\n    blur() {\n        this._hostElement.blur();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSliderThumb, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.2.0-rc.1\", type: MatSliderThumb, isStandalone: true, selector: \"input[matSliderThumb]\", inputs: { value: [\"value\", \"value\", numberAttribute] }, outputs: { valueChange: \"valueChange\", dragStart: \"dragStart\", dragEnd: \"dragEnd\" }, host: { attributes: { \"type\": \"range\" }, listeners: { \"change\": \"_onChange()\", \"input\": \"_onInput()\", \"blur\": \"_onBlur()\", \"focus\": \"_onFocus()\" }, properties: { \"attr.aria-valuetext\": \"_valuetext()\" }, classAttribute: \"mdc-slider__input\" }, providers: [\n            MAT_SLIDER_THUMB_VALUE_ACCESSOR,\n            { provide: MAT_SLIDER_THUMB, useExisting: MatSliderThumb },\n        ], exportAs: [\"matSliderThumb\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSliderThumb, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matSliderThumb]',\n                    exportAs: 'matSliderThumb',\n                    host: {\n                        'class': 'mdc-slider__input',\n                        'type': 'range',\n                        '[attr.aria-valuetext]': '_valuetext()',\n                        '(change)': '_onChange()',\n                        '(input)': '_onInput()',\n                        // TODO(wagnermaciel): Consider using a global event listener instead.\n                        // Reason: I have found a semi-consistent way to mouse up without triggering this event.\n                        '(blur)': '_onBlur()',\n                        '(focus)': '_onFocus()',\n                    },\n                    providers: [\n                        MAT_SLIDER_THUMB_VALUE_ACCESSOR,\n                        { provide: MAT_SLIDER_THUMB, useExisting: MatSliderThumb },\n                    ],\n                }]\n        }], ctorParameters: () => [], propDecorators: { value: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], valueChange: [{\n                type: Output\n            }], dragStart: [{\n                type: Output\n            }], dragEnd: [{\n                type: Output\n            }] } });\nclass MatSliderRangeThumb extends MatSliderThumb {\n    _cdr = inject(ChangeDetectorRef);\n    /** @docs-private */\n    getSibling() {\n        if (!this._sibling) {\n            this._sibling = this._slider._getInput(this._isEndThumb ? _MatThumb.START : _MatThumb.END);\n        }\n        return this._sibling;\n    }\n    _sibling;\n    /**\n     * Returns the minimum translateX position allowed for this slider input's visual thumb.\n     * @docs-private\n     */\n    getMinPos() {\n        const sibling = this.getSibling();\n        if (!this._isLeftThumb && sibling) {\n            return sibling.translateX;\n        }\n        return this._tickMarkOffset;\n    }\n    /**\n     * Returns the maximum translateX position allowed for this slider input's visual thumb.\n     * @docs-private\n     */\n    getMaxPos() {\n        const sibling = this.getSibling();\n        if (this._isLeftThumb && sibling) {\n            return sibling.translateX;\n        }\n        return this._slider._cachedWidth - this._tickMarkOffset;\n    }\n    _setIsLeftThumb() {\n        this._isLeftThumb =\n            (this._isEndThumb && this._slider._isRtl) || (!this._isEndThumb && !this._slider._isRtl);\n    }\n    /** Whether this slider corresponds to the input on the left hand side. */\n    _isLeftThumb;\n    /** Whether this slider corresponds to the input with greater value. */\n    _isEndThumb;\n    constructor() {\n        super();\n        this._isEndThumb = this._hostElement.hasAttribute('matSliderEndThumb');\n        this._setIsLeftThumb();\n        this.thumbPosition = this._isEndThumb ? _MatThumb.END : _MatThumb.START;\n    }\n    _getDefaultValue() {\n        return this._isEndThumb && this._slider._isRange ? this.max : this.min;\n    }\n    _onInput() {\n        super._onInput();\n        this._updateSibling();\n        if (!this._isActive) {\n            this._updateWidthInactive();\n        }\n    }\n    _onNgControlValueChange() {\n        super._onNgControlValueChange();\n        this.getSibling()?._updateMinMax();\n    }\n    _onPointerDown(event) {\n        if (this.disabled || event.button !== 0) {\n            return;\n        }\n        if (this._sibling) {\n            this._sibling._updateWidthActive();\n            this._sibling._hostElement.classList.add('mat-mdc-slider-input-no-pointer-events');\n        }\n        super._onPointerDown(event);\n    }\n    _onPointerUp() {\n        super._onPointerUp();\n        if (this._sibling) {\n            setTimeout(() => {\n                this._sibling._updateWidthInactive();\n                this._sibling._hostElement.classList.remove('mat-mdc-slider-input-no-pointer-events');\n            });\n        }\n    }\n    _onPointerMove(event) {\n        super._onPointerMove(event);\n        if (!this._slider.step && this._isActive) {\n            this._updateSibling();\n        }\n    }\n    _fixValue(event) {\n        super._fixValue(event);\n        this._sibling?._updateMinMax();\n    }\n    _clamp(v) {\n        return Math.max(Math.min(v, this.getMaxPos()), this.getMinPos());\n    }\n    _updateMinMax() {\n        const sibling = this.getSibling();\n        if (!sibling) {\n            return;\n        }\n        if (this._isEndThumb) {\n            this.min = Math.max(this._slider.min, sibling.value);\n            this.max = this._slider.max;\n        }\n        else {\n            this.min = this._slider.min;\n            this.max = Math.min(this._slider.max, sibling.value);\n        }\n    }\n    _updateWidthActive() {\n        const minWidth = this._slider._rippleRadius * 2 - this._slider._inputPadding * 2;\n        const maxWidth = this._slider._cachedWidth + this._slider._inputPadding - minWidth - this._tickMarkOffset * 2;\n        const percentage = this._slider.min < this._slider.max\n            ? (this.max - this.min) / (this._slider.max - this._slider.min)\n            : 1;\n        const width = maxWidth * percentage + minWidth;\n        this._hostElement.style.width = `${width}px`;\n        this._hostElement.style.padding = `0 ${this._slider._inputPadding}px`;\n    }\n    _updateWidthInactive() {\n        const sibling = this.getSibling();\n        if (!sibling) {\n            return;\n        }\n        const maxWidth = this._slider._cachedWidth - this._tickMarkOffset * 2;\n        const midValue = this._isEndThumb\n            ? this.value - (this.value - sibling.value) / 2\n            : this.value + (sibling.value - this.value) / 2;\n        const _percentage = this._isEndThumb\n            ? (this.max - midValue) / (this._slider.max - this._slider.min)\n            : (midValue - this.min) / (this._slider.max - this._slider.min);\n        const percentage = this._slider.min < this._slider.max ? _percentage : 1;\n        // Extend the native input width by the radius of the ripple\n        let ripplePadding = this._slider._rippleRadius;\n        // If one of the inputs is maximally sized (the value of both thumbs is\n        // equal to the min or max), make that input take up all of the width and\n        // make the other unselectable.\n        if (percentage === 1) {\n            ripplePadding = 48;\n        }\n        else if (percentage === 0) {\n            ripplePadding = 0;\n        }\n        const width = maxWidth * percentage + ripplePadding;\n        this._hostElement.style.width = `${width}px`;\n        this._hostElement.style.padding = '0px';\n        if (this._isLeftThumb) {\n            this._hostElement.style.left = `-${this._slider._rippleRadius - this._tickMarkOffset}px`;\n            this._hostElement.style.right = 'auto';\n        }\n        else {\n            this._hostElement.style.left = 'auto';\n            this._hostElement.style.right = `-${this._slider._rippleRadius - this._tickMarkOffset}px`;\n        }\n    }\n    _updateStaticStyles() {\n        this._hostElement.classList.toggle('mat-slider__right-input', !this._isLeftThumb);\n    }\n    _updateSibling() {\n        const sibling = this.getSibling();\n        if (!sibling) {\n            return;\n        }\n        sibling._updateMinMax();\n        if (this._isActive) {\n            sibling._updateWidthActive();\n        }\n        else {\n            sibling._updateWidthInactive();\n        }\n    }\n    /**\n     * Sets the input's value.\n     * @param value The new value of the input\n     * @docs-private\n     */\n    writeValue(value) {\n        if (this._isControlInitialized || value !== null) {\n            this.value = value;\n            this._updateWidthInactive();\n            this._updateSibling();\n        }\n    }\n    _setValue(value) {\n        super._setValue(value);\n        this._updateWidthInactive();\n        this._updateSibling();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSliderRangeThumb, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", type: MatSliderRangeThumb, isStandalone: true, selector: \"input[matSliderStartThumb], input[matSliderEndThumb]\", providers: [\n            MAT_SLIDER_RANGE_THUMB_VALUE_ACCESSOR,\n            { provide: MAT_SLIDER_RANGE_THUMB, useExisting: MatSliderRangeThumb },\n        ], exportAs: [\"matSliderRangeThumb\"], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSliderRangeThumb, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matSliderStartThumb], input[matSliderEndThumb]',\n                    exportAs: 'matSliderRangeThumb',\n                    providers: [\n                        MAT_SLIDER_RANGE_THUMB_VALUE_ACCESSOR,\n                        { provide: MAT_SLIDER_RANGE_THUMB, useExisting: MatSliderRangeThumb },\n                    ],\n                }]\n        }], ctorParameters: () => [] });\n\nclass MatSliderModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSliderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSliderModule, imports: [MatCommonModule,\n            MatRippleModule,\n            MatSlider,\n            MatSliderThumb,\n            MatSliderRangeThumb,\n            MatSliderVisualThumb], exports: [MatSlider, MatSliderThumb, MatSliderRangeThumb] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSliderModule, imports: [MatCommonModule,\n            MatRippleModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-rc.1\", ngImport: i0, type: MatSliderModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        MatRippleModule,\n                        MatSlider,\n                        MatSliderThumb,\n                        MatSliderRangeThumb,\n                        MatSliderVisualThumb,\n                    ],\n                    exports: [MatSlider, MatSliderThumb, MatSliderRangeThumb],\n                }]\n        }] });\n\nexport { MatSlider, MatSliderChange, MatSliderModule, MatSliderRangeThumb, MatSliderThumb, MatSliderVisualThumb };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}