{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { catchError, throwError, tap } from 'rxjs';\nexport const AuthInterceptor = (req, next) => {\n  const router = inject(Router);\n  // NÃO interceptar requisições para endpoints públicos\n  // ⚠️ IMPORTANTE: /usuarios/me NÃO é público - precisa de autenticação\n  // 🔧 FORÇAR DEPLOY NETLIFY - v1.3 - Resolver problema de build travado\n  if (req.url.includes('/public/') || req.url.includes('/usuarios') && !req.url.includes('/usuarios/me')) {\n    console.log('🔓 [AUTH_INTERCEPTOR] Endpoint público detectado, não interceptando:', req.url);\n    return next(req);\n  }\n  // Obter token do localStorage\n  const token = localStorage.getItem('token');\n  // Se há token, adicionar no header Authorization\n  if (token) {\n    req = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('🔐 [AUTH_INTERCEPTOR] Token adicionado ao header para:', req.url);\n  } else {\n    console.log('⚠️ [AUTH_INTERCEPTOR] Nenhum token encontrado para:', req.url);\n  }\n  return next(req).pipe(tap(event => {\n    // Verificar se é uma resposta HTTP e se contém header de sessão revogada\n    if (event && event.headers) {\n      const sessionRevoked = event.headers.get('X-Session-Revoked');\n      if (sessionRevoked === 'true') {\n        console.log('🚫 [AUTH_INTERCEPTOR] Sessão revogada detectada');\n        localStorage.removeItem('token');\n        localStorage.removeItem('nome');\n        localStorage.removeItem('plano');\n        router.navigate(['/login']);\n      }\n    }\n  }), catchError(error => {\n    // NÃO interceptar requisições de login/registro\n    if (req.url.includes('/login') || req.url.includes('/registrar')) {\n      return throwError(() => error);\n    }\n    // Verificar se é erro de usuário não encontrado\n    if (error.status === 500 && error.error?.message) {\n      const errorMessage = error.error.message.toLowerCase();\n      // Detectar erros de usuário não encontrado\n      if (errorMessage.includes('usuario com e-mail') && errorMessage.includes('nao foi encontrado') || errorMessage.includes('usuario não foi encontrado') || errorMessage.includes('user not found')) {\n        console.log('🚨 Usuário não encontrado no banco. Fazendo logout automático...');\n        // Fazer logout automático\n        localStorage.removeItem('token');\n        localStorage.removeItem('nome');\n        localStorage.removeItem('plano');\n        router.navigate(['/login']);\n        // Retornar erro para que o componente possa tratar se necessário\n        return throwError(() => new Error('USUARIO_NAO_ENCONTRADO'));\n      }\n    }\n    // Verificar erros de autenticação (401) ou permissão negada (403)\n    if (error.status === 401 || error.status === 403) {\n      console.log(`🔐 ${error.status === 401 ? 'Token expirado' : 'Acesso negado'}. Fazendo logout automático...`);\n      // Limpar dados locais\n      localStorage.removeItem('token');\n      localStorage.removeItem('nome');\n      localStorage.removeItem('plano');\n      // Redirecionar para login\n      router.navigate(['/login']);\n      // Retornar erro específico\n      const errorMessage = error.status === 401 ? 'TOKEN_EXPIRADO' : 'ACESSO_NEGADO';\n      return throwError(() => new Error(errorMessage));\n    }\n    // Para outros erros, apenas repassar\n    return throwError(() => error);\n  }));\n};","map":{"version":3,"names":["inject","Router","catchError","throwError","tap","AuthInterceptor","req","next","router","url","includes","console","log","token","localStorage","getItem","clone","setHeaders","Authorization","pipe","event","headers","sessionRevoked","get","removeItem","navigate","error","status","message","errorMessage","toLowerCase","Error"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/src/app/interceptors/auth.interceptor.ts"],"sourcesContent":["import { HttpInterceptorFn, HttpErrorResponse } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { catchError, throwError, tap } from 'rxjs';\n\nexport const AuthInterceptor: HttpInterceptorFn = (req, next) => {\n  const router = inject(Router);\n\n  // NÃO interceptar requisições para endpoints públicos\n  // ⚠️ IMPORTANTE: /usuarios/me NÃO é público - precisa de autenticação\n  // 🔧 FORÇAR DEPLOY NETLIFY - v1.3 - Resolver problema de build travado\n  if (req.url.includes('/public/') ||\n    (req.url.includes('/usuarios') && !req.url.includes('/usuarios/me'))) {\n    console.log('🔓 [AUTH_INTERCEPTOR] Endpoint público detectado, não interceptando:', req.url);\n    return next(req);\n  }\n\n  // Obter token do localStorage\n  const token = localStorage.getItem('token');\n\n  // Se há token, adicionar no header Authorization\n  if (token) {\n    req = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('🔐 [AUTH_INTERCEPTOR] Token adicionado ao header para:', req.url);\n  } else {\n    console.log('⚠️ [AUTH_INTERCEPTOR] Nenhum token encontrado para:', req.url);\n  }\n\n  return next(req).pipe(\n    tap((event: any) => {\n      // Verificar se é uma resposta HTTP e se contém header de sessão revogada\n      if (event && event.headers) {\n        const sessionRevoked = event.headers.get('X-Session-Revoked');\n        if (sessionRevoked === 'true') {\n          console.log('🚫 [AUTH_INTERCEPTOR] Sessão revogada detectada');\n          localStorage.removeItem('token');\n          localStorage.removeItem('nome');\n          localStorage.removeItem('plano');\n          router.navigate(['/login']);\n        }\n      }\n    }),\n    catchError((error: HttpErrorResponse) => {\n      // NÃO interceptar requisições de login/registro\n      if (req.url.includes('/login') || req.url.includes('/registrar')) {\n        return throwError(() => error);\n      }\n\n      // Verificar se é erro de usuário não encontrado\n      if (error.status === 500 && error.error?.message) {\n        const errorMessage = error.error.message.toLowerCase();\n\n        // Detectar erros de usuário não encontrado\n        if (errorMessage.includes('usuario com e-mail') &&\n          errorMessage.includes('nao foi encontrado') ||\n          errorMessage.includes('usuario não foi encontrado') ||\n          errorMessage.includes('user not found')) {\n\n          console.log('🚨 Usuário não encontrado no banco. Fazendo logout automático...');\n\n          // Fazer logout automático\n          localStorage.removeItem('token');\n          localStorage.removeItem('nome');\n          localStorage.removeItem('plano');\n          router.navigate(['/login']);\n\n          // Retornar erro para que o componente possa tratar se necessário\n          return throwError(() => new Error('USUARIO_NAO_ENCONTRADO'));\n        }\n      }\n\n      // Verificar erros de autenticação (401) ou permissão negada (403)\n      if (error.status === 401 || error.status === 403) {\n        console.log(`🔐 ${error.status === 401 ? 'Token expirado' : 'Acesso negado'}. Fazendo logout automático...`);\n\n        // Limpar dados locais\n        localStorage.removeItem('token');\n        localStorage.removeItem('nome');\n        localStorage.removeItem('plano');\n\n        // Redirecionar para login\n        router.navigate(['/login']);\n\n        // Retornar erro específico\n        const errorMessage = error.status === 401 ? 'TOKEN_EXPIRADO' : 'ACESSO_NEGADO';\n        return throwError(() => new Error(errorMessage));\n      }\n\n      // Para outros erros, apenas repassar\n      return throwError(() => error);\n    })\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}