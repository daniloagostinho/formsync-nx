{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UsuarioService {\n  http;\n  apiUrl = `${environment.apiUrl}/usuarios`;\n  chaveStorage = 'usuarioLogado';\n  constructor(http) {\n    this.http = http;\n    if (!localStorage.getItem(this.chaveStorage)) {\n      const mock = {\n        nome: 'Usuário Teste',\n        email: 'teste@formsync.com',\n        foto: ''\n      };\n      this.salvarUsuario(mock);\n    }\n  }\n  obterUsuario() {\n    const json = localStorage.getItem(this.chaveStorage);\n    return json ? JSON.parse(json) : {\n      nome: '',\n      email: ''\n    };\n  }\n  salvarUsuario(usuario) {\n    localStorage.setItem(this.chaveStorage, JSON.stringify(usuario));\n  }\n  logout() {\n    localStorage.removeItem(this.chaveStorage);\n  }\n  cadastrar(usuario) {\n    return this.http.post(this.apiUrl, usuario);\n  }\n  obterUsuarioBackend() {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(`${this.apiUrl}/me`, {\n      headers\n    });\n  }\n  atualizarUsuario(usuario) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n    const updateData = {\n      nome: usuario.nome,\n      email: usuario.email\n    };\n    return this.http.put(`${this.apiUrl}/me`, updateData, {\n      headers\n    });\n  }\n  alterarSenha(senhaAtual, novaSenha) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n    const changePasswordData = {\n      senhaAtual: senhaAtual,\n      novaSenha: novaSenha\n    };\n    return this.http.patch(`${this.apiUrl}/me/senha`, changePasswordData, {\n      headers\n    });\n  }\n  // Métodos para funcionalidades LGPD\n  /**\n   * Exclui permanentemente a conta do usuário\n   */\n  excluirConta(dadosExclusao) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n    return this.http.delete(`${this.apiUrl}/me`, {\n      headers,\n      body: dadosExclusao\n    });\n  }\n  /**\n   * Baixa todos os dados pessoais do usuário em formato JSON\n   */\n  baixarDadosPessoais() {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(`${this.apiUrl}/me/dados`, {\n      headers\n    });\n  }\n  /**\n   * Obtém as preferências de consentimento LGPD do usuário\n   */\n  obterConsentimento() {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(`${this.apiUrl}/me/consentimento`, {\n      headers\n    });\n  }\n  /**\n   * Atualiza as preferências de consentimento LGPD do usuário\n   */\n  atualizarConsentimento(consentimento) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n    return this.http.patch(`${this.apiUrl}/me/consentimento`, consentimento, {\n      headers\n    });\n  }\n  static ɵfac = function UsuarioService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || UsuarioService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuarioService,\n    factory: UsuarioService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","HttpHeaders","environment","UsuarioService","http","apiUrl","chaveStorage","constructor","localStorage","getItem","mock","nome","email","foto","salvarUsuario","obterUsuario","json","JSON","parse","usuario","setItem","stringify","logout","removeItem","cadastrar","post","obterUsuarioBackend","token","headers","get","atualizarUsuario","updateData","put","alterarSenha","senhaAtual","novaSenha","changePasswordData","patch","excluirConta","dadosExclusao","delete","body","baixarDadosPessoais","obterConsentimento","atualizarConsentimento","consentimento","i0","ɵɵinject","i1","factory","ɵfac","providedIn"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/src/app/services/usuario.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Usuario } from '../models/usuario.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsuarioService {\n  private apiUrl = `${environment.apiUrl}/usuarios`;\n  private chaveStorage = 'usuarioLogado';\n\n  constructor(private http: HttpClient) {\n    if (!localStorage.getItem(this.chaveStorage)) {\n      const mock: Usuario = {\n        nome: 'Usuário Teste',\n        email: 'teste@formsync.com',\n        foto: ''\n      };\n      this.salvarUsuario(mock);\n    }\n  }\n\n  obterUsuario(): Usuario {\n    const json = localStorage.getItem(this.chaveStorage);\n    return json ? JSON.parse(json) : { nome: '', email: '' };\n  }\n\n  salvarUsuario(usuario: Usuario): void {\n    localStorage.setItem(this.chaveStorage, JSON.stringify(usuario));\n  }\n\n  logout(): void {\n    localStorage.removeItem(this.chaveStorage);\n  }\n\n  cadastrar(usuario: Usuario): Observable<any> {\n    return this.http.post(this.apiUrl, usuario);\n  }\n\n  obterUsuarioBackend(): Observable<Usuario> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get<Usuario>(`${this.apiUrl}/me`, { headers });\n  }\n\n  atualizarUsuario(usuario: Usuario): Observable<Usuario> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n\n    const updateData = {\n      nome: usuario.nome,\n      email: usuario.email\n    };\n\n    return this.http.put<Usuario>(`${this.apiUrl}/me`, updateData, { headers });\n  }\n\n  alterarSenha(senhaAtual: string, novaSenha: string): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n\n    const changePasswordData = {\n      senhaAtual: senhaAtual,\n      novaSenha: novaSenha\n    };\n\n    return this.http.patch(`${this.apiUrl}/me/senha`, changePasswordData, { headers });\n  }\n\n  // Métodos para funcionalidades LGPD\n\n  /**\n   * Exclui permanentemente a conta do usuário\n   */\n  excluirConta(dadosExclusao: any): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n\n    return this.http.delete(`${this.apiUrl}/me`, {\n      headers,\n      body: dadosExclusao\n    });\n  }\n\n  /**\n   * Baixa todos os dados pessoais do usuário em formato JSON\n   */\n  baixarDadosPessoais(): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.get(`${this.apiUrl}/me/dados`, { headers });\n  }\n\n  /**\n   * Obtém as preferências de consentimento LGPD do usuário\n   */\n  obterConsentimento(): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.get(`${this.apiUrl}/me/consentimento`, { headers });\n  }\n\n  /**\n   * Atualiza as preferências de consentimento LGPD do usuário\n   */\n  atualizarConsentimento(consentimento: any): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n\n    return this.http.patch(`${this.apiUrl}/me/consentimento`, consentimento, { headers });\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}