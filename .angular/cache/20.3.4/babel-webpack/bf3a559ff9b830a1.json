{"ast":null,"code":"/**\r\n * Parses a brazilian formatted list into an Array.\r\n * @example\r\n * parseToArray('');\r\n * //=> []\r\n * parseToArray('1');\r\n * //=> ['1']\r\n * parseToArray('1 e 2');\r\n * //=> ['1', '2']\r\n * parseToArray('1, 2, 3, 4 e 5');\r\n * //=> ['1', '2', '3', '4', '5']\r\n * parseToArray('Fernanda, Luana e Ana Carolina');\r\n * //=> ['Fernanda', 'Luana', 'Ana Carolina']\r\n * @param value - A brazilian formatted list.\r\n */\nvar parseToArray = function parseToArray(value) {\n  if (!value.trim()) return [];\n  var items = value.split(' e ');\n  if (items.length === 1) return items;\n  return items[0].split(', ').concat(items[1]);\n};\n\n/**\r\n * Transforms pieces of a date into a Date instance.\r\n * @param pieces - Date pieces.\r\n */\nvar parsePiecesToDate = function parsePiecesToDate(pieces) {\n  return new Date(pieces.year, pieces.month, pieces.date, pieces.hours, pieces.minutes, pieces.seconds);\n};\n\n/**\r\n * Compare pieces of a date to values obtained from a Date instance.\r\n * @param pieces - Pieces of a date (date, month, year, hours, minutes and seconds).\r\n * @param instance - A Date instance.\r\n */\n\nvar comparePiecesToDate = function comparePiecesToDate(pieces, instance) {\n  if (instance === void 0) {\n    instance = parsePiecesToDate(pieces);\n  }\n  return instance.getDate() === pieces.date && instance.getMonth() === pieces.month && instance.getFullYear() === pieces.year && instance.getHours() === pieces.hours && instance.getMinutes() === pieces.minutes && instance.getSeconds() === pieces.seconds;\n};\n\n/**\r\n * Resolve a brazilian formatted date or datetime into date, month, year  pieces and hours, minutes and seconds pieces (if contains time).\r\n * @param value - A date in DD/MM/YYYY or DD/MM/YYYY HH:mm:ss.\r\n */\nvar mapToPieces = function mapToPieces(value) {\n  var expression = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})( (\\d{2}):(\\d{2})(:(\\d{2}))?)?$/;\n  var _a = expression.exec(value),\n    DD = _a[1],\n    MM = _a[2],\n    YYYY = _a[3],\n    HH = _a[5],\n    mm = _a[6],\n    ss = _a[8];\n  return {\n    date: parseInt(DD, 10),\n    year: parseInt(YYYY, 10),\n    month: parseInt(MM, 10) - 1,\n    hours: parseInt(HH !== null && HH !== void 0 ? HH : 0, 10),\n    minutes: parseInt(mm !== null && mm !== void 0 ? mm : 0, 10),\n    seconds: parseInt(ss !== null && ss !== void 0 ? ss : 0, 10)\n  };\n};\n\n/**\r\n * A `RegExp` that matches common brazilian date and, optionally, time formats.\r\n *\r\n * In date and time the seconds are optional too. So the valid formats are:\r\n * \"DD/MM/YYYY\", \"DD/MM/YYYY HH:mm\" and \"DD/MM/YYYY HH:mm:ss\".\r\n */\n\nvar DATE_TIME_PATTERN = /^\\d{2}\\/\\d{2}\\/\\d{4}( \\d{2}:\\d{2}(:\\d{2})?)?$/;\n/**\r\n * Parses a brazilian formatted date into a Date instance.\r\n * @example ```js\r\n * parseToDate('28/03/1996')\r\n * //=> '1996-03-28T03:00:00.000Z'\r\n *\r\n * parseToDate('31/02/2018')\r\n * //=> throws Error('Value \"31/02/2018\" is an invalid date.')\r\n * ```\r\n * @param value - A date in DD/MM/YYYY.\r\n */\n\nvar parseToDate = function parseToDate(value) {\n  if (!DATE_TIME_PATTERN.test(value)) throw new Error(\"Value \\\"\" + value + \"\\\" does not match format.\");\n  var pieces = mapToPieces(value);\n  var instance = parsePiecesToDate(pieces);\n  if (!comparePiecesToDate(pieces, instance)) throw new Error(\"Value \\\"\" + value + \"\\\" is an invalid date.\");\n  return instance;\n};\n\n/**\r\n * Parses brazilian formatted number to number.\r\n * @example\r\n * parseToNumber('10')\r\n * //=> 10\r\n * parseToNumber('-1.299')\r\n * //=> -1299\r\n * parseToNumber('0,981')\r\n * //=> 0.981\r\n * parseToNumber('19.898,1298')\r\n * //=> 19898.1298\r\n * @param value - A brazilian formatted number.\r\n */\nvar parseToNumber = function parseToNumber(value) {\n  return Number(value.replace(/\\./g, '').replace(',', '.'));\n};\n\n/**\r\n * Generate the next digit from a CAEPF number.\r\n * @param numbers - Numbers used to generate checkers.\r\n * @param validators - Validators used to generate checkers.\r\n */\nvar calculateCAEPFDigit = function calculateCAEPFDigit(numbers, validators) {\n  var digit = numbers.reduce(function (digit, value, index) {\n    return digit += Number(value) * Number(validators[index]);\n  }, 0);\n  return digit % 11 % 10;\n};\n\n/**\r\n * Generate CAEPF checksums. Generate simple checksums, add 12 and subtract 100\r\n * if it's more than that. Used to validate document number.\r\n * @param numbers - Numbers used to generate checkers.\r\n * @param validators - Validators used to generate checkers.\r\n */\n\nvar generateCAEPFCheckSums = function generateCAEPFCheckSums(numbers, validators) {\n  var value = numbers.slice();\n  value[12] = calculateCAEPFDigit(value.slice(0, 12), validators.slice(1, 13));\n  value[13] = calculateCAEPFDigit(value.slice(0, 13), validators);\n  var dv = (Number(\"\" + value[12] + value[13]) + 12) % 100;\n  return [Math.floor(dv / 10), dv % 10];\n};\n\n/**\r\n * Check if items are same, if their values are repeated.\r\n * @param item\r\n */\nvar isRepeatedArray = function isRepeatedArray(items) {\n  return items.every(function (item) {\n    return items[0] === item;\n  });\n};\n\n/**\r\n * Matches every non-numeric characters.\r\n */\nvar NonNumeric = /\\D/g;\n/**\r\n * Maps to a text containing only numeric characters.\r\n * @param value - A text containing numbers.\r\n */\n\nvar mapToNumeric = function mapToNumeric(value) {\n  return value.replace(NonNumeric, '');\n};\n\n/**\r\n * Maps a text to a collection of it's numbers.\r\n * @param value - A text containing numbers.\r\n */\n\nvar mapToNumbers = function mapToNumbers(value) {\n  return mapToNumeric(value).split('').map(Number);\n};\n\n/**\r\n * Pattern to match formatted CAEPF (999.999.999/999-99) or 14 numbers.\r\n */\n\nvar CAEPF_PATTERN = /^(\\d{14}|\\d{3}\\.\\d{3}\\.\\d{3}\\/\\d{3}\\-\\d{2})$/;\n/**\r\n * Check if value is a valid CAEPF.\r\n * @example ```js\r\n * isCAEPF('41142260000101')\r\n * //=> true\r\n *\r\n * isCAEPF('411.422.600/001-01')\r\n * //=> true\r\n *\r\n * isCAEPF('111.111.111/111-11')\r\n * //=> false\r\n *\r\n * isCAEPF('411407182')\r\n * //=> false\r\n *\r\n * ```\r\n * @param value - A text containing a CAEPF.\r\n */\n\nvar isCAEPF = function isCAEPF(value) {\n  if (!CAEPF_PATTERN.test(value)) return false;\n  var numbers = mapToNumbers(value);\n  if (isRepeatedArray(numbers)) return false;\n  var validators = [5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9];\n  var checkers = generateCAEPFCheckSums(numbers, validators);\n  return numbers[12] === checkers[0] && numbers[13] === checkers[1];\n};\n\n/**\r\n * Pattern to match formatted CEP (99999-999) or 8 numbers.\r\n */\nvar CEP_PATTERN = /^(\\d{8}|\\d{2}\\.?\\d{3}\\-\\d{3})$/;\n/**\r\n * Check if value is a valid CEP.\r\n * @example ```js\r\n * isCEP('50.833-000')\r\n * //=> true\r\n *\r\n * isCEP('02998-050')\r\n * //=> true\r\n *\r\n * isCEP('00000000')\r\n * //=> true\r\n *\r\n * isCEP('0')\r\n * //=> false\r\n *\r\n * isCEP('1982891928981982198')\r\n * //=> false\r\n * ```\r\n * @param value - A text containing a CEP.\r\n */\n\nvar isCEP = function isCEP(value) {\n  return CEP_PATTERN.test(value);\n};\n\n/**\r\n * Generate check sums. Multiply numbers to validators and sum them to generate\r\n * check sums, they're used to check if numbers are valid.\r\n * @param numbers - Numbers used to generate checkers.\r\n * @param validators - Validators used to generate checkers.\r\n */\nvar generateCheckSums = function generateCheckSums(numbers, validators) {\n  var initialCheckSums = [0, 0];\n  return validators.reduce(function (_a, validator, index) {\n    var checkerA = _a[0],\n      checkerB = _a[1];\n    return [index === 0 ? 0 : checkerA + numbers[index - 1] * validator, checkerB + numbers[index] * validator];\n  }, initialCheckSums);\n};\n\n/**\r\n * Get remaining of 11 or `0` if lower than 2.\r\n * @param value - Value used remaining.\r\n */\nvar getRemaining = function getRemaining(value) {\n  return value % 11 < 2 ? 0 : 11 - value % 11;\n};\n\n/**\r\n * Pattern to match formatted CNPJ (99.999.999/9999-99) or 14 numbers.\r\n */\n\nvar CNPJ_PATTERN = /^(\\d{14}|\\d{2}\\.\\d{3}\\.\\d{3}\\/\\d{4}\\-\\d{2})$/;\n/**\r\n * Check if value is a valid CNPJ.\r\n * @example ```js\r\n * isCNPJ('41142260000189')\r\n * //=> true\r\n *\r\n * isCNPJ('45.723.174/0001-10')\r\n * //=> true\r\n *\r\n * isCNPJ('411407182')\r\n * //=> false\r\n *\r\n * isCNPJ('11.111.111/1111-11')\r\n * //=> false\r\n * ```\r\n * @param value - A text containing a CNPJ.\r\n */\n\nvar isCNPJ = function isCNPJ(value) {\n  if (!CNPJ_PATTERN.test(value)) return false;\n  var numbers = mapToNumbers(value);\n  if (isRepeatedArray(numbers)) return false;\n  var validators = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n  var checkers = generateCheckSums(numbers, validators);\n  return numbers[12] === getRemaining(checkers[0]) && numbers[13] === getRemaining(checkers[1]);\n};\n\n/**\r\n * Pattern to match formatted CPF (999.999.999-99) or 11 numbers.\r\n */\n\nvar CPF_PATTERN = /^(\\d{11}|\\d{3}\\.\\d{3}\\.\\d{3}\\-\\d{2})$/;\n/**\r\n * Check if value is a valid CPF.\r\n * @example ```js\r\n * isCPF('366.418.768-70')\r\n * //=> true\r\n *\r\n * isCPF('36641876870')\r\n * //=> true\r\n *\r\n * isCPF('213.198.013-20')\r\n * //=> false\r\n *\r\n * isCPF('2131201872781')\r\n * //=> false\r\n *\r\n * isCPF('11111111111')\r\n * //=> false\r\n * ```\r\n * @param value - A text containing a CPF.\r\n */\n\nvar isCPF = function isCPF(value) {\n  if (!CPF_PATTERN.test(value)) return false;\n  var numbers = mapToNumbers(value);\n  if (isRepeatedArray(numbers)) return false;\n  var validators = [11, 10, 9, 8, 7, 6, 5, 4, 3, 2];\n  var checkers = generateCheckSums(numbers, validators);\n  return numbers[9] === getRemaining(checkers[0]) && numbers[10] === getRemaining(checkers[1]);\n};\n\n/**\r\n * Pattern to match brazilian formatted dates (99/99/9999).\r\n */\n\nvar DATE_PATTERN = /^\\d{2}\\/\\d{2}\\/\\d{4}((\\s)?(\\d{2}:\\d{2}:\\d{2}))?$/;\n/**\r\n * Check if a brazilian formatted date is valid.\r\n * @example ```js\r\n * isDate('03/08/2017')\r\n * //=> true\r\n *\r\n * isDate('28/13/2017')\r\n * //=> false\r\n *\r\n * isDate('03-08-2017')\r\n * //=> false\r\n *\r\n * isDate('31/03/18')\r\n * //=> false\r\n * ```\r\n * @param value - A date in DD/MM/YYYY.\r\n */\n\nvar isDate = function isDate(value) {\n  return DATE_PATTERN.test(value) && comparePiecesToDate(mapToPieces(value));\n};\n\n/**\r\n * Brazilian valid DDD (direct dialing at a distance) codes.\r\n */\nvar DDDs = [\"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"21\", \"22\", \"24\", \"27\", \"28\", \"31\", \"32\", \"33\", \"34\", \"35\", \"37\", \"38\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"51\", \"53\", \"54\", \"55\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"71\", \"73\", \"74\", \"75\", \"77\", \"79\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"];\n/**\r\n * Check if value is a valid DDD.\r\n * @example ```js\r\n * isDDD('81')\r\n * //=> true\r\n *\r\n * isDDD('10')\r\n * //=> false\r\n *\r\n * isDDD('A#')\r\n * //=> false\r\n * ```\r\n * @param code\r\n */\n\nvar isDDD = function isDDD(code) {\n  return DDDs.indexOf(code) !== -1;\n};\n\n/**\r\n * Pattern for common brazilian telephone number formats, optionally with DDI,\r\n * DDD and the ninth digit.\r\n */\n\nvar PHONE_PATTERN = /^(\\+55)? ?\\(?(\\d{2})?\\)? ?9?\\d{4}[-| ]?\\d{4}$/;\n/**\r\n * Check if value is a valid brazilian phone number. It can check a wide\r\n * variety of formats optionally with DDI, DDD and the ninth digit.\r\n *\r\n * @example ```js\r\n * isPhone('+55 (11) 98273-1182')\r\n * //=> true\r\n *\r\n * isPhone('11 98273 1182')\r\n * //=> true\r\n *\r\n * isPhone('1139723768')\r\n * //=> true\r\n *\r\n * isPhone('(23) 3972-3768')\r\n * //=> false\r\n *\r\n * isPhone('(13) 65093-2093')\r\n * //=> false\r\n *\r\n * isPhone('(81) 555 178')\r\n * //=> false\r\n * ```\r\n * @param value\r\n */\n\nvar isPhone = function isPhone(value) {\n  if (!PHONE_PATTERN.test(value)) return false;\n  var _a = PHONE_PATTERN.exec(value),\n    DDD = _a[2];\n  return DDD ? isDDD(DDD) : true;\n};\nvar PATTERNS = [CPF_PATTERN, CNPJ_PATTERN];\n/**\r\n * Check if a value is a valid CPF or CNPJ\r\n * @example ```js\r\n * isCPFOrCNPJ('366.418.768-70')\r\n * //=> true\r\n *\r\n * isCPFOrCNPJ('36641876870')\r\n * //=> true\r\n *\r\n * isCPFOrCNPJ('213.198.013-20')\r\n * //=> false\r\n *\r\n * isCPFOrCNPJ('2131201872781')\r\n * //=> false\r\n *\r\n * isCPFOrCNPJ('11111111111')\r\n * //=> false\r\n *\r\n * isCPFOrCNPJ('41142260000189')\r\n * //=> true\r\n *\r\n * isCPFOrCNPJ('45.723.174/0001-10')\r\n * //=> true\r\n *\r\n * isCPFOrCNPJ('411407182')\r\n * //=> false\r\n *\r\n * isCPFOrCNPJ('11.111.111/1111-11')\r\n * //=> false\r\n * ```\r\n * @param value - A text containing a CPF or CNPJ\r\n */\n\nvar isCPFOrCNPJ = function isCPFOrCNPJ(value) {\n  var matches = PATTERNS.map(function (pattern) {\n    return pattern.test(value);\n  });\n  if (!matches.includes(true)) return false;\n  return matches[0] ? isCPF(value) : isCNPJ(value);\n};\n\n/**\r\n * Add periods to a numeric string value.\r\n * @param value - A numeric string value.\r\n */\nvar addPeriods = function addPeriods(value) {\n  return value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1.');\n};\n\n/**\r\n * Formats a number into money (BRL) format.\r\n * @example ```js\r\n * formatToBRL(1928.93)\r\n * //=> 'R$ 1.928,93'\r\n *\r\n * formatToBRL('9211928.18203')\r\n * //=> 'R$ 9.211.928,18'\r\n *\r\n * formatToBRL(-18.49)\r\n * //=> 'R$ -18,49'\r\n * ```\r\n * @param value BRL value.\r\n */\n\nvar formatToBRL = function formatToBRL(value) {\n  var number = Number(value).toFixed(2).replace('.', ',');\n  return 'R$ ' + addPeriods(number);\n};\n\n/**\r\n * Formats step-by-step a `string` value into a CAEPF.\r\n * @example ```js\r\n * formatToCAEPF('1234567')\r\n * //=> '123.456.7'\r\n *\r\n * formatToCAEPF('12345678900199')\r\n * //=> '123.456.789/001-99'\r\n *\r\n * formatToCAEPF('00.000.0.0--0-0000.00')\r\n * //=> '000.000.000/000-00'\r\n *\r\n * formatToCAEPF('123.456.789/001-99')\r\n * //=> '123.456.789/001-99'\r\n * ```\r\n * @param value - A `string` value of a CAEPF.\r\n */\n\nvar formatToCAEPF = function formatToCAEPF(value) {\n  return mapToNumeric(value).replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1/$2').replace(/(\\d{3})(\\d{1,2})$/, '$1-$2');\n};\n\n/**\r\n * Format a `string` number sequence into CEP format.\r\n * @example ```js\r\n * formatToCEP('15998030')\r\n * //=> '15998-030'\r\n *\r\n * formatToCEP('02999')\r\n * //=> '02999'\r\n * ```\r\n * @param value A `string` with CEP numbers.\r\n */\n\nvar formatToCEP = function formatToCEP(value) {\n  return mapToNumeric(value).replace(/(\\d{5})(\\d{1,3})/, '$1-$2');\n};\n\n/**\r\n * Formats step-by-step a `string` value into a CNPJ.\r\n * @example ```js\r\n * formatToCNPJ('128781')\r\n * //=> '12.878.1'\r\n *\r\n * formatToCNPJ('32284981000138')\r\n * //=> '32.284.981/0001-38'\r\n *\r\n * formatToCNPJ('00.0.000.00.00--00-00')\r\n * //=> '00.000.000/0000-00'\r\n * ```\r\n * @param value - A `string` value of a CNPJ.\r\n */\n\nvar formatToCNPJ = function formatToCNPJ(value) {\n  return mapToNumeric(value).replace(/(\\d{2})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1/$2').replace(/(\\d{4})(\\d{1,2})$/, '$1-$2');\n};\n\n/**\r\n * Formats step-by-step a `string` value into a CPF.\r\n * @example ```js\r\n * formatToCPF('00000000')\r\n * //=> '000.000.00'\r\n *\r\n * formatToCPF('00000000000')\r\n * //=> '000.000.000-00'\r\n *\r\n * formatToCPF('366.418.768-70')\r\n * //=> '366.418.768-70'\r\n * ```\r\n * @param value - A `string` value of a CPF.\r\n */\n\nvar formatToCPF = function formatToCPF(value) {\n  return mapToNumeric(value).replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d{1,2})$/, '$1-$2');\n};\n\n/**\r\n * Check if a `string` value can be formatted to CPF.\r\n * @param value - A `string` value of a CPF or CNPJ.\r\n */\n\nvar canFormatToCPF = function canFormatToCPF(value) {\n  var _a, _b;\n  return ((_b = (_a = value.match(/\\d/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) <= 11;\n};\n/**\r\n * Formats step-by-step a `string` value to CPF or CNPJ depending on its length.\r\n * @example\r\n * formatToCPFOrCNPJ('00000000')\r\n * //=> '000.000.00'\r\n *\r\n * formatToCPFOrCNPJ('366.418.768-70')\r\n * //=> '366.418.768-70'\r\n *\r\n * formatToCPFOrCNPJ('32284981000138')\r\n * //=> '32.284.981/0001-38'\r\n *\r\n * formatToCPFOrCNPJ('00.0.000.00.00--00-00')\r\n * //=> '00.000.000/0000-00'\r\n * @param value - A `string` value of a CPF or CNPJ.\r\n */\n\nvar formatToCPFOrCNPJ = function formatToCPFOrCNPJ(value) {\n  return canFormatToCPF(value) ? formatToCPF(value) : formatToCNPJ(value);\n};\n\n/**\r\n * Capitalizes a word.\r\n * @param word - A `string` (word) to be capitalized.\r\n */\nvar capitalizeWord = function capitalizeWord(word) {\n  return word.charAt(0).toLocaleUpperCase() + word.substr(1).toLocaleLowerCase();\n};\n\n/**\r\n * Normalize white spaces in a `string` (value).\r\n * @param value - A `string` to be normalized.\r\n */\nvar normalizeWhiteSpaces = function normalizeWhiteSpaces(value) {\n  return value.trim().replace(/\\s+/g, ' ');\n};\n\n/**\r\n * Splits text into words.\r\n * @param text - A `string` to be splitted into words.\r\n */\nvar splitIntoWords = function splitIntoWords(text) {\n  return text ? text.split(/\\s+/) : [];\n};\n\n/**\r\n * A list of default words to keep upper case.\r\n */\n\nvar DEFAULT_WORDS_TO_KEEP_UPPER_CASE = ['cnpj', 'cpf', 'ltda', 'qp', 'tv'];\n/**\r\n * A list of default words to keep lower case.\r\n */\n\nvar DEFAULT_WORDS_TO_KEEP_LOWER_CASE = ['a', 'com', 'da', 'das', 'de', 'do', 'dos', 'e', 'em', 'i', 'na', 'nas', 'no', 'nos', 'o', 'por', 'sem', 'u'];\n/**\r\n * Capitaliza as palavras de um texto, com exceção das palavras configuradas\r\n * para serem deixadas em caixa-alta ou em caixa-baixa (menos a primeira palavra\r\n * que não será caixa-baixa mesmo se configurada como).\r\n *\r\n * @example ```js\r\n * formatToCapitalized('SERVIDOR PÚBLICO MUNICIPAL')\r\n * //=> 'Servidor Público Municipal'\r\n *\r\n * formatToCapitalized('   os PrimEIROS  HOMens da tERra', {\r\n *   wordsToKeepLowerCase: ['os', 'da']\r\n * })\r\n * //=> 'Os Primeiros Homens da Terra'\r\n *\r\n * formatToCapitalized('nova tv foi lançada', {\r\n *   wordsToKeepUpperCase: ['tv']\r\n * })\r\n * //=> 'Nova TV Foi Lançada'\r\n *\r\n * formatToCapitalized(' com espaços antes e depois ', {\r\n *   trimTrailingWhiteSpaces: false\r\n * })\r\n * //=> ' Com Espaços Antes e Depois '\r\n * ```\r\n * @param value - A `string` to capitalize\r\n */\n\nvar formatToCapitalized = function formatToCapitalized(value, _a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.wordsToKeepLowerCase,\n    wordsToKeepLowerCase = _c === void 0 ? DEFAULT_WORDS_TO_KEEP_LOWER_CASE : _c,\n    _d = _b.wordsToKeepUpperCase,\n    wordsToKeepUpperCase = _d === void 0 ? DEFAULT_WORDS_TO_KEEP_UPPER_CASE : _d,\n    _e = _b.trimTrailingWhiteSpaces,\n    trimTrailingWhiteSpaces = _e === void 0 ? true : _e;\n  return splitIntoWords(trimTrailingWhiteSpaces ? normalizeWhiteSpaces(value) : value).map(function (word, index, words) {\n    var isFirstWord = word && index === 0 || !words[0] && index === 1;\n    var wordInLowerCase = word.toLocaleLowerCase();\n    if (!isFirstWord && wordsToKeepLowerCase.indexOf(wordInLowerCase) !== -1) return wordInLowerCase;\n    if (wordsToKeepUpperCase.indexOf(wordInLowerCase) !== -1) return word.toLocaleUpperCase();\n    return capitalizeWord(word);\n  }).join(\" \");\n};\n\n/**\r\n * Fills a number with zeros.\r\n * @param value - A number value.\r\n * @param length - Number of characters to be filled with zeros.\r\n */\nvar fillWithZeros = function fillWithZeros(value, length) {\n  var numbers = value.toString(10);\n  while (numbers.length < length) {\n    numbers = '0' + numbers;\n  }\n  return numbers;\n};\n\n/**\r\n * Formats a Date instance to brazilian format, DD/MM/YYYY.\r\n * @example ```js\r\n * formatToDate(new Date(2002, 7, 21))\r\n * //=> '21/08/2002'\r\n *\r\n * formatToDate(new Date())\r\n * //=> '08/09/2018'\r\n * ```\r\n * @param value - A Date instance.\r\n */\n\nvar formatToDate = function formatToDate(value) {\n  return fillWithZeros(value.getDate(), 2) + '/' + fillWithZeros(value.getMonth() + 1, 2) + '/' + fillWithZeros(value.getFullYear(), 4);\n};\n\n/**\r\n * Formats a Date instance to brazilian format of date and time, DD/MM/YYYY HH:mm.\r\n * @example ```js\r\n * formatToDateTime(new Date(2002, 7, 21, 18, 30))\r\n * //=> '21/08/2002 18:30'\r\n * ```\r\n * @param value - A Date instance.\r\n */\n\nvar formatToDateTime = function formatToDateTime(value) {\n  return formatToDate(value) + ' ' + fillWithZeros(value.getHours(), 2) + ':' + fillWithZeros(value.getMinutes(), 2);\n};\n\n/**\r\n * Formats a phone value into brazilian common phone formats.\r\n * @example ```js\r\n * formatToGenericPhone('23456789')\r\n * //=> '2345-6789'\r\n *\r\n * formatToGenericPhone('923456789')\r\n * //=> '92345-6789'\r\n *\r\n * formatToGenericPhone('21923456789')\r\n * //=> '(21) 92345-6789'\r\n *\r\n * formatToGenericPhone('021923456789')\r\n * //=> '021 92345-6789'\r\n *\r\n * formatToGenericPhone('5521923456789')\r\n * //=> '+55 21 92345-6789'\r\n * ```\r\n * @param value\r\n * @param countryCodeLength\r\n */\n\nvar formatToGenericPhone = function formatToGenericPhone(value,\n/*\r\n  Brazil country code: +55\r\n*/\ncountryCodeLength) {\n  if (countryCodeLength === void 0) {\n    countryCodeLength = 2;\n  }\n  var phone = mapToNumeric(value);\n  if (phone.length === 8) {\n    return phone.replace(/(^\\d{4})(\\d{4}$)/gi, \"$1-$2\");\n  }\n  if (phone.length === 9) {\n    return phone.replace(/(^\\d{5})(\\d{4}$)/gi, \"$1-$2\");\n  }\n  if (phone.length === 10) {\n    return phone.replace(/(^\\d{2})(\\d{4})(\\d{4}$)/gi, \"($1) $2-$3\");\n  }\n  if (phone.length === 11) {\n    return phone.replace(/(^\\d{2})(\\d{4,5})(\\d{4}$)/gi, \"($1) $2-$3\");\n  }\n  if (phone.length === 12) {\n    return phone.replace(/(^\\d{3})(\\d{5})(\\d{4}$)/gi, \"$1 $2-$3\");\n  }\n  var re = new RegExp(\"([0-9]{\" + countryCodeLength + \"})([0-9][0-9])([0-9]{5})([0-9]{4})\", \"gi\");\n  return phone.replace(re, \"+$1 $2 $3-$4\");\n};\nvar normalizeRange = function normalizeRange(range, limit) {\n  if (Array.isArray(range)) return range;\n  if (range >= 0) return [0, range];\n  return [limit + 1 - Math.abs(range), limit];\n};\nvar within = function within(range, value) {\n  return value >= range[0] && value <= range[1];\n};\n\n/** A {@link RegExp} that matches numbers between `0-9`. */\nvar DIGIT = /^\\d$/;\n/**\r\n * Parses the received `string` value to a tree of characters.\r\n * @param value\r\n */\n\nvar parseToCharacters = function parseToCharacters(value) {\n  var digits = 0;\n  var children = value.split('').map(function (character) {\n    if (DIGIT.test(character)) return {\n      character: character,\n      kind: 'digit',\n      digit: ++digits\n    };\n    return {\n      character: character,\n      kind: 'other'\n    };\n  });\n  return {\n    digits: digits,\n    children: children,\n    kind: 'root'\n  };\n};\n\n/**\r\n * Formats a `string` value with digits by replacing the digits within the\r\n * range using the hider character as replacement.\r\n *\r\n * @example ```js\r\n * formatToHiddenDigits('00.000-000')\r\n * //=> '**.*00-000'\r\n *\r\n * formatToHiddenDigits('03/04/2002', { hider: '-' })\r\n * //=> '--/-4/2002'\r\n *\r\n * formatToHiddenDigits('111.111.111-11', { range: [4, 9] })\r\n * //=> '111.***.***-11'\r\n *\r\n * formatToHiddenDigits('12.345.678-9', { hider: '#', range: 5 })\r\n * //=> '##.###.678-9'\r\n *\r\n * formatToHiddenDigits('52.715.348/0001-69', { hider: '@', range: -9 })\r\n * //=> '52.715.@@@/@@@@-@@'\r\n * ```\r\n *\r\n * @param value - A `string` with digits, with or without a mask.\r\n * @param options - The options object.\r\n */\n\nvar formatToHiddenDigits = function formatToHiddenDigits(value, options) {\n  var _a;\n  if (options === void 0) {\n    options = {};\n  }\n  var characters = parseToCharacters(value);\n  var range = normalizeRange((_a = options.range) !== null && _a !== void 0 ? _a : 3, characters.digits);\n  return characters.children.map(function (node) {\n    var _a;\n    if (node.kind === \"digit\" && within(range, node.digit)) return (_a = options.hider) !== null && _a !== void 0 ? _a : \"*\";\n    return node.character;\n  }).join(\"\");\n};\n\n/**\r\n * Split `Array` elements into every but last and last element.\r\n * @param value - An Array with at least one item.\r\n */\nvar splitOnLast = function splitOnLast(value) {\n  return [value.slice(0, value.length - 1), value[value.length - 1]];\n};\n\n/**\r\n * Formats an Array into brazilian formatted list.\r\n * @example\r\n * formatToList(['Vitor', 'William', 'Fernando'])\r\n * //=> 'Vitor, William e Fernando'\r\n *\r\n * formatToList([])\r\n * // => ''\r\n *\r\n * formatToList(['1', '2'])\r\n * // => '1 e 2'\r\n *\r\n * formatToList(['Direito Civil'])\r\n * //=> 'Direito Civil'\r\n * @param value - An array of string values.\r\n */\n\nvar formatToList = function formatToList(value) {\n  if (value.length === 0) return '';\n  if (value.length === 1) return value[0];\n  var _a = splitOnLast(value),\n    everyButLast = _a[0],\n    last = _a[1];\n  return everyButLast.join(', ') + ' e ' + last;\n};\n\n/**\r\n * Formats a number to brazilian formatted number.\r\n * @example\r\n * formatToNumber(0)\r\n * //=> '0'\r\n * formatToNumber(-1299)\r\n * //=> '-1.299'\r\n * formatToNumber(.981)\r\n * //=> '0,981'\r\n * formatToNumber('19898.1298')\r\n * //=> '19.898,1298'\r\n * @param value - Number value to be formatted.\r\n */\n\nvar formatToNumber = function formatToNumber(value) {\n  var _a = Number(value).toString(10).split('.'),\n    number = _a[0],\n    trunc = _a[1];\n  if (!trunc) return addPeriods(number);\n  return addPeriods(number) + ',' + trunc;\n};\n\n/**\r\n * Formats a phone value into brazilian common phone formats.\r\n * @example ```js\r\n * formatToPhone('11')\r\n * //=> '(11'\r\n *\r\n * formatToPhone('11971626')\r\n * //=> '(11) 9716-26'\r\n *\r\n * formatToPhone('11971626799')\r\n * //=> '(11) 97162-6799'\r\n * ```\r\n * @param value\r\n */\n\nvar formatToPhone = function formatToPhone(value) {\n  return mapToNumeric(value).replace(/(\\d{1,2})/, '($1').replace(/(\\(\\d{2})(\\d{1,4})/, '$1) $2').replace(/( \\d{4})(\\d{1,4})/, '$1-$2').replace(/( \\d{4})(?:-)(\\d{1})(\\d{4})/, '$1$2-$3');\n};\n\n/**\r\n * Progressively formats a `string` into a RG.\r\n * @example ```js\r\n * formatToRG('00000000A', 'SP')\r\n * //=> '00.000.000-A'\r\n *\r\n * formatToRG('00.00.0000-0', 'RJ')\r\n * //=> '00.000.000-0'\r\n *\r\n * formatToRG('MG-14.808.688', 'MG')\r\n * //=> 'MG-14.808.688'\r\n * ```\r\n * @param value - A `string` representing an RG.\r\n * @param state - Brazilian state which defines RG format.\r\n */\nvar formatToRG = function formatToRG(value, state) {\n  return state !== 'RJ' && state !== 'SP' ? value : value.toUpperCase().replace(/[^\\d|A|B|X]/g, '').replace(/(\\d{2})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})([\\d|A|B|X]{1})$/, '$1-$2');\n};\nexport { formatToBRL, formatToCAEPF, formatToCEP, formatToCNPJ, formatToCPF, formatToCPFOrCNPJ, formatToCapitalized, formatToDate, formatToDateTime, formatToGenericPhone, formatToHiddenDigits, formatToList, formatToNumber, formatToPhone, formatToRG, isCAEPF, isCEP, isCNPJ, isCPF, isCPFOrCNPJ, isDDD, isDate, isPhone, parseToArray, parseToDate, parseToNumber };","map":{"version":3,"names":["parseToArray","value","trim","items","split","length","concat","parsePiecesToDate","pieces","Date","year","month","date","hours","minutes","seconds","comparePiecesToDate","instance","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","mapToPieces","expression","_a","exec","DD","MM","YYYY","HH","mm","ss","parseInt","DATE_TIME_PATTERN","parseToDate","test","Error","parseToNumber","Number","replace","calculateCAEPFDigit","numbers","validators","digit","reduce","index","generateCAEPFCheckSums","slice","dv","Math","floor","isRepeatedArray","every","item","NonNumeric","mapToNumeric","mapToNumbers","map","CAEPF_PATTERN","isCAEPF","checkers","CEP_PATTERN","isCEP","generateCheckSums","initialCheckSums","validator","checkerA","checkerB","getRemaining","CNPJ_PATTERN","isCNPJ","CPF_PATTERN","isCPF","DATE_PATTERN","isDate","DDDs","isDDD","code","indexOf","PHONE_PATTERN","isPhone","DDD","PATTERNS","isCPFOrCNPJ","matches","pattern","includes","addPeriods","formatToBRL","number","toFixed","formatToCAEPF","formatToCEP","formatToCNPJ","formatToCPF","canFormatToCPF","_b","match","formatToCPFOrCNPJ","capitalizeWord","word","charAt","toLocaleUpperCase","substr","toLocaleLowerCase","normalizeWhiteSpaces","splitIntoWords","text","DEFAULT_WORDS_TO_KEEP_UPPER_CASE","DEFAULT_WORDS_TO_KEEP_LOWER_CASE","formatToCapitalized","_c","wordsToKeepLowerCase","_d","wordsToKeepUpperCase","_e","trimTrailingWhiteSpaces","words","isFirstWord","wordInLowerCase","join","fillWithZeros","toString","formatToDate","formatToDateTime","formatToGenericPhone","countryCodeLength","phone","re","RegExp","normalizeRange","range","limit","Array","isArray","abs","within","DIGIT","parseToCharacters","digits","children","character","kind","formatToHiddenDigits","options","characters","node","hider","splitOnLast","formatToList","everyButLast","last","formatToNumber","trunc","formatToPhone","formatToRG","state","toUpperCase"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/node_modules/brazilian-values/dist/brazilian-values.mjs"],"sourcesContent":["/**\r\n * Parses a brazilian formatted list into an Array.\r\n * @example\r\n * parseToArray('');\r\n * //=> []\r\n * parseToArray('1');\r\n * //=> ['1']\r\n * parseToArray('1 e 2');\r\n * //=> ['1', '2']\r\n * parseToArray('1, 2, 3, 4 e 5');\r\n * //=> ['1', '2', '3', '4', '5']\r\n * parseToArray('Fernanda, Luana e Ana Carolina');\r\n * //=> ['Fernanda', 'Luana', 'Ana Carolina']\r\n * @param value - A brazilian formatted list.\r\n */\nvar parseToArray = function parseToArray(value) {\n  if (!value.trim()) return [];\n  var items = value.split(' e ');\n  if (items.length === 1) return items;\n  return items[0].split(', ').concat(items[1]);\n};\n\n/**\r\n * Transforms pieces of a date into a Date instance.\r\n * @param pieces - Date pieces.\r\n */\nvar parsePiecesToDate = function parsePiecesToDate(pieces) {\n  return new Date(pieces.year, pieces.month, pieces.date, pieces.hours, pieces.minutes, pieces.seconds);\n};\n\n/**\r\n * Compare pieces of a date to values obtained from a Date instance.\r\n * @param pieces - Pieces of a date (date, month, year, hours, minutes and seconds).\r\n * @param instance - A Date instance.\r\n */\n\nvar comparePiecesToDate = function comparePiecesToDate(pieces, instance) {\n  if (instance === void 0) {\n    instance = parsePiecesToDate(pieces);\n  }\n\n  return instance.getDate() === pieces.date && instance.getMonth() === pieces.month && instance.getFullYear() === pieces.year && instance.getHours() === pieces.hours && instance.getMinutes() === pieces.minutes && instance.getSeconds() === pieces.seconds;\n};\n\n/**\r\n * Resolve a brazilian formatted date or datetime into date, month, year  pieces and hours, minutes and seconds pieces (if contains time).\r\n * @param value - A date in DD/MM/YYYY or DD/MM/YYYY HH:mm:ss.\r\n */\nvar mapToPieces = function mapToPieces(value) {\n  var expression = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})( (\\d{2}):(\\d{2})(:(\\d{2}))?)?$/;\n\n  var _a = expression.exec(value),\n      DD = _a[1],\n      MM = _a[2],\n      YYYY = _a[3],\n      HH = _a[5],\n      mm = _a[6],\n      ss = _a[8];\n\n  return {\n    date: parseInt(DD, 10),\n    year: parseInt(YYYY, 10),\n    month: parseInt(MM, 10) - 1,\n    hours: parseInt(HH !== null && HH !== void 0 ? HH : 0, 10),\n    minutes: parseInt(mm !== null && mm !== void 0 ? mm : 0, 10),\n    seconds: parseInt(ss !== null && ss !== void 0 ? ss : 0, 10)\n  };\n};\n\n/**\r\n * A `RegExp` that matches common brazilian date and, optionally, time formats.\r\n *\r\n * In date and time the seconds are optional too. So the valid formats are:\r\n * \"DD/MM/YYYY\", \"DD/MM/YYYY HH:mm\" and \"DD/MM/YYYY HH:mm:ss\".\r\n */\n\nvar DATE_TIME_PATTERN = /^\\d{2}\\/\\d{2}\\/\\d{4}( \\d{2}:\\d{2}(:\\d{2})?)?$/;\n/**\r\n * Parses a brazilian formatted date into a Date instance.\r\n * @example ```js\r\n * parseToDate('28/03/1996')\r\n * //=> '1996-03-28T03:00:00.000Z'\r\n *\r\n * parseToDate('31/02/2018')\r\n * //=> throws Error('Value \"31/02/2018\" is an invalid date.')\r\n * ```\r\n * @param value - A date in DD/MM/YYYY.\r\n */\n\nvar parseToDate = function parseToDate(value) {\n  if (!DATE_TIME_PATTERN.test(value)) throw new Error(\"Value \\\"\" + value + \"\\\" does not match format.\");\n  var pieces = mapToPieces(value);\n  var instance = parsePiecesToDate(pieces);\n  if (!comparePiecesToDate(pieces, instance)) throw new Error(\"Value \\\"\" + value + \"\\\" is an invalid date.\");\n  return instance;\n};\n\n/**\r\n * Parses brazilian formatted number to number.\r\n * @example\r\n * parseToNumber('10')\r\n * //=> 10\r\n * parseToNumber('-1.299')\r\n * //=> -1299\r\n * parseToNumber('0,981')\r\n * //=> 0.981\r\n * parseToNumber('19.898,1298')\r\n * //=> 19898.1298\r\n * @param value - A brazilian formatted number.\r\n */\nvar parseToNumber = function parseToNumber(value) {\n  return Number(value.replace(/\\./g, '').replace(',', '.'));\n};\n\n/**\r\n * Generate the next digit from a CAEPF number.\r\n * @param numbers - Numbers used to generate checkers.\r\n * @param validators - Validators used to generate checkers.\r\n */\nvar calculateCAEPFDigit = function calculateCAEPFDigit(numbers, validators) {\n  var digit = numbers.reduce(function (digit, value, index) {\n    return digit += Number(value) * Number(validators[index]);\n  }, 0);\n  return digit % 11 % 10;\n};\n\n/**\r\n * Generate CAEPF checksums. Generate simple checksums, add 12 and subtract 100\r\n * if it's more than that. Used to validate document number.\r\n * @param numbers - Numbers used to generate checkers.\r\n * @param validators - Validators used to generate checkers.\r\n */\n\nvar generateCAEPFCheckSums = function generateCAEPFCheckSums(numbers, validators) {\n  var value = numbers.slice();\n  value[12] = calculateCAEPFDigit(value.slice(0, 12), validators.slice(1, 13));\n  value[13] = calculateCAEPFDigit(value.slice(0, 13), validators);\n  var dv = (Number(\"\" + value[12] + value[13]) + 12) % 100;\n  return [Math.floor(dv / 10), dv % 10];\n};\n\n/**\r\n * Check if items are same, if their values are repeated.\r\n * @param item\r\n */\nvar isRepeatedArray = function isRepeatedArray(items) {\n  return items.every(function (item) {\n    return items[0] === item;\n  });\n};\n\n/**\r\n * Matches every non-numeric characters.\r\n */\nvar NonNumeric = /\\D/g;\n/**\r\n * Maps to a text containing only numeric characters.\r\n * @param value - A text containing numbers.\r\n */\n\nvar mapToNumeric = function mapToNumeric(value) {\n  return value.replace(NonNumeric, '');\n};\n\n/**\r\n * Maps a text to a collection of it's numbers.\r\n * @param value - A text containing numbers.\r\n */\n\nvar mapToNumbers = function mapToNumbers(value) {\n  return mapToNumeric(value).split('').map(Number);\n};\n\n/**\r\n * Pattern to match formatted CAEPF (999.999.999/999-99) or 14 numbers.\r\n */\n\nvar CAEPF_PATTERN = /^(\\d{14}|\\d{3}\\.\\d{3}\\.\\d{3}\\/\\d{3}\\-\\d{2})$/;\n/**\r\n * Check if value is a valid CAEPF.\r\n * @example ```js\r\n * isCAEPF('41142260000101')\r\n * //=> true\r\n *\r\n * isCAEPF('411.422.600/001-01')\r\n * //=> true\r\n *\r\n * isCAEPF('111.111.111/111-11')\r\n * //=> false\r\n *\r\n * isCAEPF('411407182')\r\n * //=> false\r\n *\r\n * ```\r\n * @param value - A text containing a CAEPF.\r\n */\n\nvar isCAEPF = function isCAEPF(value) {\n  if (!CAEPF_PATTERN.test(value)) return false;\n  var numbers = mapToNumbers(value);\n  if (isRepeatedArray(numbers)) return false;\n  var validators = [5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9];\n  var checkers = generateCAEPFCheckSums(numbers, validators);\n  return numbers[12] === checkers[0] && numbers[13] === checkers[1];\n};\n\n/**\r\n * Pattern to match formatted CEP (99999-999) or 8 numbers.\r\n */\nvar CEP_PATTERN = /^(\\d{8}|\\d{2}\\.?\\d{3}\\-\\d{3})$/;\n/**\r\n * Check if value is a valid CEP.\r\n * @example ```js\r\n * isCEP('50.833-000')\r\n * //=> true\r\n *\r\n * isCEP('02998-050')\r\n * //=> true\r\n *\r\n * isCEP('00000000')\r\n * //=> true\r\n *\r\n * isCEP('0')\r\n * //=> false\r\n *\r\n * isCEP('1982891928981982198')\r\n * //=> false\r\n * ```\r\n * @param value - A text containing a CEP.\r\n */\n\nvar isCEP = function isCEP(value) {\n  return CEP_PATTERN.test(value);\n};\n\n/**\r\n * Generate check sums. Multiply numbers to validators and sum them to generate\r\n * check sums, they're used to check if numbers are valid.\r\n * @param numbers - Numbers used to generate checkers.\r\n * @param validators - Validators used to generate checkers.\r\n */\nvar generateCheckSums = function generateCheckSums(numbers, validators) {\n  var initialCheckSums = [0, 0];\n  return validators.reduce(function (_a, validator, index) {\n    var checkerA = _a[0],\n        checkerB = _a[1];\n    return [index === 0 ? 0 : checkerA + numbers[index - 1] * validator, checkerB + numbers[index] * validator];\n  }, initialCheckSums);\n};\n\n/**\r\n * Get remaining of 11 or `0` if lower than 2.\r\n * @param value - Value used remaining.\r\n */\nvar getRemaining = function getRemaining(value) {\n  return value % 11 < 2 ? 0 : 11 - value % 11;\n};\n\n/**\r\n * Pattern to match formatted CNPJ (99.999.999/9999-99) or 14 numbers.\r\n */\n\nvar CNPJ_PATTERN = /^(\\d{14}|\\d{2}\\.\\d{3}\\.\\d{3}\\/\\d{4}\\-\\d{2})$/;\n/**\r\n * Check if value is a valid CNPJ.\r\n * @example ```js\r\n * isCNPJ('41142260000189')\r\n * //=> true\r\n *\r\n * isCNPJ('45.723.174/0001-10')\r\n * //=> true\r\n *\r\n * isCNPJ('411407182')\r\n * //=> false\r\n *\r\n * isCNPJ('11.111.111/1111-11')\r\n * //=> false\r\n * ```\r\n * @param value - A text containing a CNPJ.\r\n */\n\nvar isCNPJ = function isCNPJ(value) {\n  if (!CNPJ_PATTERN.test(value)) return false;\n  var numbers = mapToNumbers(value);\n  if (isRepeatedArray(numbers)) return false;\n  var validators = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n  var checkers = generateCheckSums(numbers, validators);\n  return numbers[12] === getRemaining(checkers[0]) && numbers[13] === getRemaining(checkers[1]);\n};\n\n/**\r\n * Pattern to match formatted CPF (999.999.999-99) or 11 numbers.\r\n */\n\nvar CPF_PATTERN = /^(\\d{11}|\\d{3}\\.\\d{3}\\.\\d{3}\\-\\d{2})$/;\n/**\r\n * Check if value is a valid CPF.\r\n * @example ```js\r\n * isCPF('366.418.768-70')\r\n * //=> true\r\n *\r\n * isCPF('36641876870')\r\n * //=> true\r\n *\r\n * isCPF('213.198.013-20')\r\n * //=> false\r\n *\r\n * isCPF('2131201872781')\r\n * //=> false\r\n *\r\n * isCPF('11111111111')\r\n * //=> false\r\n * ```\r\n * @param value - A text containing a CPF.\r\n */\n\nvar isCPF = function isCPF(value) {\n  if (!CPF_PATTERN.test(value)) return false;\n  var numbers = mapToNumbers(value);\n  if (isRepeatedArray(numbers)) return false;\n  var validators = [11, 10, 9, 8, 7, 6, 5, 4, 3, 2];\n  var checkers = generateCheckSums(numbers, validators);\n  return numbers[9] === getRemaining(checkers[0]) && numbers[10] === getRemaining(checkers[1]);\n};\n\n/**\r\n * Pattern to match brazilian formatted dates (99/99/9999).\r\n */\n\nvar DATE_PATTERN = /^\\d{2}\\/\\d{2}\\/\\d{4}((\\s)?(\\d{2}:\\d{2}:\\d{2}))?$/;\n/**\r\n * Check if a brazilian formatted date is valid.\r\n * @example ```js\r\n * isDate('03/08/2017')\r\n * //=> true\r\n *\r\n * isDate('28/13/2017')\r\n * //=> false\r\n *\r\n * isDate('03-08-2017')\r\n * //=> false\r\n *\r\n * isDate('31/03/18')\r\n * //=> false\r\n * ```\r\n * @param value - A date in DD/MM/YYYY.\r\n */\n\nvar isDate = function isDate(value) {\n  return DATE_PATTERN.test(value) && comparePiecesToDate(mapToPieces(value));\n};\n\n/**\r\n * Brazilian valid DDD (direct dialing at a distance) codes.\r\n */\nvar DDDs = [\"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"21\", \"22\", \"24\", \"27\", \"28\", \"31\", \"32\", \"33\", \"34\", \"35\", \"37\", \"38\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"51\", \"53\", \"54\", \"55\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"71\", \"73\", \"74\", \"75\", \"77\", \"79\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"];\n/**\r\n * Check if value is a valid DDD.\r\n * @example ```js\r\n * isDDD('81')\r\n * //=> true\r\n *\r\n * isDDD('10')\r\n * //=> false\r\n *\r\n * isDDD('A#')\r\n * //=> false\r\n * ```\r\n * @param code\r\n */\n\nvar isDDD = function isDDD(code) {\n  return DDDs.indexOf(code) !== -1;\n};\n\n/**\r\n * Pattern for common brazilian telephone number formats, optionally with DDI,\r\n * DDD and the ninth digit.\r\n */\n\nvar PHONE_PATTERN = /^(\\+55)? ?\\(?(\\d{2})?\\)? ?9?\\d{4}[-| ]?\\d{4}$/;\n/**\r\n * Check if value is a valid brazilian phone number. It can check a wide\r\n * variety of formats optionally with DDI, DDD and the ninth digit.\r\n *\r\n * @example ```js\r\n * isPhone('+55 (11) 98273-1182')\r\n * //=> true\r\n *\r\n * isPhone('11 98273 1182')\r\n * //=> true\r\n *\r\n * isPhone('1139723768')\r\n * //=> true\r\n *\r\n * isPhone('(23) 3972-3768')\r\n * //=> false\r\n *\r\n * isPhone('(13) 65093-2093')\r\n * //=> false\r\n *\r\n * isPhone('(81) 555 178')\r\n * //=> false\r\n * ```\r\n * @param value\r\n */\n\nvar isPhone = function isPhone(value) {\n  if (!PHONE_PATTERN.test(value)) return false;\n\n  var _a = PHONE_PATTERN.exec(value),\n      DDD = _a[2];\n\n  return DDD ? isDDD(DDD) : true;\n};\n\nvar PATTERNS = [CPF_PATTERN, CNPJ_PATTERN];\n/**\r\n * Check if a value is a valid CPF or CNPJ\r\n * @example ```js\r\n * isCPFOrCNPJ('366.418.768-70')\r\n * //=> true\r\n *\r\n * isCPFOrCNPJ('36641876870')\r\n * //=> true\r\n *\r\n * isCPFOrCNPJ('213.198.013-20')\r\n * //=> false\r\n *\r\n * isCPFOrCNPJ('2131201872781')\r\n * //=> false\r\n *\r\n * isCPFOrCNPJ('11111111111')\r\n * //=> false\r\n *\r\n * isCPFOrCNPJ('41142260000189')\r\n * //=> true\r\n *\r\n * isCPFOrCNPJ('45.723.174/0001-10')\r\n * //=> true\r\n *\r\n * isCPFOrCNPJ('411407182')\r\n * //=> false\r\n *\r\n * isCPFOrCNPJ('11.111.111/1111-11')\r\n * //=> false\r\n * ```\r\n * @param value - A text containing a CPF or CNPJ\r\n */\n\nvar isCPFOrCNPJ = function isCPFOrCNPJ(value) {\n  var matches = PATTERNS.map(function (pattern) {\n    return pattern.test(value);\n  });\n  if (!matches.includes(true)) return false;\n  return matches[0] ? isCPF(value) : isCNPJ(value);\n};\n\n/**\r\n * Add periods to a numeric string value.\r\n * @param value - A numeric string value.\r\n */\nvar addPeriods = function addPeriods(value) {\n  return value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1.');\n};\n\n/**\r\n * Formats a number into money (BRL) format.\r\n * @example ```js\r\n * formatToBRL(1928.93)\r\n * //=> 'R$ 1.928,93'\r\n *\r\n * formatToBRL('9211928.18203')\r\n * //=> 'R$ 9.211.928,18'\r\n *\r\n * formatToBRL(-18.49)\r\n * //=> 'R$ -18,49'\r\n * ```\r\n * @param value BRL value.\r\n */\n\nvar formatToBRL = function formatToBRL(value) {\n  var number = Number(value).toFixed(2).replace('.', ',');\n  return 'R$ ' + addPeriods(number);\n};\n\n/**\r\n * Formats step-by-step a `string` value into a CAEPF.\r\n * @example ```js\r\n * formatToCAEPF('1234567')\r\n * //=> '123.456.7'\r\n *\r\n * formatToCAEPF('12345678900199')\r\n * //=> '123.456.789/001-99'\r\n *\r\n * formatToCAEPF('00.000.0.0--0-0000.00')\r\n * //=> '000.000.000/000-00'\r\n *\r\n * formatToCAEPF('123.456.789/001-99')\r\n * //=> '123.456.789/001-99'\r\n * ```\r\n * @param value - A `string` value of a CAEPF.\r\n */\n\nvar formatToCAEPF = function formatToCAEPF(value) {\n  return mapToNumeric(value).replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1/$2').replace(/(\\d{3})(\\d{1,2})$/, '$1-$2');\n};\n\n/**\r\n * Format a `string` number sequence into CEP format.\r\n * @example ```js\r\n * formatToCEP('15998030')\r\n * //=> '15998-030'\r\n *\r\n * formatToCEP('02999')\r\n * //=> '02999'\r\n * ```\r\n * @param value A `string` with CEP numbers.\r\n */\n\nvar formatToCEP = function formatToCEP(value) {\n  return mapToNumeric(value).replace(/(\\d{5})(\\d{1,3})/, '$1-$2');\n};\n\n/**\r\n * Formats step-by-step a `string` value into a CNPJ.\r\n * @example ```js\r\n * formatToCNPJ('128781')\r\n * //=> '12.878.1'\r\n *\r\n * formatToCNPJ('32284981000138')\r\n * //=> '32.284.981/0001-38'\r\n *\r\n * formatToCNPJ('00.0.000.00.00--00-00')\r\n * //=> '00.000.000/0000-00'\r\n * ```\r\n * @param value - A `string` value of a CNPJ.\r\n */\n\nvar formatToCNPJ = function formatToCNPJ(value) {\n  return mapToNumeric(value).replace(/(\\d{2})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1/$2').replace(/(\\d{4})(\\d{1,2})$/, '$1-$2');\n};\n\n/**\r\n * Formats step-by-step a `string` value into a CPF.\r\n * @example ```js\r\n * formatToCPF('00000000')\r\n * //=> '000.000.00'\r\n *\r\n * formatToCPF('00000000000')\r\n * //=> '000.000.000-00'\r\n *\r\n * formatToCPF('366.418.768-70')\r\n * //=> '366.418.768-70'\r\n * ```\r\n * @param value - A `string` value of a CPF.\r\n */\n\nvar formatToCPF = function formatToCPF(value) {\n  return mapToNumeric(value).replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d{1,2})$/, '$1-$2');\n};\n\n/**\r\n * Check if a `string` value can be formatted to CPF.\r\n * @param value - A `string` value of a CPF or CNPJ.\r\n */\n\nvar canFormatToCPF = function canFormatToCPF(value) {\n  var _a, _b;\n\n  return ((_b = (_a = value.match(/\\d/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) <= 11;\n};\n/**\r\n * Formats step-by-step a `string` value to CPF or CNPJ depending on its length.\r\n * @example\r\n * formatToCPFOrCNPJ('00000000')\r\n * //=> '000.000.00'\r\n *\r\n * formatToCPFOrCNPJ('366.418.768-70')\r\n * //=> '366.418.768-70'\r\n *\r\n * formatToCPFOrCNPJ('32284981000138')\r\n * //=> '32.284.981/0001-38'\r\n *\r\n * formatToCPFOrCNPJ('00.0.000.00.00--00-00')\r\n * //=> '00.000.000/0000-00'\r\n * @param value - A `string` value of a CPF or CNPJ.\r\n */\n\n\nvar formatToCPFOrCNPJ = function formatToCPFOrCNPJ(value) {\n  return canFormatToCPF(value) ? formatToCPF(value) : formatToCNPJ(value);\n};\n\n/**\r\n * Capitalizes a word.\r\n * @param word - A `string` (word) to be capitalized.\r\n */\nvar capitalizeWord = function capitalizeWord(word) {\n  return word.charAt(0).toLocaleUpperCase() + word.substr(1).toLocaleLowerCase();\n};\n\n/**\r\n * Normalize white spaces in a `string` (value).\r\n * @param value - A `string` to be normalized.\r\n */\nvar normalizeWhiteSpaces = function normalizeWhiteSpaces(value) {\n  return value.trim().replace(/\\s+/g, ' ');\n};\n\n/**\r\n * Splits text into words.\r\n * @param text - A `string` to be splitted into words.\r\n */\nvar splitIntoWords = function splitIntoWords(text) {\n  return text ? text.split(/\\s+/) : [];\n};\n\n/**\r\n * A list of default words to keep upper case.\r\n */\n\nvar DEFAULT_WORDS_TO_KEEP_UPPER_CASE = ['cnpj', 'cpf', 'ltda', 'qp', 'tv'];\n/**\r\n * A list of default words to keep lower case.\r\n */\n\nvar DEFAULT_WORDS_TO_KEEP_LOWER_CASE = ['a', 'com', 'da', 'das', 'de', 'do', 'dos', 'e', 'em', 'i', 'na', 'nas', 'no', 'nos', 'o', 'por', 'sem', 'u'];\n/**\r\n * Capitaliza as palavras de um texto, com exceção das palavras configuradas\r\n * para serem deixadas em caixa-alta ou em caixa-baixa (menos a primeira palavra\r\n * que não será caixa-baixa mesmo se configurada como).\r\n *\r\n * @example ```js\r\n * formatToCapitalized('SERVIDOR PÚBLICO MUNICIPAL')\r\n * //=> 'Servidor Público Municipal'\r\n *\r\n * formatToCapitalized('   os PrimEIROS  HOMens da tERra', {\r\n *   wordsToKeepLowerCase: ['os', 'da']\r\n * })\r\n * //=> 'Os Primeiros Homens da Terra'\r\n *\r\n * formatToCapitalized('nova tv foi lançada', {\r\n *   wordsToKeepUpperCase: ['tv']\r\n * })\r\n * //=> 'Nova TV Foi Lançada'\r\n *\r\n * formatToCapitalized(' com espaços antes e depois ', {\r\n *   trimTrailingWhiteSpaces: false\r\n * })\r\n * //=> ' Com Espaços Antes e Depois '\r\n * ```\r\n * @param value - A `string` to capitalize\r\n */\n\nvar formatToCapitalized = function formatToCapitalized(value, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.wordsToKeepLowerCase,\n      wordsToKeepLowerCase = _c === void 0 ? DEFAULT_WORDS_TO_KEEP_LOWER_CASE : _c,\n      _d = _b.wordsToKeepUpperCase,\n      wordsToKeepUpperCase = _d === void 0 ? DEFAULT_WORDS_TO_KEEP_UPPER_CASE : _d,\n      _e = _b.trimTrailingWhiteSpaces,\n      trimTrailingWhiteSpaces = _e === void 0 ? true : _e;\n\n  return splitIntoWords(trimTrailingWhiteSpaces ? normalizeWhiteSpaces(value) : value).map(function (word, index, words) {\n    var isFirstWord = word && index === 0 || !words[0] && index === 1;\n    var wordInLowerCase = word.toLocaleLowerCase();\n    if (!isFirstWord && wordsToKeepLowerCase.indexOf(wordInLowerCase) !== -1) return wordInLowerCase;\n    if (wordsToKeepUpperCase.indexOf(wordInLowerCase) !== -1) return word.toLocaleUpperCase();\n    return capitalizeWord(word);\n  }).join(\" \");\n};\n\n/**\r\n * Fills a number with zeros.\r\n * @param value - A number value.\r\n * @param length - Number of characters to be filled with zeros.\r\n */\nvar fillWithZeros = function fillWithZeros(value, length) {\n  var numbers = value.toString(10);\n\n  while (numbers.length < length) {\n    numbers = '0' + numbers;\n  }\n\n  return numbers;\n};\n\n/**\r\n * Formats a Date instance to brazilian format, DD/MM/YYYY.\r\n * @example ```js\r\n * formatToDate(new Date(2002, 7, 21))\r\n * //=> '21/08/2002'\r\n *\r\n * formatToDate(new Date())\r\n * //=> '08/09/2018'\r\n * ```\r\n * @param value - A Date instance.\r\n */\n\nvar formatToDate = function formatToDate(value) {\n  return fillWithZeros(value.getDate(), 2) + '/' + fillWithZeros(value.getMonth() + 1, 2) + '/' + fillWithZeros(value.getFullYear(), 4);\n};\n\n/**\r\n * Formats a Date instance to brazilian format of date and time, DD/MM/YYYY HH:mm.\r\n * @example ```js\r\n * formatToDateTime(new Date(2002, 7, 21, 18, 30))\r\n * //=> '21/08/2002 18:30'\r\n * ```\r\n * @param value - A Date instance.\r\n */\n\nvar formatToDateTime = function formatToDateTime(value) {\n  return formatToDate(value) + ' ' + fillWithZeros(value.getHours(), 2) + ':' + fillWithZeros(value.getMinutes(), 2);\n};\n\n/**\r\n * Formats a phone value into brazilian common phone formats.\r\n * @example ```js\r\n * formatToGenericPhone('23456789')\r\n * //=> '2345-6789'\r\n *\r\n * formatToGenericPhone('923456789')\r\n * //=> '92345-6789'\r\n *\r\n * formatToGenericPhone('21923456789')\r\n * //=> '(21) 92345-6789'\r\n *\r\n * formatToGenericPhone('021923456789')\r\n * //=> '021 92345-6789'\r\n *\r\n * formatToGenericPhone('5521923456789')\r\n * //=> '+55 21 92345-6789'\r\n * ```\r\n * @param value\r\n * @param countryCodeLength\r\n */\n\nvar formatToGenericPhone = function formatToGenericPhone(value,\n/*\r\n  Brazil country code: +55\r\n*/\ncountryCodeLength) {\n  if (countryCodeLength === void 0) {\n    countryCodeLength = 2;\n  }\n\n  var phone = mapToNumeric(value);\n\n  if (phone.length === 8) {\n    return phone.replace(/(^\\d{4})(\\d{4}$)/gi, \"$1-$2\");\n  }\n\n  if (phone.length === 9) {\n    return phone.replace(/(^\\d{5})(\\d{4}$)/gi, \"$1-$2\");\n  }\n\n  if (phone.length === 10) {\n    return phone.replace(/(^\\d{2})(\\d{4})(\\d{4}$)/gi, \"($1) $2-$3\");\n  }\n\n  if (phone.length === 11) {\n    return phone.replace(/(^\\d{2})(\\d{4,5})(\\d{4}$)/gi, \"($1) $2-$3\");\n  }\n\n  if (phone.length === 12) {\n    return phone.replace(/(^\\d{3})(\\d{5})(\\d{4}$)/gi, \"$1 $2-$3\");\n  }\n\n  var re = new RegExp(\"([0-9]{\" + countryCodeLength + \"})([0-9][0-9])([0-9]{5})([0-9]{4})\", \"gi\");\n  return phone.replace(re, \"+$1 $2 $3-$4\");\n};\n\nvar normalizeRange = function normalizeRange(range, limit) {\n  if (Array.isArray(range)) return range;\n  if (range >= 0) return [0, range];\n  return [limit + 1 - Math.abs(range), limit];\n};\nvar within = function within(range, value) {\n  return value >= range[0] && value <= range[1];\n};\n\n/** A {@link RegExp} that matches numbers between `0-9`. */\nvar DIGIT = /^\\d$/;\n/**\r\n * Parses the received `string` value to a tree of characters.\r\n * @param value\r\n */\n\nvar parseToCharacters = function parseToCharacters(value) {\n  var digits = 0;\n  var children = value.split('').map(function (character) {\n    if (DIGIT.test(character)) return {\n      character: character,\n      kind: 'digit',\n      digit: ++digits\n    };\n    return {\n      character: character,\n      kind: 'other'\n    };\n  });\n  return {\n    digits: digits,\n    children: children,\n    kind: 'root'\n  };\n};\n\n/**\r\n * Formats a `string` value with digits by replacing the digits within the\r\n * range using the hider character as replacement.\r\n *\r\n * @example ```js\r\n * formatToHiddenDigits('00.000-000')\r\n * //=> '**.*00-000'\r\n *\r\n * formatToHiddenDigits('03/04/2002', { hider: '-' })\r\n * //=> '--/-4/2002'\r\n *\r\n * formatToHiddenDigits('111.111.111-11', { range: [4, 9] })\r\n * //=> '111.***.***-11'\r\n *\r\n * formatToHiddenDigits('12.345.678-9', { hider: '#', range: 5 })\r\n * //=> '##.###.678-9'\r\n *\r\n * formatToHiddenDigits('52.715.348/0001-69', { hider: '@', range: -9 })\r\n * //=> '52.715.@@@/@@@@-@@'\r\n * ```\r\n *\r\n * @param value - A `string` with digits, with or without a mask.\r\n * @param options - The options object.\r\n */\n\nvar formatToHiddenDigits = function formatToHiddenDigits(value, options) {\n  var _a;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var characters = parseToCharacters(value);\n  var range = normalizeRange((_a = options.range) !== null && _a !== void 0 ? _a : 3, characters.digits);\n  return characters.children.map(function (node) {\n    var _a;\n\n    if (node.kind === \"digit\" && within(range, node.digit)) return (_a = options.hider) !== null && _a !== void 0 ? _a : \"*\";\n    return node.character;\n  }).join(\"\");\n};\n\n/**\r\n * Split `Array` elements into every but last and last element.\r\n * @param value - An Array with at least one item.\r\n */\nvar splitOnLast = function splitOnLast(value) {\n  return [value.slice(0, value.length - 1), value[value.length - 1]];\n};\n\n/**\r\n * Formats an Array into brazilian formatted list.\r\n * @example\r\n * formatToList(['Vitor', 'William', 'Fernando'])\r\n * //=> 'Vitor, William e Fernando'\r\n *\r\n * formatToList([])\r\n * // => ''\r\n *\r\n * formatToList(['1', '2'])\r\n * // => '1 e 2'\r\n *\r\n * formatToList(['Direito Civil'])\r\n * //=> 'Direito Civil'\r\n * @param value - An array of string values.\r\n */\n\nvar formatToList = function formatToList(value) {\n  if (value.length === 0) return '';\n  if (value.length === 1) return value[0];\n\n  var _a = splitOnLast(value),\n      everyButLast = _a[0],\n      last = _a[1];\n\n  return everyButLast.join(', ') + ' e ' + last;\n};\n\n/**\r\n * Formats a number to brazilian formatted number.\r\n * @example\r\n * formatToNumber(0)\r\n * //=> '0'\r\n * formatToNumber(-1299)\r\n * //=> '-1.299'\r\n * formatToNumber(.981)\r\n * //=> '0,981'\r\n * formatToNumber('19898.1298')\r\n * //=> '19.898,1298'\r\n * @param value - Number value to be formatted.\r\n */\n\nvar formatToNumber = function formatToNumber(value) {\n  var _a = Number(value).toString(10).split('.'),\n      number = _a[0],\n      trunc = _a[1];\n\n  if (!trunc) return addPeriods(number);\n  return addPeriods(number) + ',' + trunc;\n};\n\n/**\r\n * Formats a phone value into brazilian common phone formats.\r\n * @example ```js\r\n * formatToPhone('11')\r\n * //=> '(11'\r\n *\r\n * formatToPhone('11971626')\r\n * //=> '(11) 9716-26'\r\n *\r\n * formatToPhone('11971626799')\r\n * //=> '(11) 97162-6799'\r\n * ```\r\n * @param value\r\n */\n\nvar formatToPhone = function formatToPhone(value) {\n  return mapToNumeric(value).replace(/(\\d{1,2})/, '($1').replace(/(\\(\\d{2})(\\d{1,4})/, '$1) $2').replace(/( \\d{4})(\\d{1,4})/, '$1-$2').replace(/( \\d{4})(?:-)(\\d{1})(\\d{4})/, '$1$2-$3');\n};\n\n/**\r\n * Progressively formats a `string` into a RG.\r\n * @example ```js\r\n * formatToRG('00000000A', 'SP')\r\n * //=> '00.000.000-A'\r\n *\r\n * formatToRG('00.00.0000-0', 'RJ')\r\n * //=> '00.000.000-0'\r\n *\r\n * formatToRG('MG-14.808.688', 'MG')\r\n * //=> 'MG-14.808.688'\r\n * ```\r\n * @param value - A `string` representing an RG.\r\n * @param state - Brazilian state which defines RG format.\r\n */\nvar formatToRG = function formatToRG(value, state) {\n  return state !== 'RJ' && state !== 'SP' ? value : value.toUpperCase().replace(/[^\\d|A|B|X]/g, '').replace(/(\\d{2})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})([\\d|A|B|X]{1})$/, '$1-$2');\n};\n\nexport { formatToBRL, formatToCAEPF, formatToCEP, formatToCNPJ, formatToCPF, formatToCPFOrCNPJ, formatToCapitalized, formatToDate, formatToDateTime, formatToGenericPhone, formatToHiddenDigits, formatToList, formatToNumber, formatToPhone, formatToRG, isCAEPF, isCEP, isCNPJ, isCPF, isCPFOrCNPJ, isDDD, isDate, isPhone, parseToArray, parseToDate, parseToNumber };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}