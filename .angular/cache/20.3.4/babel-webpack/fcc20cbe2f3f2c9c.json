{"ast":null,"code":"import { Route } from '@angular/router';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CustomPreloadStrategy {\n  preload(route, load) {\n    // Preload apenas rotas que são frequentemente acessadas\n    if (route.data && route.data['preload'] === true) {\n      return load();\n    }\n    // Para desenvolvimento, preload tudo\n    if (route.data && route.data['preload'] === 'dev') {\n      return load();\n    }\n    return of(null);\n  }\n  static ɵfac = function CustomPreloadStrategy_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CustomPreloadStrategy)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomPreloadStrategy,\n    factory: CustomPreloadStrategy.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Route","of","CustomPreloadStrategy","preload","route","load","data","factory","ɵfac","providedIn"],"sources":["/home/danilo/Área de trabalho/formsync-nx/apps/front/src/app/config/preload.config.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { PreloadingStrategy, Route } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomPreloadStrategy implements PreloadingStrategy {\n  preload(route: Route, load: () => Observable<any>): Observable<any> {\n    // Preload apenas rotas que são frequentemente acessadas\n    if (route.data && route.data['preload'] === true) {\n      return load();\n    }\n    \n    // Para desenvolvimento, preload tudo\n    if (route.data && route.data['preload'] === 'dev') {\n      return load();\n    }\n    \n    return of(null);\n  }\n}\n"],"mappings":"AACA,SAA6BA,KAAK,QAAQ,iBAAiB;AAC3D,SAAqBC,EAAE,QAAQ,MAAM;;AAKrC,OAAM,MAAOC,qBAAqB;EAChCC,OAAOA,CAACC,KAAY,EAAEC,IAA2B;IAC/C;IACA,IAAID,KAAK,CAACE,IAAI,IAAIF,KAAK,CAACE,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,EAAE;MAChD,OAAOD,IAAI,EAAE;IACf;IAEA;IACA,IAAID,KAAK,CAACE,IAAI,IAAIF,KAAK,CAACE,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,EAAE;MACjD,OAAOD,IAAI,EAAE;IACf;IAEA,OAAOJ,EAAE,CAAC,IAAI,CAAC;EACjB;;qCAbWC,qBAAqB;EAAA;;WAArBA,qBAAqB;IAAAK,OAAA,EAArBL,qBAAqB,CAAAM,IAAA;IAAAC,UAAA,EAFpB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}