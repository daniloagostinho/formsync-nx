{"ast":null,"code":"import { Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { ErrorHandlerService } from './error-handler.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./error-handler.service\";\nexport class AuthErrorHandlerService {\n  authService;\n  router;\n  errorHandler;\n  constructor(authService, router, errorHandler) {\n    this.authService = authService;\n    this.router = router;\n    this.errorHandler = errorHandler;\n  }\n  /**\n   * Trata erros de autentica√ß√£o e faz logout autom√°tico quando necess√°rio\n   */\n  handleAuthError(error, context) {\n    console.log(`üîê [${context || 'AuthErrorHandler'}] Tratando erro:`, error);\n    // Verificar se √© erro que requer logout\n    if (this.errorHandler.requiresLogout(error)) {\n      console.log(`üîê [${context || 'AuthErrorHandler'}] Erro de autentica√ß√£o detectado, fazendo logout autom√°tico...`);\n      // Fazer logout\n      this.authService.logout();\n      // Mostrar mensagem amig√°vel\n      const message = this.errorHandler.getErrorMessage(error);\n      console.log(`üìù Mensagem para o usu√°rio: ${message}`);\n      return;\n    }\n    // Para outros tipos de erro, apenas logar\n    console.log(`‚ö†Ô∏è [${context || 'AuthErrorHandler'}] Erro n√£o relacionado √† autentica√ß√£o:`, error);\n  }\n  /**\n   * Verifica se um erro √© de autentica√ß√£o\n   */\n  isAuthError(error) {\n    return this.errorHandler.requiresLogout(error);\n  }\n  /**\n   * Verifica se um erro √© de acesso negado (403)\n   */\n  isAccessDeniedError(error) {\n    return this.errorHandler.isAccessDeniedError(error);\n  }\n  /**\n   * Verifica se um erro √© de token expirado (401)\n   */\n  isTokenExpiredError(error) {\n    return this.errorHandler.isTokenExpiredError(error);\n  }\n  /**\n   * Trata erro espec√≠fico de acesso negado\n   */\n  handleAccessDeniedError(error, context) {\n    if (this.isAccessDeniedError(error)) {\n      console.log(`üö´ [${context || 'AuthErrorHandler'}] Acesso negado detectado, fazendo logout...`);\n      this.authService.logout();\n    }\n  }\n  /**\n   * Trata erro espec√≠fico de token expirado\n   */\n  handleTokenExpiredError(error, context) {\n    if (this.isTokenExpiredError(error)) {\n      console.log(`‚è∞ [${context || 'AuthErrorHandler'}] Token expirado detectado, fazendo logout...`);\n      this.authService.logout();\n    }\n  }\n  static …µfac = function AuthErrorHandlerService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AuthErrorHandlerService)(i0.…µ…µinject(i1.AuthService), i0.…µ…µinject(i2.Router), i0.…µ…µinject(i3.ErrorHandlerService));\n  };\n  static …µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: AuthErrorHandlerService,\n    factory: AuthErrorHandlerService.…µfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Router","AuthService","ErrorHandlerService","AuthErrorHandlerService","authService","router","errorHandler","constructor","handleAuthError","error","context","console","log","requiresLogout","logout","message","getErrorMessage","isAuthError","isAccessDeniedError","isTokenExpiredError","handleAccessDeniedError","handleTokenExpiredError","i0","…µ…µinject","i1","i2","i3","factory","…µfac","providedIn"],"sources":["/home/danilo/√Årea de trabalho/formsync-nx/apps/front/src/app/services/auth-error-handler.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { ErrorHandlerService } from './error-handler.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorHandlerService {\n\n    constructor(\n        private authService: AuthService,\n        private router: Router,\n        private errorHandler: ErrorHandlerService\n    ) { }\n\n    /**\n     * Trata erros de autentica√ß√£o e faz logout autom√°tico quando necess√°rio\n     */\n    handleAuthError(error: any, context?: string): void {\n        console.log(`üîê [${context || 'AuthErrorHandler'}] Tratando erro:`, error);\n\n        // Verificar se √© erro que requer logout\n        if (this.errorHandler.requiresLogout(error)) {\n            console.log(`üîê [${context || 'AuthErrorHandler'}] Erro de autentica√ß√£o detectado, fazendo logout autom√°tico...`);\n\n            // Fazer logout\n            this.authService.logout();\n\n            // Mostrar mensagem amig√°vel\n            const message = this.errorHandler.getErrorMessage(error);\n            console.log(`üìù Mensagem para o usu√°rio: ${message}`);\n\n            return;\n        }\n\n        // Para outros tipos de erro, apenas logar\n        console.log(`‚ö†Ô∏è [${context || 'AuthErrorHandler'}] Erro n√£o relacionado √† autentica√ß√£o:`, error);\n    }\n\n    /**\n     * Verifica se um erro √© de autentica√ß√£o\n     */\n    isAuthError(error: any): boolean {\n        return this.errorHandler.requiresLogout(error);\n    }\n\n    /**\n     * Verifica se um erro √© de acesso negado (403)\n     */\n    isAccessDeniedError(error: any): boolean {\n        return this.errorHandler.isAccessDeniedError(error);\n    }\n\n    /**\n     * Verifica se um erro √© de token expirado (401)\n     */\n    isTokenExpiredError(error: any): boolean {\n        return this.errorHandler.isTokenExpiredError(error);\n    }\n\n    /**\n     * Trata erro espec√≠fico de acesso negado\n     */\n    handleAccessDeniedError(error: any, context?: string): void {\n        if (this.isAccessDeniedError(error)) {\n            console.log(`üö´ [${context || 'AuthErrorHandler'}] Acesso negado detectado, fazendo logout...`);\n            this.authService.logout();\n        }\n    }\n\n    /**\n     * Trata erro espec√≠fico de token expirado\n     */\n    handleTokenExpiredError(error: any, context?: string): void {\n        if (this.isTokenExpiredError(error)) {\n            console.log(`‚è∞ [${context || 'AuthErrorHandler'}] Token expirado detectado, fazendo logout...`);\n            this.authService.logout();\n        }\n    }\n}\n\n"],"mappings":"AACA,SAASA,MAAM,QAAQ,iBAAiB;AACxC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,mBAAmB,QAAQ,yBAAyB;;;;;AAG7D,OAAM,MAAOC,uBAAuB;EAGpBC,WAAA;EACAC,MAAA;EACAC,YAAA;EAHZC,YACYH,WAAwB,EACxBC,MAAc,EACdC,YAAiC;IAFjC,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,YAAY,GAAZA,YAAY;EACpB;EAEJ;;;EAGAE,eAAeA,CAACC,KAAU,EAAEC,OAAgB;IACxCC,OAAO,CAACC,GAAG,CAAC,OAAOF,OAAO,IAAI,kBAAkB,kBAAkB,EAAED,KAAK,CAAC;IAE1E;IACA,IAAI,IAAI,CAACH,YAAY,CAACO,cAAc,CAACJ,KAAK,CAAC,EAAE;MACzCE,OAAO,CAACC,GAAG,CAAC,OAAOF,OAAO,IAAI,kBAAkB,gEAAgE,CAAC;MAEjH;MACA,IAAI,CAACN,WAAW,CAACU,MAAM,EAAE;MAEzB;MACA,MAAMC,OAAO,GAAG,IAAI,CAACT,YAAY,CAACU,eAAe,CAACP,KAAK,CAAC;MACxDE,OAAO,CAACC,GAAG,CAAC,+BAA+BG,OAAO,EAAE,CAAC;MAErD;IACJ;IAEA;IACAJ,OAAO,CAACC,GAAG,CAAC,OAAOF,OAAO,IAAI,kBAAkB,wCAAwC,EAAED,KAAK,CAAC;EACpG;EAEA;;;EAGAQ,WAAWA,CAACR,KAAU;IAClB,OAAO,IAAI,CAACH,YAAY,CAACO,cAAc,CAACJ,KAAK,CAAC;EAClD;EAEA;;;EAGAS,mBAAmBA,CAACT,KAAU;IAC1B,OAAO,IAAI,CAACH,YAAY,CAACY,mBAAmB,CAACT,KAAK,CAAC;EACvD;EAEA;;;EAGAU,mBAAmBA,CAACV,KAAU;IAC1B,OAAO,IAAI,CAACH,YAAY,CAACa,mBAAmB,CAACV,KAAK,CAAC;EACvD;EAEA;;;EAGAW,uBAAuBA,CAACX,KAAU,EAAEC,OAAgB;IAChD,IAAI,IAAI,CAACQ,mBAAmB,CAACT,KAAK,CAAC,EAAE;MACjCE,OAAO,CAACC,GAAG,CAAC,OAAOF,OAAO,IAAI,kBAAkB,8CAA8C,CAAC;MAC/F,IAAI,CAACN,WAAW,CAACU,MAAM,EAAE;IAC7B;EACJ;EAEA;;;EAGAO,uBAAuBA,CAACZ,KAAU,EAAEC,OAAgB;IAChD,IAAI,IAAI,CAACS,mBAAmB,CAACV,KAAK,CAAC,EAAE;MACjCE,OAAO,CAACC,GAAG,CAAC,MAAMF,OAAO,IAAI,kBAAkB,+CAA+C,CAAC;MAC/F,IAAI,CAACN,WAAW,CAACU,MAAM,EAAE;IAC7B;EACJ;;qCAvESX,uBAAuB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAvB,WAAA,GAAAqB,EAAA,CAAAC,QAAA,CAAAE,EAAA,CAAAzB,MAAA,GAAAsB,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAxB,mBAAA;EAAA;;WAAvBC,uBAAuB;IAAAwB,OAAA,EAAvBxB,uBAAuB,CAAAyB,IAAA;IAAAC,UAAA,EADV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}