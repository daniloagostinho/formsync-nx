{"ast":null,"code":"import _asyncToGenerator from \"/home/danilo/\\xC1rea de trabalho/formsync-nx/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { firstValueFrom } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class CheckoutService {\n  http;\n  router;\n  API_URL = environment.apiUrl;\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n  criarCheckout(dto) {\n    return this.http.post(`${this.API_URL}/checkout`, dto);\n  }\n  // M√©todo para auto-login ap√≥s pagamento\n  autoLoginAposPagamento(email) {\n    return this.http.post(`${this.API_URL}/checkout/auto-login`, {\n      email\n    });\n  }\n  // M√©todo antigo para fazer login autom√°tico ap√≥s pagamento (mantido para compatibilidade)\n  loginAposPagamento(email) {\n    return this.http.post(`${this.API_URL}/login`, {\n      email\n    });\n  }\n  // M√©todo para verificar c√≥digo e fazer login\n  verificarCodigoELogar(email, codigo) {\n    return this.http.post(`${this.API_URL}/login/verificar`, {\n      email,\n      codigo\n    });\n  }\n  // M√©todo para tentar login autom√°tico ap√≥s pagamento (atualizado)\n  tentarLoginAutomatico(email) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        console.log('üîî Tentando auto-login para:', email);\n        // Aguardar um pouco para o webhook ser processado\n        yield new Promise(resolve => setTimeout(resolve, 3000));\n        // Usar o novo endpoint de auto-login\n        const response = yield firstValueFrom(_this.autoLoginAposPagamento(email));\n        if (response) {\n          // Salvar dados de autentica√ß√£o\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('nomeUsuario', response.nome);\n          localStorage.setItem('plano', response.plano);\n          console.log('‚úÖ Auto-login realizado com sucesso!');\n          console.log('   - Nome:', response.nome);\n          console.log('   - Email:', response.email);\n          console.log('   - Plano:', response.plano);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('‚ùå Erro no auto-login:', error);\n        return false;\n      }\n    })();\n  }\n  // M√©todo para redirecionar para dashboard ap√≥s login bem-sucedido\n  redirecionarParaDashboard() {\n    this.router.navigate(['/dashboard']);\n  }\n  static …µfac = function CheckoutService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CheckoutService)(i0.…µ…µinject(i1.HttpClient), i0.…µ…µinject(i2.Router));\n  };\n  static …µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: CheckoutService,\n    factory: CheckoutService.…µfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","firstValueFrom","environment","Router","CheckoutService","http","router","API_URL","apiUrl","constructor","criarCheckout","dto","post","autoLoginAposPagamento","email","loginAposPagamento","verificarCodigoELogar","codigo","tentarLoginAutomatico","_this","_asyncToGenerator","console","log","Promise","resolve","setTimeout","response","localStorage","setItem","token","nome","plano","error","redirecionarParaDashboard","navigate","i0","…µ…µinject","i1","i2","factory","…µfac","providedIn"],"sources":["/home/danilo/√Årea de trabalho/formsync-nx/apps/front/src/app/services/checkout.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { firstValueFrom } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Router } from '@angular/router';\n\nexport interface CriarCheckoutDTO {\n  plano: string;\n  email: string;\n  nome?: string;\n}\n\nexport interface AutoLoginResponse {\n  token: string;\n  nome: string;\n  email: string;\n  plano: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CheckoutService {\n  private API_URL = environment.apiUrl;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) {}\n\n  criarCheckout(dto: CriarCheckoutDTO): Observable<{ id: string }> {\n    return this.http.post<{ id: string }>(`${this.API_URL}/checkout`, dto);\n  }\n\n  // M√©todo para auto-login ap√≥s pagamento\n  autoLoginAposPagamento(email: string): Observable<AutoLoginResponse> {\n    return this.http.post<AutoLoginResponse>(`${this.API_URL}/checkout/auto-login`, { email });\n  }\n\n  // M√©todo antigo para fazer login autom√°tico ap√≥s pagamento (mantido para compatibilidade)\n  loginAposPagamento(email: string): Observable<any> {\n    return this.http.post(`${this.API_URL}/login`, { email });\n  }\n\n  // M√©todo para verificar c√≥digo e fazer login\n  verificarCodigoELogar(email: string, codigo: string): Observable<{ token: string }> {\n    return this.http.post<{ token: string }>(`${this.API_URL}/login/verificar`, { email, codigo });\n  }\n\n  // M√©todo para tentar login autom√°tico ap√≥s pagamento (atualizado)\n  async tentarLoginAutomatico(email: string): Promise<boolean> {\n    try {\n      console.log('üîî Tentando auto-login para:', email);\n      \n      // Aguardar um pouco para o webhook ser processado\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Usar o novo endpoint de auto-login\n      const response = await firstValueFrom(this.autoLoginAposPagamento(email));\n      \n      if (response) {\n        // Salvar dados de autentica√ß√£o\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('nomeUsuario', response.nome);\n        localStorage.setItem('plano', response.plano);\n        \n        console.log('‚úÖ Auto-login realizado com sucesso!');\n        console.log('   - Nome:', response.nome);\n        console.log('   - Email:', response.email);\n        console.log('   - Plano:', response.plano);\n        \n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('‚ùå Erro no auto-login:', error);\n      return false;\n    }\n  }\n\n  // M√©todo para redirecionar para dashboard ap√≥s login bem-sucedido\n  redirecionarParaDashboard() {\n    this.router.navigate(['/dashboard']);\n  }\n} "],"mappings":";AACA,SAASA,UAAU,QAAQ,sBAAsB;AAEjD,SAASC,cAAc,QAAQ,MAAM;AACrC,SAASC,WAAW,QAAQ,gCAAgC;AAC5D,SAASC,MAAM,QAAQ,iBAAiB;;;;AAkBxC,OAAM,MAAOC,eAAe;EAIhBC,IAAA;EACAC,MAAA;EAJFC,OAAO,GAAGL,WAAW,CAACM,MAAM;EAEpCC,YACUJ,IAAgB,EAChBC,MAAc;IADd,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHI,aAAaA,CAACC,GAAqB;IACjC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAiB,GAAG,IAAI,CAACL,OAAO,WAAW,EAAEI,GAAG,CAAC;EACxE;EAEA;EACAE,sBAAsBA,CAACC,KAAa;IAClC,OAAO,IAAI,CAACT,IAAI,CAACO,IAAI,CAAoB,GAAG,IAAI,CAACL,OAAO,sBAAsB,EAAE;MAAEO;IAAK,CAAE,CAAC;EAC5F;EAEA;EACAC,kBAAkBA,CAACD,KAAa;IAC9B,OAAO,IAAI,CAACT,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACL,OAAO,QAAQ,EAAE;MAAEO;IAAK,CAAE,CAAC;EAC3D;EAEA;EACAE,qBAAqBA,CAACF,KAAa,EAAEG,MAAc;IACjD,OAAO,IAAI,CAACZ,IAAI,CAACO,IAAI,CAAoB,GAAG,IAAI,CAACL,OAAO,kBAAkB,EAAE;MAAEO,KAAK;MAAEG;IAAM,CAAE,CAAC;EAChG;EAEA;EACMC,qBAAqBA,CAACJ,KAAa;IAAA,IAAAK,KAAA;IAAA,OAAAC,iBAAA;MACvC,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAER,KAAK,CAAC;QAElD;QACA,MAAM,IAAIS,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;QAEvD;QACA,MAAME,QAAQ,SAASzB,cAAc,CAACkB,KAAI,CAACN,sBAAsB,CAACC,KAAK,CAAC,CAAC;QAEzE,IAAIY,QAAQ,EAAE;UACZ;UACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,KAAK,CAAC;UAC7CF,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,QAAQ,CAACI,IAAI,CAAC;UAClDH,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACK,KAAK,CAAC;UAE7CV,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;UAClDD,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEI,QAAQ,CAACI,IAAI,CAAC;UACxCT,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEI,QAAQ,CAACZ,KAAK,CAAC;UAC1CO,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEI,QAAQ,CAACK,KAAK,CAAC;UAE1C,OAAO,IAAI;QACb;QAEA,OAAO,KAAK;MACd,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdX,OAAO,CAACW,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,OAAO,KAAK;MACd;IAAC;EACH;EAEA;EACAC,yBAAyBA,CAAA;IACvB,IAAI,CAAC3B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;EACtC;;qCA9DW9B,eAAe,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAArC,UAAA,GAAAmC,EAAA,CAAAC,QAAA,CAAAE,EAAA,CAAAnC,MAAA;EAAA;;WAAfC,eAAe;IAAAmC,OAAA,EAAfnC,eAAe,CAAAoC,IAAA;IAAAC,UAAA,EAFd;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}