{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport { SessionMonitorService } from './session-monitor.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./session-monitor.service\";\nexport class AuthService {\n  http;\n  router;\n  sessionMonitorService;\n  API_URL = environment.apiUrl;\n  tokenKey = 'token';\n  usuarioSubject = new BehaviorSubject(localStorage.getItem('nome'));\n  usuario$ = this.usuarioSubject.asObservable();\n  // Novo: plano reativo\n  planoSubject = new BehaviorSubject(localStorage.getItem('plano'));\n  plano$ = this.planoSubject.asObservable();\n  constructor(http, router, sessionMonitorService) {\n    this.http = http;\n    this.router = router;\n    this.sessionMonitorService = sessionMonitorService;\n    // Se j√° existe um token, iniciar monitoramento\n    const existingToken = this.obterToken();\n    if (existingToken) {\n      this.sessionMonitorService.startMonitoring(existingToken);\n    }\n  }\n  login(email, senha) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.API_URL}/login`, {\n      email,\n      senha\n    }, {\n      headers\n    }).pipe(tap(res => {\n      localStorage.setItem('nome', res.nome); // üëà salvar o nome\n    }));\n  }\n  enviarCodigo(email) {\n    return this.http.post(`${this.API_URL}/login`, {\n      email\n    });\n  }\n  verificarCodigo(email, codigo) {\n    return this.http.post(`${this.API_URL}/login/verificar`, {\n      email,\n      codigo\n    });\n  }\n  salvarToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n    // Iniciar monitoramento de sess√£o ap√≥s salvar o token\n    this.sessionMonitorService.startMonitoring(token);\n  }\n  salvarNomeUsuario(nome) {\n    localStorage.setItem('nome', nome);\n    this.usuarioSubject.next(nome);\n  }\n  // Novo: m√©todo para salvar plano reativamente\n  salvarPlano(plano) {\n    localStorage.setItem('plano', plano);\n    this.planoSubject.next(plano);\n  }\n  obterToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  logout() {\n    console.log('üîê Fazendo logout...');\n    // Chamar endpoint de logout no backend para revogar o token\n    const token = this.obterToken();\n    if (token) {\n      this.http.post(`${this.API_URL}/auth/logout`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).subscribe({\n        next: () => {\n          console.log('‚úÖ Logout realizado com sucesso no backend');\n        },\n        error: error => {\n          console.warn('‚ö†Ô∏è Erro ao fazer logout no backend:', error);\n        },\n        complete: () => {\n          this.fazerLogoutLocal();\n        }\n      });\n    } else {\n      this.fazerLogoutLocal();\n    }\n  }\n  fazerLogoutLocal() {\n    // Parar monitoramento de sess√£o\n    this.sessionMonitorService.stopMonitoring();\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem('nome');\n    localStorage.removeItem('plano');\n    this.usuarioSubject.next(null);\n    this.planoSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n  estaAutenticado() {\n    return !!this.obterToken();\n  }\n  static …µfac = function AuthService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AuthService)(i0.…µ…µinject(i1.HttpClient), i0.…µ…µinject(i2.Router), i0.…µ…µinject(i3.SessionMonitorService));\n  };\n  static …µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: AuthService,\n    factory: AuthService.…µfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","HttpHeaders","Router","tap","environment","BehaviorSubject","SessionMonitorService","AuthService","http","router","sessionMonitorService","API_URL","apiUrl","tokenKey","usuarioSubject","localStorage","getItem","usuario$","asObservable","planoSubject","plano$","constructor","existingToken","obterToken","startMonitoring","login","email","senha","headers","post","pipe","res","setItem","nome","enviarCodigo","verificarCodigo","codigo","salvarToken","token","salvarNomeUsuario","next","salvarPlano","plano","logout","console","log","Authorization","subscribe","error","warn","complete","fazerLogoutLocal","stopMonitoring","removeItem","navigate","estaAutenticado","i0","…µ…µinject","i1","i2","i3","factory","…µfac","providedIn"],"sources":["/home/danilo/√Årea de trabalho/formsync-nx/apps/front/src/app/services/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport { SessionMonitorService } from './session-monitor.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private API_URL = environment.apiUrl;\n  private tokenKey = 'token';\n  private usuarioSubject = new BehaviorSubject<string | null>(localStorage.getItem('nome'));\n  usuario$ = this.usuarioSubject.asObservable();\n\n  // Novo: plano reativo\n  private planoSubject = new BehaviorSubject<string | null>(localStorage.getItem('plano'));\n  plano$ = this.planoSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private sessionMonitorService: SessionMonitorService\n  ) {\n    // Se j√° existe um token, iniciar monitoramento\n    const existingToken = this.obterToken();\n    if (existingToken) {\n      this.sessionMonitorService.startMonitoring(existingToken);\n    }\n  }\n\n  login(email: string, senha: string) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http.post<{ token: string; nome: string }>(\n      `${this.API_URL}/login`,\n      { email, senha },\n      { headers }\n    ).pipe(\n      tap((res) => {\n        localStorage.setItem('nome', res.nome); // üëà salvar o nome\n      })\n    );\n  }\n\n  enviarCodigo(email: string) {\n    return this.http.post(`${this.API_URL}/login`, { email });\n  }\n\n  verificarCodigo(email: string, codigo: string) {\n    return this.http.post<{ token: string }>(\n      `${this.API_URL}/login/verificar`,\n      { email, codigo }\n    );\n  }\n\n  salvarToken(token: string) {\n    localStorage.setItem(this.tokenKey, token);\n    // Iniciar monitoramento de sess√£o ap√≥s salvar o token\n    this.sessionMonitorService.startMonitoring(token);\n  }\n\n  salvarNomeUsuario(nome: string) {\n    localStorage.setItem('nome', nome);\n    this.usuarioSubject.next(nome);\n  }\n\n  // Novo: m√©todo para salvar plano reativamente\n  salvarPlano(plano: string) {\n    localStorage.setItem('plano', plano);\n    this.planoSubject.next(plano);\n  }\n\n  obterToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  logout() {\n    console.log('üîê Fazendo logout...');\n\n    // Chamar endpoint de logout no backend para revogar o token\n    const token = this.obterToken();\n    if (token) {\n      this.http.post(`${this.API_URL}/auth/logout`, {}, {\n        headers: { Authorization: `Bearer ${token}` }\n      }).subscribe({\n        next: () => {\n          console.log('‚úÖ Logout realizado com sucesso no backend');\n        },\n        error: (error) => {\n          console.warn('‚ö†Ô∏è Erro ao fazer logout no backend:', error);\n        },\n        complete: () => {\n          this.fazerLogoutLocal();\n        }\n      });\n    } else {\n      this.fazerLogoutLocal();\n    }\n  }\n\n  private fazerLogoutLocal() {\n    // Parar monitoramento de sess√£o\n    this.sessionMonitorService.stopMonitoring();\n\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem('nome');\n    localStorage.removeItem('plano');\n    this.usuarioSubject.next(null);\n    this.planoSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n\n  estaAutenticado(): boolean {\n    return !!this.obterToken();\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}